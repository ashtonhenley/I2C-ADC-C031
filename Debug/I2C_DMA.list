
I2C_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054e8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080055a8  080055a8  000065a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005628  08005628  0000702c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005628  08005628  0000702c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005628  08005628  0000702c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005628  08005628  00006628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800562c  0800562c  0000662c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08005630  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  2000002c  0800565c  0000702c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  0800565c  00007278  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000702c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f9e  00000000  00000000  00007054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002669  00000000  00000000  00017ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  0001a660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b09  00000000  00000000  0001b498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015460  00000000  00000000  0001bfa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012817  00000000  00000000  00031401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083259  00000000  00000000  00043c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6e71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032f4  00000000  00000000  000c6eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000ca1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000002c 	.word	0x2000002c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005590 	.word	0x08005590

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000030 	.word	0x20000030
 8000104:	08005590 	.word	0x08005590

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fdd4 	bl	8000dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f838 	bl	800029c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f982 	bl	8000534 <MX_GPIO_Init>
  MX_DMA_Init();
 8000230:	f000 f95a 	bl	80004e8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000234:	f000 f87a 	bl	800032c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000238:	f000 f916 	bl	8000468 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_Slave_Transmit_DMA(&hi2c1, test_data, 8);
 800023c:	4914      	ldr	r1, [pc, #80]	@ (8000290 <main+0x70>)
 800023e:	4b15      	ldr	r3, [pc, #84]	@ (8000294 <main+0x74>)
 8000240:	2208      	movs	r2, #8
 8000242:	0018      	movs	r0, r3
 8000244:	f002 fae0 	bl	8002808 <HAL_I2C_Slave_Transmit_DMA>
//  HAL_ADC_Start_DMA(&hadc1, adc_buffer, 4);
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000248:	2000      	movs	r0, #0
 800024a:	f000 fbe9 	bl	8000a20 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800024e:	2101      	movs	r1, #1
 8000250:	2000      	movs	r0, #0
 8000252:	f000 fc4f 	bl	8000af4 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000256:	4b10      	ldr	r3, [pc, #64]	@ (8000298 <main+0x78>)
 8000258:	22e1      	movs	r2, #225	@ 0xe1
 800025a:	0252      	lsls	r2, r2, #9
 800025c:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800025e:	4b0e      	ldr	r3, [pc, #56]	@ (8000298 <main+0x78>)
 8000260:	2200      	movs	r2, #0
 8000262:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000264:	4b0c      	ldr	r3, [pc, #48]	@ (8000298 <main+0x78>)
 8000266:	2200      	movs	r2, #0
 8000268:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800026a:	4b0b      	ldr	r3, [pc, #44]	@ (8000298 <main+0x78>)
 800026c:	2200      	movs	r2, #0
 800026e:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000270:	4b09      	ldr	r3, [pc, #36]	@ (8000298 <main+0x78>)
 8000272:	2200      	movs	r2, #0
 8000274:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000276:	4b08      	ldr	r3, [pc, #32]	@ (8000298 <main+0x78>)
 8000278:	0019      	movs	r1, r3
 800027a:	2000      	movs	r0, #0
 800027c:	f000 fce0 	bl	8000c40 <BSP_COM_Init>
 8000280:	1e03      	subs	r3, r0, #0
 8000282:	d002      	beq.n	800028a <main+0x6a>
  {
    Error_Handler();
 8000284:	f000 f9e2 	bl	800064c <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000288:	46c0      	nop			@ (mov r8, r8)
 800028a:	46c0      	nop			@ (mov r8, r8)
 800028c:	e7fd      	b.n	800028a <main+0x6a>
 800028e:	46c0      	nop			@ (mov r8, r8)
 8000290:	20000000 	.word	0x20000000
 8000294:	20000118 	.word	0x20000118
 8000298:	20000048 	.word	0x20000048

0800029c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b08d      	sub	sp, #52	@ 0x34
 80002a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a2:	2414      	movs	r4, #20
 80002a4:	193b      	adds	r3, r7, r4
 80002a6:	0018      	movs	r0, r3
 80002a8:	231c      	movs	r3, #28
 80002aa:	001a      	movs	r2, r3
 80002ac:	2100      	movs	r1, #0
 80002ae:	f005 f943 	bl	8005538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b2:	003b      	movs	r3, r7
 80002b4:	0018      	movs	r0, r3
 80002b6:	2314      	movs	r3, #20
 80002b8:	001a      	movs	r2, r3
 80002ba:	2100      	movs	r1, #0
 80002bc:	f005 f93c 	bl	8005538 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 80002c0:	4b19      	ldr	r3, [pc, #100]	@ (8000328 <SystemClock_Config+0x8c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	2207      	movs	r2, #7
 80002c6:	4393      	bics	r3, r2
 80002c8:	001a      	movs	r2, r3
 80002ca:	4b17      	ldr	r3, [pc, #92]	@ (8000328 <SystemClock_Config+0x8c>)
 80002cc:	2101      	movs	r1, #1
 80002ce:	430a      	orrs	r2, r1
 80002d0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002d2:	193b      	adds	r3, r7, r4
 80002d4:	2201      	movs	r2, #1
 80002d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002d8:	193b      	adds	r3, r7, r4
 80002da:	2280      	movs	r2, #128	@ 0x80
 80002dc:	0252      	lsls	r2, r2, #9
 80002de:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e0:	193b      	adds	r3, r7, r4
 80002e2:	0018      	movs	r0, r3
 80002e4:	f004 f8d2 	bl	800448c <HAL_RCC_OscConfig>
 80002e8:	1e03      	subs	r3, r0, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80002ec:	f000 f9ae 	bl	800064c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f0:	003b      	movs	r3, r7
 80002f2:	2207      	movs	r2, #7
 80002f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80002f6:	003b      	movs	r3, r7
 80002f8:	2201      	movs	r2, #1
 80002fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80002fc:	003b      	movs	r3, r7
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000302:	003b      	movs	r3, r7
 8000304:	2200      	movs	r2, #0
 8000306:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000308:	003b      	movs	r3, r7
 800030a:	2200      	movs	r2, #0
 800030c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800030e:	003b      	movs	r3, r7
 8000310:	2101      	movs	r1, #1
 8000312:	0018      	movs	r0, r3
 8000314:	f004 fa9e 	bl	8004854 <HAL_RCC_ClockConfig>
 8000318:	1e03      	subs	r3, r0, #0
 800031a:	d001      	beq.n	8000320 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800031c:	f000 f996 	bl	800064c <Error_Handler>
  }
}
 8000320:	46c0      	nop			@ (mov r8, r8)
 8000322:	46bd      	mov	sp, r7
 8000324:	b00d      	add	sp, #52	@ 0x34
 8000326:	bd90      	pop	{r4, r7, pc}
 8000328:	40022000 	.word	0x40022000

0800032c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	0018      	movs	r0, r3
 8000336:	230c      	movs	r3, #12
 8000338:	001a      	movs	r2, r3
 800033a:	2100      	movs	r1, #0
 800033c:	f005 f8fc 	bl	8005538 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000340:	4b44      	ldr	r3, [pc, #272]	@ (8000454 <MX_ADC1_Init+0x128>)
 8000342:	4a45      	ldr	r2, [pc, #276]	@ (8000458 <MX_ADC1_Init+0x12c>)
 8000344:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000346:	4b43      	ldr	r3, [pc, #268]	@ (8000454 <MX_ADC1_Init+0x128>)
 8000348:	2280      	movs	r2, #128	@ 0x80
 800034a:	05d2      	lsls	r2, r2, #23
 800034c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800034e:	4b41      	ldr	r3, [pc, #260]	@ (8000454 <MX_ADC1_Init+0x128>)
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000354:	4b3f      	ldr	r3, [pc, #252]	@ (8000454 <MX_ADC1_Init+0x128>)
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800035a:	4b3e      	ldr	r3, [pc, #248]	@ (8000454 <MX_ADC1_Init+0x128>)
 800035c:	2280      	movs	r2, #128	@ 0x80
 800035e:	0392      	lsls	r2, r2, #14
 8000360:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000362:	4b3c      	ldr	r3, [pc, #240]	@ (8000454 <MX_ADC1_Init+0x128>)
 8000364:	2204      	movs	r2, #4
 8000366:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000368:	4b3a      	ldr	r3, [pc, #232]	@ (8000454 <MX_ADC1_Init+0x128>)
 800036a:	2200      	movs	r2, #0
 800036c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800036e:	4b39      	ldr	r3, [pc, #228]	@ (8000454 <MX_ADC1_Init+0x128>)
 8000370:	2200      	movs	r2, #0
 8000372:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000374:	4b37      	ldr	r3, [pc, #220]	@ (8000454 <MX_ADC1_Init+0x128>)
 8000376:	2201      	movs	r2, #1
 8000378:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 800037a:	4b36      	ldr	r3, [pc, #216]	@ (8000454 <MX_ADC1_Init+0x128>)
 800037c:	2204      	movs	r2, #4
 800037e:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000380:	4b34      	ldr	r3, [pc, #208]	@ (8000454 <MX_ADC1_Init+0x128>)
 8000382:	2200      	movs	r2, #0
 8000384:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000386:	4b33      	ldr	r3, [pc, #204]	@ (8000454 <MX_ADC1_Init+0x128>)
 8000388:	2200      	movs	r2, #0
 800038a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800038c:	4b31      	ldr	r3, [pc, #196]	@ (8000454 <MX_ADC1_Init+0x128>)
 800038e:	222c      	movs	r2, #44	@ 0x2c
 8000390:	2101      	movs	r1, #1
 8000392:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000394:	4b2f      	ldr	r3, [pc, #188]	@ (8000454 <MX_ADC1_Init+0x128>)
 8000396:	2200      	movs	r2, #0
 8000398:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800039a:	4b2e      	ldr	r3, [pc, #184]	@ (8000454 <MX_ADC1_Init+0x128>)
 800039c:	2207      	movs	r2, #7
 800039e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80003a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000454 <MX_ADC1_Init+0x128>)
 80003a2:	2207      	movs	r2, #7
 80003a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80003a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000454 <MX_ADC1_Init+0x128>)
 80003a8:	223c      	movs	r2, #60	@ 0x3c
 80003aa:	2100      	movs	r1, #0
 80003ac:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80003ae:	4b29      	ldr	r3, [pc, #164]	@ (8000454 <MX_ADC1_Init+0x128>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003b4:	4b27      	ldr	r3, [pc, #156]	@ (8000454 <MX_ADC1_Init+0x128>)
 80003b6:	0018      	movs	r0, r3
 80003b8:	f000 fea4 	bl	8001104 <HAL_ADC_Init>
 80003bc:	1e03      	subs	r3, r0, #0
 80003be:	d001      	beq.n	80003c4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80003c0:	f000 f944 	bl	800064c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003c4:	1d3b      	adds	r3, r7, #4
 80003c6:	2201      	movs	r2, #1
 80003c8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	2200      	movs	r2, #0
 80003ce:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003d6:	1d3a      	adds	r2, r7, #4
 80003d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000454 <MX_ADC1_Init+0x128>)
 80003da:	0011      	movs	r1, r2
 80003dc:	0018      	movs	r0, r3
 80003de:	f001 f9a1 	bl	8001724 <HAL_ADC_ConfigChannel>
 80003e2:	1e03      	subs	r3, r0, #0
 80003e4:	d001      	beq.n	80003ea <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80003e6:	f000 f931 	bl	800064c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	4a1b      	ldr	r2, [pc, #108]	@ (800045c <MX_ADC1_Init+0x130>)
 80003ee:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	2204      	movs	r2, #4
 80003f4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003f6:	1d3a      	adds	r2, r7, #4
 80003f8:	4b16      	ldr	r3, [pc, #88]	@ (8000454 <MX_ADC1_Init+0x128>)
 80003fa:	0011      	movs	r1, r2
 80003fc:	0018      	movs	r0, r3
 80003fe:	f001 f991 	bl	8001724 <HAL_ADC_ConfigChannel>
 8000402:	1e03      	subs	r3, r0, #0
 8000404:	d001      	beq.n	800040a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000406:	f000 f921 	bl	800064c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	4a14      	ldr	r2, [pc, #80]	@ (8000460 <MX_ADC1_Init+0x134>)
 800040e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	2208      	movs	r2, #8
 8000414:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000416:	1d3a      	adds	r2, r7, #4
 8000418:	4b0e      	ldr	r3, [pc, #56]	@ (8000454 <MX_ADC1_Init+0x128>)
 800041a:	0011      	movs	r1, r2
 800041c:	0018      	movs	r0, r3
 800041e:	f001 f981 	bl	8001724 <HAL_ADC_ConfigChannel>
 8000422:	1e03      	subs	r3, r0, #0
 8000424:	d001      	beq.n	800042a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000426:	f000 f911 	bl	800064c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	4a0d      	ldr	r2, [pc, #52]	@ (8000464 <MX_ADC1_Init+0x138>)
 800042e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	220c      	movs	r2, #12
 8000434:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000436:	1d3a      	adds	r2, r7, #4
 8000438:	4b06      	ldr	r3, [pc, #24]	@ (8000454 <MX_ADC1_Init+0x128>)
 800043a:	0011      	movs	r1, r2
 800043c:	0018      	movs	r0, r3
 800043e:	f001 f971 	bl	8001724 <HAL_ADC_ConfigChannel>
 8000442:	1e03      	subs	r3, r0, #0
 8000444:	d001      	beq.n	800044a <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8000446:	f000 f901 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	46bd      	mov	sp, r7
 800044e:	b004      	add	sp, #16
 8000450:	bd80      	pop	{r7, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)
 8000454:	20000058 	.word	0x20000058
 8000458:	40012400 	.word	0x40012400
 800045c:	04000002 	.word	0x04000002
 8000460:	10000010 	.word	0x10000010
 8000464:	2c000800 	.word	0x2c000800

08000468 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800046c:	4b1b      	ldr	r3, [pc, #108]	@ (80004dc <MX_I2C1_Init+0x74>)
 800046e:	4a1c      	ldr	r2, [pc, #112]	@ (80004e0 <MX_I2C1_Init+0x78>)
 8000470:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 8000472:	4b1a      	ldr	r3, [pc, #104]	@ (80004dc <MX_I2C1_Init+0x74>)
 8000474:	4a1b      	ldr	r2, [pc, #108]	@ (80004e4 <MX_I2C1_Init+0x7c>)
 8000476:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 160;
 8000478:	4b18      	ldr	r3, [pc, #96]	@ (80004dc <MX_I2C1_Init+0x74>)
 800047a:	22a0      	movs	r2, #160	@ 0xa0
 800047c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800047e:	4b17      	ldr	r3, [pc, #92]	@ (80004dc <MX_I2C1_Init+0x74>)
 8000480:	2201      	movs	r2, #1
 8000482:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000484:	4b15      	ldr	r3, [pc, #84]	@ (80004dc <MX_I2C1_Init+0x74>)
 8000486:	2200      	movs	r2, #0
 8000488:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800048a:	4b14      	ldr	r3, [pc, #80]	@ (80004dc <MX_I2C1_Init+0x74>)
 800048c:	2200      	movs	r2, #0
 800048e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000490:	4b12      	ldr	r3, [pc, #72]	@ (80004dc <MX_I2C1_Init+0x74>)
 8000492:	2200      	movs	r2, #0
 8000494:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000496:	4b11      	ldr	r3, [pc, #68]	@ (80004dc <MX_I2C1_Init+0x74>)
 8000498:	2200      	movs	r2, #0
 800049a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800049c:	4b0f      	ldr	r3, [pc, #60]	@ (80004dc <MX_I2C1_Init+0x74>)
 800049e:	2200      	movs	r2, #0
 80004a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004a2:	4b0e      	ldr	r3, [pc, #56]	@ (80004dc <MX_I2C1_Init+0x74>)
 80004a4:	0018      	movs	r0, r3
 80004a6:	f002 f909 	bl	80026bc <HAL_I2C_Init>
 80004aa:	1e03      	subs	r3, r0, #0
 80004ac:	d001      	beq.n	80004b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004ae:	f000 f8cd 	bl	800064c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004b2:	4b0a      	ldr	r3, [pc, #40]	@ (80004dc <MX_I2C1_Init+0x74>)
 80004b4:	2100      	movs	r1, #0
 80004b6:	0018      	movs	r0, r3
 80004b8:	f003 ff50 	bl	800435c <HAL_I2CEx_ConfigAnalogFilter>
 80004bc:	1e03      	subs	r3, r0, #0
 80004be:	d001      	beq.n	80004c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004c0:	f000 f8c4 	bl	800064c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004c4:	4b05      	ldr	r3, [pc, #20]	@ (80004dc <MX_I2C1_Init+0x74>)
 80004c6:	2100      	movs	r1, #0
 80004c8:	0018      	movs	r0, r3
 80004ca:	f003 ff93 	bl	80043f4 <HAL_I2CEx_ConfigDigitalFilter>
 80004ce:	1e03      	subs	r3, r0, #0
 80004d0:	d001      	beq.n	80004d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004d2:	f000 f8bb 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004d6:	46c0      	nop			@ (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000118 	.word	0x20000118
 80004e0:	40005400 	.word	0x40005400
 80004e4:	10805d88 	.word	0x10805d88

080004e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ee:	4b10      	ldr	r3, [pc, #64]	@ (8000530 <MX_DMA_Init+0x48>)
 80004f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80004f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000530 <MX_DMA_Init+0x48>)
 80004f4:	2101      	movs	r1, #1
 80004f6:	430a      	orrs	r2, r1
 80004f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80004fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000530 <MX_DMA_Init+0x48>)
 80004fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80004fe:	2201      	movs	r2, #1
 8000500:	4013      	ands	r3, r2
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	2100      	movs	r1, #0
 800050a:	2009      	movs	r0, #9
 800050c:	f001 fbac 	bl	8001c68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000510:	2009      	movs	r0, #9
 8000512:	f001 fbbe 	bl	8001c92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000516:	2200      	movs	r2, #0
 8000518:	2100      	movs	r1, #0
 800051a:	200a      	movs	r0, #10
 800051c:	f001 fba4 	bl	8001c68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000520:	200a      	movs	r0, #10
 8000522:	f001 fbb6 	bl	8001c92 <HAL_NVIC_EnableIRQ>

}
 8000526:	46c0      	nop			@ (mov r8, r8)
 8000528:	46bd      	mov	sp, r7
 800052a:	b002      	add	sp, #8
 800052c:	bd80      	pop	{r7, pc}
 800052e:	46c0      	nop			@ (mov r8, r8)
 8000530:	40021000 	.word	0x40021000

08000534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053a:	4b1a      	ldr	r3, [pc, #104]	@ (80005a4 <MX_GPIO_Init+0x70>)
 800053c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800053e:	4b19      	ldr	r3, [pc, #100]	@ (80005a4 <MX_GPIO_Init+0x70>)
 8000540:	2104      	movs	r1, #4
 8000542:	430a      	orrs	r2, r1
 8000544:	635a      	str	r2, [r3, #52]	@ 0x34
 8000546:	4b17      	ldr	r3, [pc, #92]	@ (80005a4 <MX_GPIO_Init+0x70>)
 8000548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800054a:	2204      	movs	r2, #4
 800054c:	4013      	ands	r3, r2
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000552:	4b14      	ldr	r3, [pc, #80]	@ (80005a4 <MX_GPIO_Init+0x70>)
 8000554:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000556:	4b13      	ldr	r3, [pc, #76]	@ (80005a4 <MX_GPIO_Init+0x70>)
 8000558:	2120      	movs	r1, #32
 800055a:	430a      	orrs	r2, r1
 800055c:	635a      	str	r2, [r3, #52]	@ 0x34
 800055e:	4b11      	ldr	r3, [pc, #68]	@ (80005a4 <MX_GPIO_Init+0x70>)
 8000560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000562:	2220      	movs	r2, #32
 8000564:	4013      	ands	r3, r2
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056a:	4b0e      	ldr	r3, [pc, #56]	@ (80005a4 <MX_GPIO_Init+0x70>)
 800056c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800056e:	4b0d      	ldr	r3, [pc, #52]	@ (80005a4 <MX_GPIO_Init+0x70>)
 8000570:	2101      	movs	r1, #1
 8000572:	430a      	orrs	r2, r1
 8000574:	635a      	str	r2, [r3, #52]	@ 0x34
 8000576:	4b0b      	ldr	r3, [pc, #44]	@ (80005a4 <MX_GPIO_Init+0x70>)
 8000578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800057a:	2201      	movs	r2, #1
 800057c:	4013      	ands	r3, r2
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000582:	4b08      	ldr	r3, [pc, #32]	@ (80005a4 <MX_GPIO_Init+0x70>)
 8000584:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000586:	4b07      	ldr	r3, [pc, #28]	@ (80005a4 <MX_GPIO_Init+0x70>)
 8000588:	2102      	movs	r1, #2
 800058a:	430a      	orrs	r2, r1
 800058c:	635a      	str	r2, [r3, #52]	@ 0x34
 800058e:	4b05      	ldr	r3, [pc, #20]	@ (80005a4 <MX_GPIO_Init+0x70>)
 8000590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000592:	2202      	movs	r2, #2
 8000594:	4013      	ands	r3, r2
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800059a:	46c0      	nop			@ (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	b004      	add	sp, #16
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	40021000 	.word	0x40021000

080005a8 <HAL_I2C_AddrCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	0008      	movs	r0, r1
 80005b2:	0011      	movs	r1, r2
 80005b4:	1cfb      	adds	r3, r7, #3
 80005b6:	1c02      	adds	r2, r0, #0
 80005b8:	701a      	strb	r2, [r3, #0]
 80005ba:	003b      	movs	r3, r7
 80005bc:	1c0a      	adds	r2, r1, #0
 80005be:	801a      	strh	r2, [r3, #0]
    if (TransferDirection == I2C_DIRECTION_RECEIVE) // Master reads from slave
 80005c0:	1cfb      	adds	r3, r7, #3
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d106      	bne.n	80005d6 <HAL_I2C_AddrCallback+0x2e>
    {
        HAL_I2C_Slave_Seq_Transmit_IT(hi2c, test_data, 8, I2C_NEXT_FRAME);
 80005c8:	2380      	movs	r3, #128	@ 0x80
 80005ca:	045b      	lsls	r3, r3, #17
 80005cc:	4904      	ldr	r1, [pc, #16]	@ (80005e0 <HAL_I2C_AddrCallback+0x38>)
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	2208      	movs	r2, #8
 80005d2:	f002 fa13 	bl	80029fc <HAL_I2C_Slave_Seq_Transmit_IT>
    }
}
 80005d6:	46c0      	nop			@ (mov r8, r8)
 80005d8:	46bd      	mov	sp, r7
 80005da:	b002      	add	sp, #8
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)
 80005e0:	20000000 	.word	0x20000000

080005e4 <HAL_I2C_SlaveTxCpltCallback>:

// Callback for listen complete
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
    // Re-arm for next master read
    HAL_I2C_Slave_Transmit_DMA(hi2c, test_data, 8);
 80005ec:	4904      	ldr	r1, [pc, #16]	@ (8000600 <HAL_I2C_SlaveTxCpltCallback+0x1c>)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2208      	movs	r2, #8
 80005f2:	0018      	movs	r0, r3
 80005f4:	f002 f908 	bl	8002808 <HAL_I2C_Slave_Transmit_DMA>
}
 80005f8:	46c0      	nop			@ (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b002      	add	sp, #8
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000000 	.word	0x20000000

08000604 <HAL_I2C_ErrorCallback>:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	I2C_Code = HAL_I2C_GetError(hi2c);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	0018      	movs	r0, r3
 8000610:	f002 fb68 	bl	8002ce4 <HAL_I2C_GetError>
 8000614:	0002      	movs	r2, r0
 8000616:	4b04      	ldr	r3, [pc, #16]	@ (8000628 <HAL_I2C_ErrorCallback+0x24>)
 8000618:	601a      	str	r2, [r3, #0]
	I2C_Error = 1;
 800061a:	4b04      	ldr	r3, [pc, #16]	@ (800062c <HAL_I2C_ErrorCallback+0x28>)
 800061c:	2201      	movs	r2, #1
 800061e:	601a      	str	r2, [r3, #0]
}
 8000620:	46c0      	nop			@ (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	b002      	add	sp, #8
 8000626:	bd80      	pop	{r7, pc}
 8000628:	200001d0 	.word	0x200001d0
 800062c:	200001c8 	.word	0x200001c8

08000630 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
    // Toggle LED or breakpoint for debugging
	ADC_Error = 1;
 8000638:	4b03      	ldr	r3, [pc, #12]	@ (8000648 <HAL_ADC_ErrorCallback+0x18>)
 800063a:	2201      	movs	r2, #1
 800063c:	601a      	str	r2, [r3, #0]
}
 800063e:	46c0      	nop			@ (mov r8, r8)
 8000640:	46bd      	mov	sp, r7
 8000642:	b002      	add	sp, #8
 8000644:	bd80      	pop	{r7, pc}
 8000646:	46c0      	nop			@ (mov r8, r8)
 8000648:	200001cc 	.word	0x200001cc

0800064c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000650:	b672      	cpsid	i
}
 8000652:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000654:	46c0      	nop			@ (mov r8, r8)
 8000656:	e7fd      	b.n	8000654 <Error_Handler+0x8>

08000658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800065e:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <HAL_MspInit+0x44>)
 8000660:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000662:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <HAL_MspInit+0x44>)
 8000664:	2101      	movs	r1, #1
 8000666:	430a      	orrs	r2, r1
 8000668:	641a      	str	r2, [r3, #64]	@ 0x40
 800066a:	4b0c      	ldr	r3, [pc, #48]	@ (800069c <HAL_MspInit+0x44>)
 800066c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066e:	2201      	movs	r2, #1
 8000670:	4013      	ands	r3, r2
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000676:	4b09      	ldr	r3, [pc, #36]	@ (800069c <HAL_MspInit+0x44>)
 8000678:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800067a:	4b08      	ldr	r3, [pc, #32]	@ (800069c <HAL_MspInit+0x44>)
 800067c:	2180      	movs	r1, #128	@ 0x80
 800067e:	0549      	lsls	r1, r1, #21
 8000680:	430a      	orrs	r2, r1
 8000682:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000684:	4b05      	ldr	r3, [pc, #20]	@ (800069c <HAL_MspInit+0x44>)
 8000686:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000688:	2380      	movs	r3, #128	@ 0x80
 800068a:	055b      	lsls	r3, r3, #21
 800068c:	4013      	ands	r3, r2
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000692:	46c0      	nop			@ (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	b002      	add	sp, #8
 8000698:	bd80      	pop	{r7, pc}
 800069a:	46c0      	nop			@ (mov r8, r8)
 800069c:	40021000 	.word	0x40021000

080006a0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b091      	sub	sp, #68	@ 0x44
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a8:	232c      	movs	r3, #44	@ 0x2c
 80006aa:	18fb      	adds	r3, r7, r3
 80006ac:	0018      	movs	r0, r3
 80006ae:	2314      	movs	r3, #20
 80006b0:	001a      	movs	r2, r3
 80006b2:	2100      	movs	r1, #0
 80006b4:	f004 ff40 	bl	8005538 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006b8:	2410      	movs	r4, #16
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	0018      	movs	r0, r3
 80006be:	231c      	movs	r3, #28
 80006c0:	001a      	movs	r2, r3
 80006c2:	2100      	movs	r1, #0
 80006c4:	f004 ff38 	bl	8005538 <memset>
  if(hadc->Instance==ADC1)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a39      	ldr	r2, [pc, #228]	@ (80007b4 <HAL_ADC_MspInit+0x114>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d16c      	bne.n	80007ac <HAL_ADC_MspInit+0x10c>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	2220      	movs	r2, #32
 80006d6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	0018      	movs	r0, r3
 80006e2:	f004 fa2d 	bl	8004b40 <HAL_RCCEx_PeriphCLKConfig>
 80006e6:	1e03      	subs	r3, r0, #0
 80006e8:	d001      	beq.n	80006ee <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 80006ea:	f7ff ffaf 	bl	800064c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006ee:	4b32      	ldr	r3, [pc, #200]	@ (80007b8 <HAL_ADC_MspInit+0x118>)
 80006f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006f2:	4b31      	ldr	r3, [pc, #196]	@ (80007b8 <HAL_ADC_MspInit+0x118>)
 80006f4:	2180      	movs	r1, #128	@ 0x80
 80006f6:	0349      	lsls	r1, r1, #13
 80006f8:	430a      	orrs	r2, r1
 80006fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80006fc:	4b2e      	ldr	r3, [pc, #184]	@ (80007b8 <HAL_ADC_MspInit+0x118>)
 80006fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000700:	2380      	movs	r3, #128	@ 0x80
 8000702:	035b      	lsls	r3, r3, #13
 8000704:	4013      	ands	r3, r2
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	4b2b      	ldr	r3, [pc, #172]	@ (80007b8 <HAL_ADC_MspInit+0x118>)
 800070c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800070e:	4b2a      	ldr	r3, [pc, #168]	@ (80007b8 <HAL_ADC_MspInit+0x118>)
 8000710:	2101      	movs	r1, #1
 8000712:	430a      	orrs	r2, r1
 8000714:	635a      	str	r2, [r3, #52]	@ 0x34
 8000716:	4b28      	ldr	r3, [pc, #160]	@ (80007b8 <HAL_ADC_MspInit+0x118>)
 8000718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800071a:	2201      	movs	r2, #1
 800071c:	4013      	ands	r3, r2
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA11 [PA9]     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_11;
 8000722:	212c      	movs	r1, #44	@ 0x2c
 8000724:	187b      	adds	r3, r7, r1
 8000726:	4a25      	ldr	r2, [pc, #148]	@ (80007bc <HAL_ADC_MspInit+0x11c>)
 8000728:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2203      	movs	r2, #3
 800072e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000736:	187a      	adds	r2, r7, r1
 8000738:	23a0      	movs	r3, #160	@ 0xa0
 800073a:	05db      	lsls	r3, r3, #23
 800073c:	0011      	movs	r1, r2
 800073e:	0018      	movs	r0, r3
 8000740:	f001 fe2c 	bl	800239c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8000744:	4b1e      	ldr	r3, [pc, #120]	@ (80007c0 <HAL_ADC_MspInit+0x120>)
 8000746:	4a1f      	ldr	r2, [pc, #124]	@ (80007c4 <HAL_ADC_MspInit+0x124>)
 8000748:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800074a:	4b1d      	ldr	r3, [pc, #116]	@ (80007c0 <HAL_ADC_MspInit+0x120>)
 800074c:	2205      	movs	r2, #5
 800074e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000750:	4b1b      	ldr	r3, [pc, #108]	@ (80007c0 <HAL_ADC_MspInit+0x120>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000756:	4b1a      	ldr	r3, [pc, #104]	@ (80007c0 <HAL_ADC_MspInit+0x120>)
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800075c:	4b18      	ldr	r3, [pc, #96]	@ (80007c0 <HAL_ADC_MspInit+0x120>)
 800075e:	2280      	movs	r2, #128	@ 0x80
 8000760:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000762:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <HAL_ADC_MspInit+0x120>)
 8000764:	2280      	movs	r2, #128	@ 0x80
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800076a:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <HAL_ADC_MspInit+0x120>)
 800076c:	2280      	movs	r2, #128	@ 0x80
 800076e:	00d2      	lsls	r2, r2, #3
 8000770:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000772:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <HAL_ADC_MspInit+0x120>)
 8000774:	2220      	movs	r2, #32
 8000776:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000778:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <HAL_ADC_MspInit+0x120>)
 800077a:	2280      	movs	r2, #128	@ 0x80
 800077c:	0152      	lsls	r2, r2, #5
 800077e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000780:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <HAL_ADC_MspInit+0x120>)
 8000782:	0018      	movs	r0, r3
 8000784:	f001 faa2 	bl	8001ccc <HAL_DMA_Init>
 8000788:	1e03      	subs	r3, r0, #0
 800078a:	d001      	beq.n	8000790 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 800078c:	f7ff ff5e 	bl	800064c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4a0b      	ldr	r2, [pc, #44]	@ (80007c0 <HAL_ADC_MspInit+0x120>)
 8000794:	651a      	str	r2, [r3, #80]	@ 0x50
 8000796:	4b0a      	ldr	r3, [pc, #40]	@ (80007c0 <HAL_ADC_MspInit+0x120>)
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	2100      	movs	r1, #0
 80007a0:	200c      	movs	r0, #12
 80007a2:	f001 fa61 	bl	8001c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80007a6:	200c      	movs	r0, #12
 80007a8:	f001 fa73 	bl	8001c92 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80007ac:	46c0      	nop			@ (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b011      	add	sp, #68	@ 0x44
 80007b2:	bd90      	pop	{r4, r7, pc}
 80007b4:	40012400 	.word	0x40012400
 80007b8:	40021000 	.word	0x40021000
 80007bc:	00000813 	.word	0x00000813
 80007c0:	200000bc 	.word	0x200000bc
 80007c4:	4002001c 	.word	0x4002001c

080007c8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b091      	sub	sp, #68	@ 0x44
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	232c      	movs	r3, #44	@ 0x2c
 80007d2:	18fb      	adds	r3, r7, r3
 80007d4:	0018      	movs	r0, r3
 80007d6:	2314      	movs	r3, #20
 80007d8:	001a      	movs	r2, r3
 80007da:	2100      	movs	r1, #0
 80007dc:	f004 feac 	bl	8005538 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e0:	2410      	movs	r4, #16
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	0018      	movs	r0, r3
 80007e6:	231c      	movs	r3, #28
 80007e8:	001a      	movs	r2, r3
 80007ea:	2100      	movs	r1, #0
 80007ec:	f004 fea4 	bl	8005538 <memset>
  if(hi2c->Instance==I2C1)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a3b      	ldr	r2, [pc, #236]	@ (80008e4 <HAL_I2C_MspInit+0x11c>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d170      	bne.n	80008dc <HAL_I2C_MspInit+0x114>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	2202      	movs	r2, #2
 80007fe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000800:	193b      	adds	r3, r7, r4
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000806:	193b      	adds	r3, r7, r4
 8000808:	0018      	movs	r0, r3
 800080a:	f004 f999 	bl	8004b40 <HAL_RCCEx_PeriphCLKConfig>
 800080e:	1e03      	subs	r3, r0, #0
 8000810:	d001      	beq.n	8000816 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000812:	f7ff ff1b 	bl	800064c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b34      	ldr	r3, [pc, #208]	@ (80008e8 <HAL_I2C_MspInit+0x120>)
 8000818:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800081a:	4b33      	ldr	r3, [pc, #204]	@ (80008e8 <HAL_I2C_MspInit+0x120>)
 800081c:	2102      	movs	r1, #2
 800081e:	430a      	orrs	r2, r1
 8000820:	635a      	str	r2, [r3, #52]	@ 0x34
 8000822:	4b31      	ldr	r3, [pc, #196]	@ (80008e8 <HAL_I2C_MspInit+0x120>)
 8000824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000826:	2202      	movs	r2, #2
 8000828:	4013      	ands	r3, r2
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800082e:	212c      	movs	r1, #44	@ 0x2c
 8000830:	187b      	adds	r3, r7, r1
 8000832:	22c0      	movs	r2, #192	@ 0xc0
 8000834:	0092      	lsls	r2, r2, #2
 8000836:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2212      	movs	r2, #18
 800083c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	187b      	adds	r3, r7, r1
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2206      	movs	r2, #6
 800084e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000850:	187b      	adds	r3, r7, r1
 8000852:	4a26      	ldr	r2, [pc, #152]	@ (80008ec <HAL_I2C_MspInit+0x124>)
 8000854:	0019      	movs	r1, r3
 8000856:	0010      	movs	r0, r2
 8000858:	f001 fda0 	bl	800239c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800085c:	4b22      	ldr	r3, [pc, #136]	@ (80008e8 <HAL_I2C_MspInit+0x120>)
 800085e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000860:	4b21      	ldr	r3, [pc, #132]	@ (80008e8 <HAL_I2C_MspInit+0x120>)
 8000862:	2180      	movs	r1, #128	@ 0x80
 8000864:	0389      	lsls	r1, r1, #14
 8000866:	430a      	orrs	r2, r1
 8000868:	63da      	str	r2, [r3, #60]	@ 0x3c
 800086a:	4b1f      	ldr	r3, [pc, #124]	@ (80008e8 <HAL_I2C_MspInit+0x120>)
 800086c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800086e:	2380      	movs	r3, #128	@ 0x80
 8000870:	039b      	lsls	r3, r3, #14
 8000872:	4013      	ands	r3, r2
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel1;
 8000878:	4b1d      	ldr	r3, [pc, #116]	@ (80008f0 <HAL_I2C_MspInit+0x128>)
 800087a:	4a1e      	ldr	r2, [pc, #120]	@ (80008f4 <HAL_I2C_MspInit+0x12c>)
 800087c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800087e:	4b1c      	ldr	r3, [pc, #112]	@ (80008f0 <HAL_I2C_MspInit+0x128>)
 8000880:	220b      	movs	r2, #11
 8000882:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000884:	4b1a      	ldr	r3, [pc, #104]	@ (80008f0 <HAL_I2C_MspInit+0x128>)
 8000886:	2210      	movs	r2, #16
 8000888:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800088a:	4b19      	ldr	r3, [pc, #100]	@ (80008f0 <HAL_I2C_MspInit+0x128>)
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000890:	4b17      	ldr	r3, [pc, #92]	@ (80008f0 <HAL_I2C_MspInit+0x128>)
 8000892:	2280      	movs	r2, #128	@ 0x80
 8000894:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000896:	4b16      	ldr	r3, [pc, #88]	@ (80008f0 <HAL_I2C_MspInit+0x128>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800089c:	4b14      	ldr	r3, [pc, #80]	@ (80008f0 <HAL_I2C_MspInit+0x128>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80008a2:	4b13      	ldr	r3, [pc, #76]	@ (80008f0 <HAL_I2C_MspInit+0x128>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80008a8:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <HAL_I2C_MspInit+0x128>)
 80008aa:	2280      	movs	r2, #128	@ 0x80
 80008ac:	0192      	lsls	r2, r2, #6
 80008ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80008b0:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <HAL_I2C_MspInit+0x128>)
 80008b2:	0018      	movs	r0, r3
 80008b4:	f001 fa0a 	bl	8001ccc <HAL_DMA_Init>
 80008b8:	1e03      	subs	r3, r0, #0
 80008ba:	d001      	beq.n	80008c0 <HAL_I2C_MspInit+0xf8>
    {
      Error_Handler();
 80008bc:	f7ff fec6 	bl	800064c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4a0b      	ldr	r2, [pc, #44]	@ (80008f0 <HAL_I2C_MspInit+0x128>)
 80008c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80008c6:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <HAL_I2C_MspInit+0x128>)
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2100      	movs	r1, #0
 80008d0:	2017      	movs	r0, #23
 80008d2:	f001 f9c9 	bl	8001c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80008d6:	2017      	movs	r0, #23
 80008d8:	f001 f9db 	bl	8001c92 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80008dc:	46c0      	nop			@ (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	b011      	add	sp, #68	@ 0x44
 80008e2:	bd90      	pop	{r4, r7, pc}
 80008e4:	40005400 	.word	0x40005400
 80008e8:	40021000 	.word	0x40021000
 80008ec:	50000400 	.word	0x50000400
 80008f0:	2000016c 	.word	0x2000016c
 80008f4:	40020008 	.word	0x40020008

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008fc:	46c0      	nop			@ (mov r8, r8)
 80008fe:	e7fd      	b.n	80008fc <NMI_Handler+0x4>

08000900 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000904:	46c0      	nop			@ (mov r8, r8)
 8000906:	e7fd      	b.n	8000904 <HardFault_Handler+0x4>

08000908 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800090c:	46c0      	nop			@ (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000920:	f000 fab8 	bl	8000e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000924:	46c0      	nop			@ (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800092e:	2000      	movs	r0, #0
 8000930:	f000 f964 	bl	8000bfc <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000934:	46c0      	nop			@ (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000940:	4b03      	ldr	r3, [pc, #12]	@ (8000950 <DMA1_Channel1_IRQHandler+0x14>)
 8000942:	0018      	movs	r0, r3
 8000944:	f001 fb4e 	bl	8001fe4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000948:	46c0      	nop			@ (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			@ (mov r8, r8)
 8000950:	2000016c 	.word	0x2000016c

08000954 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000958:	4b03      	ldr	r3, [pc, #12]	@ (8000968 <DMA1_Channel2_3_IRQHandler+0x14>)
 800095a:	0018      	movs	r0, r3
 800095c:	f001 fb42 	bl	8001fe4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000960:	46c0      	nop			@ (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			@ (mov r8, r8)
 8000968:	200000bc 	.word	0x200000bc

0800096c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000970:	4b03      	ldr	r3, [pc, #12]	@ (8000980 <ADC1_IRQHandler+0x14>)
 8000972:	0018      	movs	r0, r3
 8000974:	f000 fd6c 	bl	8001450 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000978:	46c0      	nop			@ (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			@ (mov r8, r8)
 8000980:	20000058 	.word	0x20000058

08000984 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 interrupt (combined with EXTI 23).
  */
void I2C1_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8000988:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <I2C1_IRQHandler+0x2c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	699a      	ldr	r2, [r3, #24]
 800098e:	23e0      	movs	r3, #224	@ 0xe0
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	4013      	ands	r3, r2
 8000994:	d004      	beq.n	80009a0 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000996:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <I2C1_IRQHandler+0x2c>)
 8000998:	0018      	movs	r0, r3
 800099a:	f002 f909 	bl	8002bb0 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800099e:	e003      	b.n	80009a8 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80009a0:	4b03      	ldr	r3, [pc, #12]	@ (80009b0 <I2C1_IRQHandler+0x2c>)
 80009a2:	0018      	movs	r0, r3
 80009a4:	f002 f8ea 	bl	8002b7c <HAL_I2C_EV_IRQHandler>
}
 80009a8:	46c0      	nop			@ (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	46c0      	nop			@ (mov r8, r8)
 80009b0:	20000118 	.word	0x20000118

080009b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009b8:	4b03      	ldr	r3, [pc, #12]	@ (80009c8 <SystemInit+0x14>)
 80009ba:	2280      	movs	r2, #128	@ 0x80
 80009bc:	0512      	lsls	r2, r2, #20
 80009be:	609a      	str	r2, [r3, #8]
#endif
}
 80009c0:	46c0      	nop			@ (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			@ (mov r8, r8)
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009cc:	480d      	ldr	r0, [pc, #52]	@ (8000a04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009d0:	f7ff fff0 	bl	80009b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80009d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80009d6:	e003      	b.n	80009e0 <LoopCopyDataInit>

080009d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000a08 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80009da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009de:	3104      	adds	r1, #4

080009e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009e0:	480a      	ldr	r0, [pc, #40]	@ (8000a0c <LoopForever+0xa>)
  ldr r3, =_edata
 80009e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <LoopForever+0xe>)
  adds r2, r0, r1
 80009e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009e8:	d3f6      	bcc.n	80009d8 <CopyDataInit>
  ldr r2, =_sbss
 80009ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000a14 <LoopForever+0x12>)
  b LoopFillZerobss
 80009ec:	e002      	b.n	80009f4 <LoopFillZerobss>

080009ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  str  r3, [r2]
 80009f0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f2:	3204      	adds	r2, #4

080009f4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80009f4:	4b08      	ldr	r3, [pc, #32]	@ (8000a18 <LoopForever+0x16>)
  cmp r2, r3
 80009f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009f8:	d3f9      	bcc.n	80009ee <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80009fa:	f004 fda5 	bl	8005548 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009fe:	f7ff fc0f 	bl	8000220 <main>

08000a02 <LoopForever>:

LoopForever:
    b LoopForever
 8000a02:	e7fe      	b.n	8000a02 <LoopForever>
  ldr   r0, =_estack
 8000a04:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000a08:	08005630 	.word	0x08005630
  ldr r0, =_sdata
 8000a0c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a10:	2000002c 	.word	0x2000002c
  ldr r2, =_sbss
 8000a14:	2000002c 	.word	0x2000002c
  ldr r3, = _ebss
 8000a18:	20000278 	.word	0x20000278

08000a1c <DMAMUX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a1c:	e7fe      	b.n	8000a1c <DMAMUX1_IRQHandler>
	...

08000a20 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	@ 0x28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	0002      	movs	r2, r0
 8000a28:	1dfb      	adds	r3, r7, #7
 8000a2a:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

#if defined (USE_NUCLEO_64)
  if ((Led != LED1)
 8000a30:	1dfb      	adds	r3, r7, #7
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d007      	beq.n	8000a48 <BSP_LED_Init+0x28>
      && (Led != LED2))
 8000a38:	1dfb      	adds	r3, r7, #7
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d003      	beq.n	8000a48 <BSP_LED_Init+0x28>
#else
  if (Led != LED4)
#endif /* defined (USE_NUCLEO_64) */
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000a40:	2302      	movs	r3, #2
 8000a42:	425b      	negs	r3, r3
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a46:	e04a      	b.n	8000ade <BSP_LED_Init+0xbe>
  }
  else
  {
    /* Enable the GPIO LED Clock */
#if defined (USE_NUCLEO_64)
    if (Led == LED1)
 8000a48:	1dfb      	adds	r3, r7, #7
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d10c      	bne.n	8000a6a <BSP_LED_Init+0x4a>
    {
      LED1_GPIO_CLK_ENABLE();
 8000a50:	4b25      	ldr	r3, [pc, #148]	@ (8000ae8 <BSP_LED_Init+0xc8>)
 8000a52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a54:	4b24      	ldr	r3, [pc, #144]	@ (8000ae8 <BSP_LED_Init+0xc8>)
 8000a56:	2101      	movs	r1, #1
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a5c:	4b22      	ldr	r3, [pc, #136]	@ (8000ae8 <BSP_LED_Init+0xc8>)
 8000a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a60:	2201      	movs	r2, #1
 8000a62:	4013      	ands	r3, r2
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	e00b      	b.n	8000a82 <BSP_LED_Init+0x62>
    }
    else
    {
      LED2_GPIO_CLK_ENABLE();
 8000a6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae8 <BSP_LED_Init+0xc8>)
 8000a6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae8 <BSP_LED_Init+0xc8>)
 8000a70:	2104      	movs	r1, #4
 8000a72:	430a      	orrs	r2, r1
 8000a74:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a76:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae8 <BSP_LED_Init+0xc8>)
 8000a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a7a:	2204      	movs	r2, #4
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
      LED4_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_64) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	781a      	ldrb	r2, [r3, #0]
 8000a86:	4b19      	ldr	r3, [pc, #100]	@ (8000aec <BSP_LED_Init+0xcc>)
 8000a88:	0052      	lsls	r2, r2, #1
 8000a8a:	5ad3      	ldrh	r3, [r2, r3]
 8000a8c:	001a      	movs	r2, r3
 8000a8e:	2110      	movs	r1, #16
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	601a      	str	r2, [r3, #0]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2201      	movs	r2, #1
 8000a98:	605a      	str	r2, [r3, #4]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2203      	movs	r2, #3
 8000aa4:	60da      	str	r2, [r3, #12]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	781a      	ldrb	r2, [r3, #0]
 8000aaa:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <BSP_LED_Init+0xd0>)
 8000aac:	0092      	lsls	r2, r2, #2
 8000aae:	58d3      	ldr	r3, [r2, r3]
 8000ab0:	187a      	adds	r2, r7, r1
 8000ab2:	0011      	movs	r1, r2
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f001 fc71 	bl	800239c <HAL_GPIO_Init>
#if defined (USE_NUCLEO_64)
    if (Led == LED2)
 8000aba:	1dfb      	adds	r3, r7, #7
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d10d      	bne.n	8000ade <BSP_LED_Init+0xbe>
    {
     HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781a      	ldrb	r2, [r3, #0]
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8000af0 <BSP_LED_Init+0xd0>)
 8000ac8:	0092      	lsls	r2, r2, #2
 8000aca:	58d0      	ldr	r0, [r2, r3]
 8000acc:	1dfb      	adds	r3, r7, #7
 8000ace:	781a      	ldrb	r2, [r3, #0]
 8000ad0:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <BSP_LED_Init+0xcc>)
 8000ad2:	0052      	lsls	r2, r2, #1
 8000ad4:	5ad3      	ldrh	r3, [r2, r3]
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	0019      	movs	r1, r3
 8000ada:	f001 fdd1 	bl	8002680 <HAL_GPIO_WritePin>
    }
#endif
  }
  return ret;
 8000ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	b00a      	add	sp, #40	@ 0x28
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	08005608 	.word	0x08005608
 8000af0:	20000010 	.word	0x20000010

08000af4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	0002      	movs	r2, r0
 8000afc:	1dfb      	adds	r3, r7, #7
 8000afe:	701a      	strb	r2, [r3, #0]
 8000b00:	1dbb      	adds	r3, r7, #6
 8000b02:	1c0a      	adds	r2, r1, #0
 8000b04:	701a      	strb	r2, [r3, #0]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000b06:	4b36      	ldr	r3, [pc, #216]	@ (8000be0 <BSP_PB_Init+0xec>)
 8000b08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b0a:	4b35      	ldr	r3, [pc, #212]	@ (8000be0 <BSP_PB_Init+0xec>)
 8000b0c:	2104      	movs	r1, #4
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b12:	4b33      	ldr	r3, [pc, #204]	@ (8000be0 <BSP_PB_Init+0xec>)
 8000b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b16:	2204      	movs	r2, #4
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000b1e:	2380      	movs	r3, #128	@ 0x80
 8000b20:	019b      	lsls	r3, r3, #6
 8000b22:	001a      	movs	r2, r3
 8000b24:	210c      	movs	r1, #12
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	609a      	str	r2, [r3, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	2202      	movs	r2, #2
 8000b34:	60da      	str	r2, [r3, #12]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000b36:	1dbb      	adds	r3, r7, #6
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d10d      	bne.n	8000b5a <BSP_PB_Init+0x66>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000b3e:	187b      	adds	r3, r7, r1
 8000b40:	2200      	movs	r2, #0
 8000b42:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000b44:	1dfb      	adds	r3, r7, #7
 8000b46:	781a      	ldrb	r2, [r3, #0]
 8000b48:	4b26      	ldr	r3, [pc, #152]	@ (8000be4 <BSP_PB_Init+0xf0>)
 8000b4a:	0092      	lsls	r2, r2, #2
 8000b4c:	58d3      	ldr	r3, [r2, r3]
 8000b4e:	187a      	adds	r2, r7, r1
 8000b50:	0011      	movs	r1, r2
 8000b52:	0018      	movs	r0, r3
 8000b54:	f001 fc22 	bl	800239c <HAL_GPIO_Init>
 8000b58:	e03c      	b.n	8000bd4 <BSP_PB_Init+0xe0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8000b5a:	210c      	movs	r1, #12
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	4a22      	ldr	r2, [pc, #136]	@ (8000be8 <BSP_PB_Init+0xf4>)
 8000b60:	605a      	str	r2, [r3, #4]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	781a      	ldrb	r2, [r3, #0]
 8000b66:	4b1f      	ldr	r3, [pc, #124]	@ (8000be4 <BSP_PB_Init+0xf0>)
 8000b68:	0092      	lsls	r2, r2, #2
 8000b6a:	58d3      	ldr	r3, [r2, r3]
 8000b6c:	187a      	adds	r2, r7, r1
 8000b6e:	0011      	movs	r1, r2
 8000b70:	0018      	movs	r0, r3
 8000b72:	f001 fc13 	bl	800239c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	781a      	ldrb	r2, [r3, #0]
 8000b7a:	0013      	movs	r3, r2
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	189b      	adds	r3, r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4a1a      	ldr	r2, [pc, #104]	@ (8000bec <BSP_PB_Init+0xf8>)
 8000b84:	1898      	adds	r0, r3, r2
 8000b86:	1dfb      	adds	r3, r7, #7
 8000b88:	781a      	ldrb	r2, [r3, #0]
 8000b8a:	4b19      	ldr	r3, [pc, #100]	@ (8000bf0 <BSP_PB_Init+0xfc>)
 8000b8c:	0092      	lsls	r2, r2, #2
 8000b8e:	58d3      	ldr	r3, [r2, r3]
 8000b90:	0019      	movs	r1, r3
 8000b92:	f001 fba7 	bl	80022e4 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000b96:	1dfb      	adds	r3, r7, #7
 8000b98:	781a      	ldrb	r2, [r3, #0]
 8000b9a:	0013      	movs	r3, r2
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	189b      	adds	r3, r3, r2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	4a12      	ldr	r2, [pc, #72]	@ (8000bec <BSP_PB_Init+0xf8>)
 8000ba4:	1898      	adds	r0, r3, r2
 8000ba6:	1dfb      	adds	r3, r7, #7
 8000ba8:	781a      	ldrb	r2, [r3, #0]
 8000baa:	4b12      	ldr	r3, [pc, #72]	@ (8000bf4 <BSP_PB_Init+0x100>)
 8000bac:	0092      	lsls	r2, r2, #2
 8000bae:	58d3      	ldr	r3, [r2, r3]
 8000bb0:	001a      	movs	r2, r3
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	f001 fb64 	bl	8002280 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000bb8:	2007      	movs	r0, #7
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	781a      	ldrb	r2, [r3, #0]
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <BSP_PB_Init+0x104>)
 8000bc0:	0092      	lsls	r2, r2, #2
 8000bc2:	58d3      	ldr	r3, [r2, r3]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	0019      	movs	r1, r3
 8000bc8:	f001 f84e 	bl	8001c68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000bcc:	2307      	movs	r3, #7
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f001 f85f 	bl	8001c92 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b008      	add	sp, #32
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	46c0      	nop			@ (mov r8, r8)
 8000be0:	40021000 	.word	0x40021000
 8000be4:	20000018 	.word	0x20000018
 8000be8:	10210000 	.word	0x10210000
 8000bec:	200001d4 	.word	0x200001d4
 8000bf0:	0800560c 	.word	0x0800560c
 8000bf4:	2000001c 	.word	0x2000001c
 8000bf8:	20000020 	.word	0x20000020

08000bfc <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	0002      	movs	r2, r0
 8000c04:	1dfb      	adds	r3, r7, #7
 8000c06:	701a      	strb	r2, [r3, #0]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000c08:	1dfb      	adds	r3, r7, #7
 8000c0a:	781a      	ldrb	r2, [r3, #0]
 8000c0c:	0013      	movs	r3, r2
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	189b      	adds	r3, r3, r2
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	4a04      	ldr	r2, [pc, #16]	@ (8000c28 <BSP_PB_IRQHandler+0x2c>)
 8000c16:	189b      	adds	r3, r3, r2
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f001 fb75 	bl	8002308 <HAL_EXTI_IRQHandler>
}
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b002      	add	sp, #8
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	200001d4 	.word	0x200001d4

08000c2c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	0002      	movs	r2, r0
 8000c34:	1dfb      	adds	r3, r7, #7
 8000c36:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000c38:	46c0      	nop			@ (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b002      	add	sp, #8
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	0002      	movs	r2, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d003      	beq.n	8000c62 <BSP_COM_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	425b      	negs	r3, r3
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	e018      	b.n	8000c94 <BSP_COM_Init+0x54>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000c62:	1dfb      	adds	r3, r7, #7
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2294      	movs	r2, #148	@ 0x94
 8000c68:	435a      	muls	r2, r3
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca0 <BSP_COM_Init+0x60>)
 8000c6c:	18d3      	adds	r3, r2, r3
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f000 f856 	bl	8000d20 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART2_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000c74:	1dfb      	adds	r3, r7, #7
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2294      	movs	r2, #148	@ 0x94
 8000c7a:	435a      	muls	r2, r3
 8000c7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <BSP_COM_Init+0x60>)
 8000c7e:	18d3      	adds	r3, r2, r3
 8000c80:	683a      	ldr	r2, [r7, #0]
 8000c82:	0011      	movs	r1, r2
 8000c84:	0018      	movs	r0, r3
 8000c86:	f000 f80d 	bl	8000ca4 <MX_USART2_Init>
 8000c8a:	1e03      	subs	r3, r0, #0
 8000c8c:	d002      	beq.n	8000c94 <BSP_COM_Init+0x54>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000c8e:	2304      	movs	r3, #4
 8000c90:	425b      	negs	r3, r3
 8000c92:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000c94:	68fb      	ldr	r3, [r7, #12]
}
 8000c96:	0018      	movs	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b004      	add	sp, #16
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	200001e0 	.word	0x200001e0

08000ca4 <MX_USART2_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART2_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8000cae:	4b17      	ldr	r3, [pc, #92]	@ (8000d0c <MX_USART2_Init+0x68>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	220c      	movs	r2, #12
 8000cc2:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	895b      	ldrh	r3, [r3, #10]
 8000cc8:	001a      	movs	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	891b      	ldrh	r3, [r3, #8]
 8000cda:	001a      	movs	r2, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	899b      	ldrh	r3, [r3, #12]
 8000ce4:	001a      	movs	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2280      	movs	r2, #128	@ 0x80
 8000cee:	0212      	lsls	r2, r2, #8
 8000cf0:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f004 f80c 	bl	8004d18 <HAL_UART_Init>
 8000d00:	0003      	movs	r3, r0
}
 8000d02:	0018      	movs	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b002      	add	sp, #8
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	2000000c 	.word	0x2000000c

08000d10 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000d14:	2000      	movs	r0, #0
 8000d16:	f7ff ff89 	bl	8000c2c <BSP_PB_Callback>
}
 8000d1a:	46c0      	nop			@ (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000d20:	b590      	push	{r4, r7, lr}
 8000d22:	b08b      	sub	sp, #44	@ 0x2c
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000d28:	4b28      	ldr	r3, [pc, #160]	@ (8000dcc <COM1_MspInit+0xac>)
 8000d2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d2c:	4b27      	ldr	r3, [pc, #156]	@ (8000dcc <COM1_MspInit+0xac>)
 8000d2e:	2101      	movs	r1, #1
 8000d30:	430a      	orrs	r2, r1
 8000d32:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d34:	4b25      	ldr	r3, [pc, #148]	@ (8000dcc <COM1_MspInit+0xac>)
 8000d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000d40:	4b22      	ldr	r3, [pc, #136]	@ (8000dcc <COM1_MspInit+0xac>)
 8000d42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d44:	4b21      	ldr	r3, [pc, #132]	@ (8000dcc <COM1_MspInit+0xac>)
 8000d46:	2101      	movs	r1, #1
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dcc <COM1_MspInit+0xac>)
 8000d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d50:	2201      	movs	r2, #1
 8000d52:	4013      	ands	r3, r2
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000d58:	4b1c      	ldr	r3, [pc, #112]	@ (8000dcc <COM1_MspInit+0xac>)
 8000d5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dcc <COM1_MspInit+0xac>)
 8000d5e:	2180      	movs	r1, #128	@ 0x80
 8000d60:	0289      	lsls	r1, r1, #10
 8000d62:	430a      	orrs	r2, r1
 8000d64:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d66:	4b19      	ldr	r3, [pc, #100]	@ (8000dcc <COM1_MspInit+0xac>)
 8000d68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d6a:	2380      	movs	r3, #128	@ 0x80
 8000d6c:	029b      	lsls	r3, r3, #10
 8000d6e:	4013      	ands	r3, r2
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000d74:	2414      	movs	r4, #20
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	2204      	movs	r2, #4
 8000d7a:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000d7c:	193b      	adds	r3, r7, r4
 8000d7e:	2202      	movs	r2, #2
 8000d80:	605a      	str	r2, [r3, #4]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000d82:	193b      	adds	r3, r7, r4
 8000d84:	2202      	movs	r2, #2
 8000d86:	60da      	str	r2, [r3, #12]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000d88:	193b      	adds	r3, r7, r4
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	609a      	str	r2, [r3, #8]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000d8e:	193b      	adds	r3, r7, r4
 8000d90:	2201      	movs	r2, #1
 8000d92:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000d94:	193a      	adds	r2, r7, r4
 8000d96:	23a0      	movs	r3, #160	@ 0xa0
 8000d98:	05db      	lsls	r3, r3, #23
 8000d9a:	0011      	movs	r1, r2
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f001 fafd 	bl	800239c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8000da2:	193b      	adds	r3, r7, r4
 8000da4:	2208      	movs	r2, #8
 8000da6:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000da8:	193b      	adds	r3, r7, r4
 8000daa:	2202      	movs	r2, #2
 8000dac:	605a      	str	r2, [r3, #4]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000dae:	193b      	adds	r3, r7, r4
 8000db0:	2201      	movs	r2, #1
 8000db2:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000db4:	193a      	adds	r2, r7, r4
 8000db6:	23a0      	movs	r3, #160	@ 0xa0
 8000db8:	05db      	lsls	r3, r3, #23
 8000dba:	0011      	movs	r1, r2
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f001 faed 	bl	800239c <HAL_GPIO_Init>
}
 8000dc2:	46c0      	nop			@ (mov r8, r8)
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b00b      	add	sp, #44	@ 0x2c
 8000dc8:	bd90      	pop	{r4, r7, pc}
 8000dca:	46c0      	nop			@ (mov r8, r8)
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ddc:	2003      	movs	r0, #3
 8000dde:	f000 f80f 	bl	8000e00 <HAL_InitTick>
 8000de2:	1e03      	subs	r3, r0, #0
 8000de4:	d003      	beq.n	8000dee <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000de6:	1dfb      	adds	r3, r7, #7
 8000de8:	2201      	movs	r2, #1
 8000dea:	701a      	strb	r2, [r3, #0]
 8000dec:	e001      	b.n	8000df2 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dee:	f7ff fc33 	bl	8000658 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000df2:	1dfb      	adds	r3, r7, #7
 8000df4:	781b      	ldrb	r3, [r3, #0]
}
 8000df6:	0018      	movs	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	b002      	add	sp, #8
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e08:	230f      	movs	r3, #15
 8000e0a:	18fb      	adds	r3, r7, r3
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000e10:	4b1d      	ldr	r3, [pc, #116]	@ (8000e88 <HAL_InitTick+0x88>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d02b      	beq.n	8000e70 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000e18:	4b1c      	ldr	r3, [pc, #112]	@ (8000e8c <HAL_InitTick+0x8c>)
 8000e1a:	681c      	ldr	r4, [r3, #0]
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e88 <HAL_InitTick+0x88>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	0019      	movs	r1, r3
 8000e22:	23fa      	movs	r3, #250	@ 0xfa
 8000e24:	0098      	lsls	r0, r3, #2
 8000e26:	f7ff f96f 	bl	8000108 <__udivsi3>
 8000e2a:	0003      	movs	r3, r0
 8000e2c:	0019      	movs	r1, r3
 8000e2e:	0020      	movs	r0, r4
 8000e30:	f7ff f96a 	bl	8000108 <__udivsi3>
 8000e34:	0003      	movs	r3, r0
 8000e36:	0018      	movs	r0, r3
 8000e38:	f000 ff3b 	bl	8001cb2 <HAL_SYSTICK_Config>
 8000e3c:	1e03      	subs	r3, r0, #0
 8000e3e:	d112      	bne.n	8000e66 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	d80a      	bhi.n	8000e5c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	2301      	movs	r3, #1
 8000e4a:	425b      	negs	r3, r3
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f000 ff0a 	bl	8001c68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e54:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <HAL_InitTick+0x90>)
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	e00d      	b.n	8000e78 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e5c:	230f      	movs	r3, #15
 8000e5e:	18fb      	adds	r3, r7, r3
 8000e60:	2201      	movs	r2, #1
 8000e62:	701a      	strb	r2, [r3, #0]
 8000e64:	e008      	b.n	8000e78 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e66:	230f      	movs	r3, #15
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	701a      	strb	r2, [r3, #0]
 8000e6e:	e003      	b.n	8000e78 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e70:	230f      	movs	r3, #15
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	2201      	movs	r2, #1
 8000e76:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e78:	230f      	movs	r3, #15
 8000e7a:	18fb      	adds	r3, r7, r3
 8000e7c:	781b      	ldrb	r3, [r3, #0]
}
 8000e7e:	0018      	movs	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	b005      	add	sp, #20
 8000e84:	bd90      	pop	{r4, r7, pc}
 8000e86:	46c0      	nop			@ (mov r8, r8)
 8000e88:	20000028 	.word	0x20000028
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	20000024 	.word	0x20000024

08000e94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e98:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <HAL_IncTick+0x1c>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	001a      	movs	r2, r3
 8000e9e:	4b05      	ldr	r3, [pc, #20]	@ (8000eb4 <HAL_IncTick+0x20>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	18d2      	adds	r2, r2, r3
 8000ea4:	4b03      	ldr	r3, [pc, #12]	@ (8000eb4 <HAL_IncTick+0x20>)
 8000ea6:	601a      	str	r2, [r3, #0]
}
 8000ea8:	46c0      	nop			@ (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	46c0      	nop			@ (mov r8, r8)
 8000eb0:	20000028 	.word	0x20000028
 8000eb4:	20000274 	.word	0x20000274

08000eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  return uwTick;
 8000ebc:	4b02      	ldr	r3, [pc, #8]	@ (8000ec8 <HAL_GetTick+0x10>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
}
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	20000274 	.word	0x20000274

08000ecc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a05      	ldr	r2, [pc, #20]	@ (8000ef0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000edc:	401a      	ands	r2, r3
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	431a      	orrs	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	601a      	str	r2, [r3, #0]
}
 8000ee6:	46c0      	nop			@ (mov r8, r8)
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b002      	add	sp, #8
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	46c0      	nop			@ (mov r8, r8)
 8000ef0:	ff3fffff 	.word	0xff3fffff

08000ef4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	23c0      	movs	r3, #192	@ 0xc0
 8000f02:	041b      	lsls	r3, r3, #16
 8000f04:	4013      	ands	r3, r2
}
 8000f06:	0018      	movs	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	b002      	add	sp, #8
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b084      	sub	sp, #16
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	60f8      	str	r0, [r7, #12]
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	2104      	movs	r1, #4
 8000f22:	400a      	ands	r2, r1
 8000f24:	2107      	movs	r1, #7
 8000f26:	4091      	lsls	r1, r2
 8000f28:	000a      	movs	r2, r1
 8000f2a:	43d2      	mvns	r2, r2
 8000f2c:	401a      	ands	r2, r3
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	2104      	movs	r1, #4
 8000f32:	400b      	ands	r3, r1
 8000f34:	6879      	ldr	r1, [r7, #4]
 8000f36:	4099      	lsls	r1, r3
 8000f38:	000b      	movs	r3, r1
 8000f3a:	431a      	orrs	r2, r3
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000f40:	46c0      	nop			@ (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	b004      	add	sp, #16
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	683a      	ldr	r2, [r7, #0]
 8000f58:	2104      	movs	r1, #4
 8000f5a:	400a      	ands	r2, r1
 8000f5c:	2107      	movs	r1, #7
 8000f5e:	4091      	lsls	r1, r2
 8000f60:	000a      	movs	r2, r1
 8000f62:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	2104      	movs	r1, #4
 8000f68:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000f6a:	40da      	lsrs	r2, r3
 8000f6c:	0013      	movs	r3, r2
}
 8000f6e:	0018      	movs	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	b002      	add	sp, #8
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68da      	ldr	r2, [r3, #12]
 8000f82:	23c0      	movs	r3, #192	@ 0xc0
 8000f84:	011b      	lsls	r3, r3, #4
 8000f86:	4013      	ands	r3, r2
 8000f88:	d101      	bne.n	8000f8e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e000      	b.n	8000f90 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f8e:	2300      	movs	r3, #0
}
 8000f90:	0018      	movs	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b002      	add	sp, #8
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fa8:	68ba      	ldr	r2, [r7, #8]
 8000faa:	211f      	movs	r1, #31
 8000fac:	400a      	ands	r2, r1
 8000fae:	210f      	movs	r1, #15
 8000fb0:	4091      	lsls	r1, r2
 8000fb2:	000a      	movs	r2, r1
 8000fb4:	43d2      	mvns	r2, r2
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	0e9b      	lsrs	r3, r3, #26
 8000fbc:	210f      	movs	r1, #15
 8000fbe:	4019      	ands	r1, r3
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	201f      	movs	r0, #31
 8000fc4:	4003      	ands	r3, r0
 8000fc6:	4099      	lsls	r1, r3
 8000fc8:	000b      	movs	r3, r1
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000fd0:	46c0      	nop			@ (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b004      	add	sp, #16
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	025b      	lsls	r3, r3, #9
 8000fea:	0a5b      	lsrs	r3, r3, #9
 8000fec:	431a      	orrs	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ff2:	46c0      	nop			@ (mov r8, r8)
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b002      	add	sp, #8
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	0252      	lsls	r2, r2, #9
 800100c:	0a52      	lsrs	r2, r2, #9
 800100e:	43d2      	mvns	r2, r2
 8001010:	401a      	ands	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001016:	46c0      	nop			@ (mov r8, r8)
 8001018:	46bd      	mov	sp, r7
 800101a:	b002      	add	sp, #8
 800101c:	bd80      	pop	{r7, pc}

0800101e <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	2203      	movs	r2, #3
 800102c:	4013      	ands	r3, r2
}
 800102e:	0018      	movs	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	b002      	add	sp, #8
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	68ba      	ldr	r2, [r7, #8]
 800104a:	0212      	lsls	r2, r2, #8
 800104c:	43d2      	mvns	r2, r2
 800104e:	401a      	ands	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	400b      	ands	r3, r1
 8001058:	4904      	ldr	r1, [pc, #16]	@ (800106c <LL_ADC_SetChannelSamplingTime+0x34>)
 800105a:	400b      	ands	r3, r1
 800105c:	431a      	orrs	r2, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001062:	46c0      	nop			@ (mov r8, r8)
 8001064:	46bd      	mov	sp, r7
 8001066:	b004      	add	sp, #16
 8001068:	bd80      	pop	{r7, pc}
 800106a:	46c0      	nop			@ (mov r8, r8)
 800106c:	7fffff00 	.word	0x7fffff00

08001070 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	4a05      	ldr	r2, [pc, #20]	@ (8001094 <LL_ADC_EnableInternalRegulator+0x24>)
 800107e:	4013      	ands	r3, r2
 8001080:	2280      	movs	r2, #128	@ 0x80
 8001082:	0552      	lsls	r2, r2, #21
 8001084:	431a      	orrs	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800108a:	46c0      	nop			@ (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b002      	add	sp, #8
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			@ (mov r8, r8)
 8001094:	6fffffe8 	.word	0x6fffffe8

08001098 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	2380      	movs	r3, #128	@ 0x80
 80010a6:	055b      	lsls	r3, r3, #21
 80010a8:	401a      	ands	r2, r3
 80010aa:	2380      	movs	r3, #128	@ 0x80
 80010ac:	055b      	lsls	r3, r3, #21
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d101      	bne.n	80010b6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80010b2:	2301      	movs	r3, #1
 80010b4:	e000      	b.n	80010b8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	0018      	movs	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b002      	add	sp, #8
 80010be:	bd80      	pop	{r7, pc}

080010c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	2201      	movs	r2, #1
 80010ce:	4013      	ands	r3, r2
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d101      	bne.n	80010d8 <LL_ADC_IsEnabled+0x18>
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <LL_ADC_IsEnabled+0x1a>
 80010d8:	2300      	movs	r3, #0
}
 80010da:	0018      	movs	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	b002      	add	sp, #8
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2204      	movs	r2, #4
 80010f0:	4013      	ands	r3, r2
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	d101      	bne.n	80010fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	0018      	movs	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	b002      	add	sp, #8
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800110c:	231f      	movs	r3, #31
 800110e:	18fb      	adds	r3, r7, r3
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001114:	2300      	movs	r3, #0
 8001116:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e17e      	b.n	8001428 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10a      	bne.n	8001148 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	0018      	movs	r0, r3
 8001136:	f7ff fab3 	bl	80006a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2254      	movs	r2, #84	@ 0x54
 8001144:	2100      	movs	r1, #0
 8001146:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	0018      	movs	r0, r3
 800114e:	f7ff ffa3 	bl	8001098 <LL_ADC_IsInternalRegulatorEnabled>
 8001152:	1e03      	subs	r3, r0, #0
 8001154:	d114      	bne.n	8001180 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	0018      	movs	r0, r3
 800115c:	f7ff ff88 	bl	8001070 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001160:	4bb3      	ldr	r3, [pc, #716]	@ (8001430 <HAL_ADC_Init+0x32c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	49b3      	ldr	r1, [pc, #716]	@ (8001434 <HAL_ADC_Init+0x330>)
 8001166:	0018      	movs	r0, r3
 8001168:	f7fe ffce 	bl	8000108 <__udivsi3>
 800116c:	0003      	movs	r3, r0
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001172:	e002      	b.n	800117a <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	3b01      	subs	r3, #1
 8001178:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1f9      	bne.n	8001174 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	0018      	movs	r0, r3
 8001186:	f7ff ff87 	bl	8001098 <LL_ADC_IsInternalRegulatorEnabled>
 800118a:	1e03      	subs	r3, r0, #0
 800118c:	d10f      	bne.n	80011ae <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001192:	2210      	movs	r2, #16
 8001194:	431a      	orrs	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800119e:	2201      	movs	r2, #1
 80011a0:	431a      	orrs	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80011a6:	231f      	movs	r3, #31
 80011a8:	18fb      	adds	r3, r7, r3
 80011aa:	2201      	movs	r2, #1
 80011ac:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	0018      	movs	r0, r3
 80011b4:	f7ff ff95 	bl	80010e2 <LL_ADC_REG_IsConversionOngoing>
 80011b8:	0003      	movs	r3, r0
 80011ba:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c0:	2210      	movs	r2, #16
 80011c2:	4013      	ands	r3, r2
 80011c4:	d000      	beq.n	80011c8 <HAL_ADC_Init+0xc4>
 80011c6:	e122      	b.n	800140e <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d000      	beq.n	80011d0 <HAL_ADC_Init+0xcc>
 80011ce:	e11e      	b.n	800140e <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d4:	4a98      	ldr	r2, [pc, #608]	@ (8001438 <HAL_ADC_Init+0x334>)
 80011d6:	4013      	ands	r3, r2
 80011d8:	2202      	movs	r2, #2
 80011da:	431a      	orrs	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	0018      	movs	r0, r3
 80011e6:	f7ff ff6b 	bl	80010c0 <LL_ADC_IsEnabled>
 80011ea:	1e03      	subs	r3, r0, #0
 80011ec:	d000      	beq.n	80011f0 <HAL_ADC_Init+0xec>
 80011ee:	e0ad      	b.n	800134c <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	7e1b      	ldrb	r3, [r3, #24]
 80011f8:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80011fa:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	7e5b      	ldrb	r3, [r3, #25]
 8001200:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001202:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	7e9b      	ldrb	r3, [r3, #26]
 8001208:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800120a:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001210:	2b00      	cmp	r3, #0
 8001212:	d002      	beq.n	800121a <HAL_ADC_Init+0x116>
 8001214:	2380      	movs	r3, #128	@ 0x80
 8001216:	015b      	lsls	r3, r3, #5
 8001218:	e000      	b.n	800121c <HAL_ADC_Init+0x118>
 800121a:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800121c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001222:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	2b00      	cmp	r3, #0
 800122a:	da04      	bge.n	8001236 <HAL_ADC_Init+0x132>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	691b      	ldr	r3, [r3, #16]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	085b      	lsrs	r3, r3, #1
 8001234:	e001      	b.n	800123a <HAL_ADC_Init+0x136>
 8001236:	2380      	movs	r3, #128	@ 0x80
 8001238:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 800123a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	212c      	movs	r1, #44	@ 0x2c
 8001240:	5c5b      	ldrb	r3, [r3, r1]
 8001242:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001244:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2220      	movs	r2, #32
 8001250:	5c9b      	ldrb	r3, [r3, r2]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d115      	bne.n	8001282 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	7e9b      	ldrb	r3, [r3, #26]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d105      	bne.n	800126a <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	2280      	movs	r2, #128	@ 0x80
 8001262:	0252      	lsls	r2, r2, #9
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	e00b      	b.n	8001282 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800126e:	2220      	movs	r2, #32
 8001270:	431a      	orrs	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800127a:	2201      	movs	r2, #1
 800127c:	431a      	orrs	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00a      	beq.n	80012a0 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800128e:	23e0      	movs	r3, #224	@ 0xe0
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001298:	4313      	orrs	r3, r2
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	4a65      	ldr	r2, [pc, #404]	@ (800143c <HAL_ADC_Init+0x338>)
 80012a8:	4013      	ands	r3, r2
 80012aa:	0019      	movs	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	430a      	orrs	r2, r1
 80012b4:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	0f9b      	lsrs	r3, r3, #30
 80012bc:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012c2:	4313      	orrs	r3, r2
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	223c      	movs	r2, #60	@ 0x3c
 80012ce:	5c9b      	ldrb	r3, [r3, r2]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d111      	bne.n	80012f8 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	0f9b      	lsrs	r3, r3, #30
 80012da:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012e0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 80012e6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80012ec:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	2201      	movs	r2, #1
 80012f4:	4313      	orrs	r3, r2
 80012f6:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	4a50      	ldr	r2, [pc, #320]	@ (8001440 <HAL_ADC_Init+0x33c>)
 8001300:	4013      	ands	r3, r2
 8001302:	0019      	movs	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	430a      	orrs	r2, r1
 800130c:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	23c0      	movs	r3, #192	@ 0xc0
 8001314:	061b      	lsls	r3, r3, #24
 8001316:	429a      	cmp	r2, r3
 8001318:	d018      	beq.n	800134c <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800131e:	2380      	movs	r3, #128	@ 0x80
 8001320:	05db      	lsls	r3, r3, #23
 8001322:	429a      	cmp	r2, r3
 8001324:	d012      	beq.n	800134c <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800132a:	2380      	movs	r3, #128	@ 0x80
 800132c:	061b      	lsls	r3, r3, #24
 800132e:	429a      	cmp	r2, r3
 8001330:	d00c      	beq.n	800134c <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001332:	4b44      	ldr	r3, [pc, #272]	@ (8001444 <HAL_ADC_Init+0x340>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a44      	ldr	r2, [pc, #272]	@ (8001448 <HAL_ADC_Init+0x344>)
 8001338:	4013      	ands	r3, r2
 800133a:	0019      	movs	r1, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	23f0      	movs	r3, #240	@ 0xf0
 8001342:	039b      	lsls	r3, r3, #14
 8001344:	401a      	ands	r2, r3
 8001346:	4b3f      	ldr	r3, [pc, #252]	@ (8001444 <HAL_ADC_Init+0x340>)
 8001348:	430a      	orrs	r2, r1
 800134a:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6818      	ldr	r0, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001354:	001a      	movs	r2, r3
 8001356:	2100      	movs	r1, #0
 8001358:	f7ff fdd9 	bl	8000f0e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6818      	ldr	r0, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001364:	4939      	ldr	r1, [pc, #228]	@ (800144c <HAL_ADC_Init+0x348>)
 8001366:	001a      	movs	r2, r3
 8001368:	f7ff fdd1 	bl	8000f0e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d109      	bne.n	8001388 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2110      	movs	r1, #16
 8001380:	4249      	negs	r1, r1
 8001382:	430a      	orrs	r2, r1
 8001384:	629a      	str	r2, [r3, #40]	@ 0x28
 8001386:	e018      	b.n	80013ba <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691a      	ldr	r2, [r3, #16]
 800138c:	2380      	movs	r3, #128	@ 0x80
 800138e:	039b      	lsls	r3, r3, #14
 8001390:	429a      	cmp	r2, r3
 8001392:	d112      	bne.n	80013ba <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	3b01      	subs	r3, #1
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	221c      	movs	r2, #28
 80013a4:	4013      	ands	r3, r2
 80013a6:	2210      	movs	r2, #16
 80013a8:	4252      	negs	r2, r2
 80013aa:	409a      	lsls	r2, r3
 80013ac:	0011      	movs	r1, r2
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2100      	movs	r1, #0
 80013c0:	0018      	movs	r0, r3
 80013c2:	f7ff fdc1 	bl	8000f48 <LL_ADC_GetSamplingTimeCommonChannels>
 80013c6:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d10b      	bne.n	80013e8 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013da:	2203      	movs	r2, #3
 80013dc:	4393      	bics	r3, r2
 80013de:	2201      	movs	r2, #1
 80013e0:	431a      	orrs	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013e6:	e01c      	b.n	8001422 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ec:	2212      	movs	r2, #18
 80013ee:	4393      	bics	r3, r2
 80013f0:	2210      	movs	r2, #16
 80013f2:	431a      	orrs	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013fc:	2201      	movs	r2, #1
 80013fe:	431a      	orrs	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001404:	231f      	movs	r3, #31
 8001406:	18fb      	adds	r3, r7, r3
 8001408:	2201      	movs	r2, #1
 800140a:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800140c:	e009      	b.n	8001422 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001412:	2210      	movs	r2, #16
 8001414:	431a      	orrs	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800141a:	231f      	movs	r3, #31
 800141c:	18fb      	adds	r3, r7, r3
 800141e:	2201      	movs	r2, #1
 8001420:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001422:	231f      	movs	r3, #31
 8001424:	18fb      	adds	r3, r7, r3
 8001426:	781b      	ldrb	r3, [r3, #0]
}
 8001428:	0018      	movs	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	b008      	add	sp, #32
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000008 	.word	0x20000008
 8001434:	00030d40 	.word	0x00030d40
 8001438:	fffffefd 	.word	0xfffffefd
 800143c:	ffde0201 	.word	0xffde0201
 8001440:	1ffffc02 	.word	0x1ffffc02
 8001444:	40012708 	.word	0x40012708
 8001448:	ffc3ffff 	.word	0xffc3ffff
 800144c:	7fffff04 	.word	0x7fffff04

08001450 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	2202      	movs	r2, #2
 8001470:	4013      	ands	r3, r2
 8001472:	d017      	beq.n	80014a4 <HAL_ADC_IRQHandler+0x54>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2202      	movs	r2, #2
 8001478:	4013      	ands	r3, r2
 800147a:	d013      	beq.n	80014a4 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001480:	2210      	movs	r2, #16
 8001482:	4013      	ands	r3, r2
 8001484:	d106      	bne.n	8001494 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148a:	2280      	movs	r2, #128	@ 0x80
 800148c:	0112      	lsls	r2, r2, #4
 800148e:	431a      	orrs	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	0018      	movs	r0, r3
 8001498:	f000 fb2a 	bl	8001af0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2202      	movs	r2, #2
 80014a2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	2204      	movs	r2, #4
 80014a8:	4013      	ands	r3, r2
 80014aa:	d003      	beq.n	80014b4 <HAL_ADC_IRQHandler+0x64>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2204      	movs	r2, #4
 80014b0:	4013      	ands	r3, r2
 80014b2:	d107      	bne.n	80014c4 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	2208      	movs	r2, #8
 80014b8:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80014ba:	d04d      	beq.n	8001558 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2208      	movs	r2, #8
 80014c0:	4013      	ands	r3, r2
 80014c2:	d049      	beq.n	8001558 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c8:	2210      	movs	r2, #16
 80014ca:	4013      	ands	r3, r2
 80014cc:	d106      	bne.n	80014dc <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d2:	2280      	movs	r2, #128	@ 0x80
 80014d4:	0092      	lsls	r2, r2, #2
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	0018      	movs	r0, r3
 80014e2:	f7ff fd48 	bl	8000f76 <LL_ADC_REG_IsTriggerSourceSWStart>
 80014e6:	1e03      	subs	r3, r0, #0
 80014e8:	d02e      	beq.n	8001548 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	7e9b      	ldrb	r3, [r3, #26]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d12a      	bne.n	8001548 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2208      	movs	r2, #8
 80014fa:	4013      	ands	r3, r2
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d123      	bne.n	8001548 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	0018      	movs	r0, r3
 8001506:	f7ff fdec 	bl	80010e2 <LL_ADC_REG_IsConversionOngoing>
 800150a:	1e03      	subs	r3, r0, #0
 800150c:	d110      	bne.n	8001530 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	210c      	movs	r1, #12
 800151a:	438a      	bics	r2, r1
 800151c:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001522:	4a6f      	ldr	r2, [pc, #444]	@ (80016e0 <HAL_ADC_IRQHandler+0x290>)
 8001524:	4013      	ands	r3, r2
 8001526:	2201      	movs	r2, #1
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	659a      	str	r2, [r3, #88]	@ 0x58
 800152e:	e00b      	b.n	8001548 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001534:	2220      	movs	r2, #32
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001540:	2201      	movs	r2, #1
 8001542:	431a      	orrs	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	0018      	movs	r0, r3
 800154c:	f000 f8ca 	bl	80016e4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	220c      	movs	r2, #12
 8001556:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	2280      	movs	r2, #128	@ 0x80
 800155c:	4013      	ands	r3, r2
 800155e:	d012      	beq.n	8001586 <HAL_ADC_IRQHandler+0x136>
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2280      	movs	r2, #128	@ 0x80
 8001564:	4013      	ands	r3, r2
 8001566:	d00e      	beq.n	8001586 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156c:	2280      	movs	r2, #128	@ 0x80
 800156e:	0252      	lsls	r2, r2, #9
 8001570:	431a      	orrs	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	0018      	movs	r0, r3
 800157a:	f000 f8bb 	bl	80016f4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2280      	movs	r2, #128	@ 0x80
 8001584:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	2380      	movs	r3, #128	@ 0x80
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	4013      	ands	r3, r2
 800158e:	d014      	beq.n	80015ba <HAL_ADC_IRQHandler+0x16a>
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	2380      	movs	r3, #128	@ 0x80
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4013      	ands	r3, r2
 8001598:	d00f      	beq.n	80015ba <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800159e:	2280      	movs	r2, #128	@ 0x80
 80015a0:	0292      	lsls	r2, r2, #10
 80015a2:	431a      	orrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	0018      	movs	r0, r3
 80015ac:	f000 fa90 	bl	8001ad0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2280      	movs	r2, #128	@ 0x80
 80015b6:	0052      	lsls	r2, r2, #1
 80015b8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	2380      	movs	r3, #128	@ 0x80
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4013      	ands	r3, r2
 80015c2:	d014      	beq.n	80015ee <HAL_ADC_IRQHandler+0x19e>
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	2380      	movs	r3, #128	@ 0x80
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4013      	ands	r3, r2
 80015cc:	d00f      	beq.n	80015ee <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d2:	2280      	movs	r2, #128	@ 0x80
 80015d4:	02d2      	lsls	r2, r2, #11
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	0018      	movs	r0, r3
 80015e0:	f000 fa7e 	bl	8001ae0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2280      	movs	r2, #128	@ 0x80
 80015ea:	0092      	lsls	r2, r2, #2
 80015ec:	601a      	str	r2, [r3, #0]
  }
  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	2210      	movs	r2, #16
 80015f2:	4013      	ands	r3, r2
 80015f4:	d02b      	beq.n	800164e <HAL_ADC_IRQHandler+0x1fe>
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2210      	movs	r2, #16
 80015fa:	4013      	ands	r3, r2
 80015fc:	d027      	beq.n	800164e <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	2b00      	cmp	r3, #0
 8001604:	d102      	bne.n	800160c <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8001606:	2301      	movs	r3, #1
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	e008      	b.n	800161e <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	0018      	movs	r0, r3
 8001612:	f7ff fd04 	bl	800101e <LL_ADC_REG_GetDMATransfer>
 8001616:	1e03      	subs	r3, r0, #0
 8001618:	d001      	beq.n	800161e <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 800161a:	2301      	movs	r3, #1
 800161c:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d110      	bne.n	8001646 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001628:	2280      	movs	r2, #128	@ 0x80
 800162a:	00d2      	lsls	r2, r2, #3
 800162c:	431a      	orrs	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001636:	2202      	movs	r2, #2
 8001638:	431a      	orrs	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	0018      	movs	r0, r3
 8001642:	f7fe fff5 	bl	8000630 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2210      	movs	r2, #16
 800164c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	2201      	movs	r2, #1
 8001652:	4013      	ands	r3, r2
 8001654:	d01a      	beq.n	800168c <HAL_ADC_IRQHandler+0x23c>
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2201      	movs	r2, #1
 800165a:	4013      	ands	r3, r2
 800165c:	d016      	beq.n	800168c <HAL_ADC_IRQHandler+0x23c>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001662:	2210      	movs	r2, #16
 8001664:	4013      	ands	r3, r2
 8001666:	d105      	bne.n	8001674 <HAL_ADC_IRQHandler+0x224>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166c:	2201      	movs	r2, #1
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	659a      	str	r2, [r3, #88]	@ 0x58

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	0018      	movs	r0, r3
 8001678:	f000 f84c 	bl	8001714 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2101      	movs	r1, #1
 8001688:	438a      	bics	r2, r1
 800168a:	605a      	str	r2, [r3, #4]
  }

  /* ========== Check End of Calibration flag ========== */
  if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	2380      	movs	r3, #128	@ 0x80
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	4013      	ands	r3, r2
 8001694:	d00d      	beq.n	80016b2 <HAL_ADC_IRQHandler+0x262>
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	2380      	movs	r3, #128	@ 0x80
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	4013      	ands	r3, r2
 800169e:	d008      	beq.n	80016b2 <HAL_ADC_IRQHandler+0x262>
  {
    /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->CalibrationCpltCallback(hadc);
#else
    HAL_ADC_CalibrationCpltCallback(hadc);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	0018      	movs	r0, r3
 80016a4:	f000 f82e 	bl	8001704 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear end of calibration flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2280      	movs	r2, #128	@ 0x80
 80016ae:	0112      	lsls	r2, r2, #4
 80016b0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	2380      	movs	r3, #128	@ 0x80
 80016b6:	019b      	lsls	r3, r3, #6
 80016b8:	4013      	ands	r3, r2
 80016ba:	d00d      	beq.n	80016d8 <HAL_ADC_IRQHandler+0x288>
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	2380      	movs	r3, #128	@ 0x80
 80016c0:	019b      	lsls	r3, r3, #6
 80016c2:	4013      	ands	r3, r2
 80016c4:	d008      	beq.n	80016d8 <HAL_ADC_IRQHandler+0x288>
  {
    /* Channel configuration ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ChannelConfigReadyCallback(hadc);
#else
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	0018      	movs	r0, r3
 80016ca:	f000 fa19 	bl	8001b00 <HAL_ADCEx_ChannelConfigReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2280      	movs	r2, #128	@ 0x80
 80016d4:	0192      	lsls	r2, r2, #6
 80016d6:	601a      	str	r2, [r3, #0]
  }
}
 80016d8:	46c0      	nop			@ (mov r8, r8)
 80016da:	46bd      	mov	sp, r7
 80016dc:	b006      	add	sp, #24
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	fffffefe 	.word	0xfffffefe

080016e4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80016ec:	46c0      	nop			@ (mov r8, r8)
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b002      	add	sp, #8
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80016fc:	46c0      	nop			@ (mov r8, r8)
 80016fe:	46bd      	mov	sp, r7
 8001700:	b002      	add	sp, #8
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 800170c:	46c0      	nop			@ (mov r8, r8)
 800170e:	46bd      	mov	sp, r7
 8001710:	b002      	add	sp, #8
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 800171c:	46c0      	nop			@ (mov r8, r8)
 800171e:	46bd      	mov	sp, r7
 8001720:	b002      	add	sp, #8
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800172e:	2317      	movs	r3, #23
 8001730:	18fb      	adds	r3, r7, r3
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2254      	movs	r2, #84	@ 0x54
 800173e:	5c9b      	ldrb	r3, [r3, r2]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <HAL_ADC_ConfigChannel+0x24>
 8001744:	2302      	movs	r3, #2
 8001746:	e1be      	b.n	8001ac6 <HAL_ADC_ConfigChannel+0x3a2>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2254      	movs	r2, #84	@ 0x54
 800174c:	2101      	movs	r1, #1
 800174e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	0018      	movs	r0, r3
 8001756:	f7ff fcc4 	bl	80010e2 <LL_ADC_REG_IsConversionOngoing>
 800175a:	1e03      	subs	r3, r0, #0
 800175c:	d000      	beq.n	8001760 <HAL_ADC_ConfigChannel+0x3c>
 800175e:	e1a1      	b.n	8001aa4 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	2b02      	cmp	r3, #2
 8001766:	d100      	bne.n	800176a <HAL_ADC_ConfigChannel+0x46>
 8001768:	e152      	b.n	8001a10 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691a      	ldr	r2, [r3, #16]
 800176e:	2380      	movs	r3, #128	@ 0x80
 8001770:	061b      	lsls	r3, r3, #24
 8001772:	429a      	cmp	r2, r3
 8001774:	d004      	beq.n	8001780 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800177a:	4ac2      	ldr	r2, [pc, #776]	@ (8001a84 <HAL_ADC_ConfigChannel+0x360>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d108      	bne.n	8001792 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	0019      	movs	r1, r3
 800178a:	0010      	movs	r0, r2
 800178c:	f7ff fc24 	bl	8000fd8 <LL_ADC_REG_SetSequencerChAdd>
 8001790:	e0ed      	b.n	800196e <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	211f      	movs	r1, #31
 800179c:	400b      	ands	r3, r1
 800179e:	210f      	movs	r1, #15
 80017a0:	4099      	lsls	r1, r3
 80017a2:	000b      	movs	r3, r1
 80017a4:	43db      	mvns	r3, r3
 80017a6:	4013      	ands	r3, r2
 80017a8:	0019      	movs	r1, r3
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	025b      	lsls	r3, r3, #9
 80017b0:	0a5b      	lsrs	r3, r3, #9
 80017b2:	d105      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x9c>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	0e9b      	lsrs	r3, r3, #26
 80017ba:	221f      	movs	r2, #31
 80017bc:	4013      	ands	r3, r2
 80017be:	e0bc      	b.n	800193a <HAL_ADC_ConfigChannel+0x216>
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2201      	movs	r2, #1
 80017c6:	4013      	ands	r3, r2
 80017c8:	d000      	beq.n	80017cc <HAL_ADC_ConfigChannel+0xa8>
 80017ca:	e0b5      	b.n	8001938 <HAL_ADC_ConfigChannel+0x214>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2202      	movs	r2, #2
 80017d2:	4013      	ands	r3, r2
 80017d4:	d000      	beq.n	80017d8 <HAL_ADC_ConfigChannel+0xb4>
 80017d6:	e0ad      	b.n	8001934 <HAL_ADC_ConfigChannel+0x210>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2204      	movs	r2, #4
 80017de:	4013      	ands	r3, r2
 80017e0:	d000      	beq.n	80017e4 <HAL_ADC_ConfigChannel+0xc0>
 80017e2:	e0a5      	b.n	8001930 <HAL_ADC_ConfigChannel+0x20c>
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2208      	movs	r2, #8
 80017ea:	4013      	ands	r3, r2
 80017ec:	d000      	beq.n	80017f0 <HAL_ADC_ConfigChannel+0xcc>
 80017ee:	e09d      	b.n	800192c <HAL_ADC_ConfigChannel+0x208>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2210      	movs	r2, #16
 80017f6:	4013      	ands	r3, r2
 80017f8:	d000      	beq.n	80017fc <HAL_ADC_ConfigChannel+0xd8>
 80017fa:	e095      	b.n	8001928 <HAL_ADC_ConfigChannel+0x204>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2220      	movs	r2, #32
 8001802:	4013      	ands	r3, r2
 8001804:	d000      	beq.n	8001808 <HAL_ADC_ConfigChannel+0xe4>
 8001806:	e08d      	b.n	8001924 <HAL_ADC_ConfigChannel+0x200>
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2240      	movs	r2, #64	@ 0x40
 800180e:	4013      	ands	r3, r2
 8001810:	d000      	beq.n	8001814 <HAL_ADC_ConfigChannel+0xf0>
 8001812:	e085      	b.n	8001920 <HAL_ADC_ConfigChannel+0x1fc>
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2280      	movs	r2, #128	@ 0x80
 800181a:	4013      	ands	r3, r2
 800181c:	d000      	beq.n	8001820 <HAL_ADC_ConfigChannel+0xfc>
 800181e:	e07d      	b.n	800191c <HAL_ADC_ConfigChannel+0x1f8>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	2380      	movs	r3, #128	@ 0x80
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4013      	ands	r3, r2
 800182a:	d000      	beq.n	800182e <HAL_ADC_ConfigChannel+0x10a>
 800182c:	e074      	b.n	8001918 <HAL_ADC_ConfigChannel+0x1f4>
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	2380      	movs	r3, #128	@ 0x80
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4013      	ands	r3, r2
 8001838:	d000      	beq.n	800183c <HAL_ADC_ConfigChannel+0x118>
 800183a:	e06b      	b.n	8001914 <HAL_ADC_ConfigChannel+0x1f0>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	2380      	movs	r3, #128	@ 0x80
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	4013      	ands	r3, r2
 8001846:	d000      	beq.n	800184a <HAL_ADC_ConfigChannel+0x126>
 8001848:	e062      	b.n	8001910 <HAL_ADC_ConfigChannel+0x1ec>
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	2380      	movs	r3, #128	@ 0x80
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	4013      	ands	r3, r2
 8001854:	d000      	beq.n	8001858 <HAL_ADC_ConfigChannel+0x134>
 8001856:	e059      	b.n	800190c <HAL_ADC_ConfigChannel+0x1e8>
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	2380      	movs	r3, #128	@ 0x80
 800185e:	015b      	lsls	r3, r3, #5
 8001860:	4013      	ands	r3, r2
 8001862:	d151      	bne.n	8001908 <HAL_ADC_ConfigChannel+0x1e4>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	2380      	movs	r3, #128	@ 0x80
 800186a:	019b      	lsls	r3, r3, #6
 800186c:	4013      	ands	r3, r2
 800186e:	d149      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x1e0>
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	2380      	movs	r3, #128	@ 0x80
 8001876:	01db      	lsls	r3, r3, #7
 8001878:	4013      	ands	r3, r2
 800187a:	d141      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x1dc>
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	2380      	movs	r3, #128	@ 0x80
 8001882:	021b      	lsls	r3, r3, #8
 8001884:	4013      	ands	r3, r2
 8001886:	d139      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x1d8>
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	2380      	movs	r3, #128	@ 0x80
 800188e:	025b      	lsls	r3, r3, #9
 8001890:	4013      	ands	r3, r2
 8001892:	d131      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x1d4>
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	2380      	movs	r3, #128	@ 0x80
 800189a:	029b      	lsls	r3, r3, #10
 800189c:	4013      	ands	r3, r2
 800189e:	d129      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x1d0>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	2380      	movs	r3, #128	@ 0x80
 80018a6:	02db      	lsls	r3, r3, #11
 80018a8:	4013      	ands	r3, r2
 80018aa:	d121      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x1cc>
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	2380      	movs	r3, #128	@ 0x80
 80018b2:	031b      	lsls	r3, r3, #12
 80018b4:	4013      	ands	r3, r2
 80018b6:	d119      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x1c8>
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	2380      	movs	r3, #128	@ 0x80
 80018be:	035b      	lsls	r3, r3, #13
 80018c0:	4013      	ands	r3, r2
 80018c2:	d111      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x1c4>
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	2380      	movs	r3, #128	@ 0x80
 80018ca:	039b      	lsls	r3, r3, #14
 80018cc:	4013      	ands	r3, r2
 80018ce:	d109      	bne.n	80018e4 <HAL_ADC_ConfigChannel+0x1c0>
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	2380      	movs	r3, #128	@ 0x80
 80018d6:	03db      	lsls	r3, r3, #15
 80018d8:	4013      	ands	r3, r2
 80018da:	d001      	beq.n	80018e0 <HAL_ADC_ConfigChannel+0x1bc>
 80018dc:	2316      	movs	r3, #22
 80018de:	e02c      	b.n	800193a <HAL_ADC_ConfigChannel+0x216>
 80018e0:	2300      	movs	r3, #0
 80018e2:	e02a      	b.n	800193a <HAL_ADC_ConfigChannel+0x216>
 80018e4:	2315      	movs	r3, #21
 80018e6:	e028      	b.n	800193a <HAL_ADC_ConfigChannel+0x216>
 80018e8:	2314      	movs	r3, #20
 80018ea:	e026      	b.n	800193a <HAL_ADC_ConfigChannel+0x216>
 80018ec:	2313      	movs	r3, #19
 80018ee:	e024      	b.n	800193a <HAL_ADC_ConfigChannel+0x216>
 80018f0:	2312      	movs	r3, #18
 80018f2:	e022      	b.n	800193a <HAL_ADC_ConfigChannel+0x216>
 80018f4:	2311      	movs	r3, #17
 80018f6:	e020      	b.n	800193a <HAL_ADC_ConfigChannel+0x216>
 80018f8:	2310      	movs	r3, #16
 80018fa:	e01e      	b.n	800193a <HAL_ADC_ConfigChannel+0x216>
 80018fc:	230f      	movs	r3, #15
 80018fe:	e01c      	b.n	800193a <HAL_ADC_ConfigChannel+0x216>
 8001900:	230e      	movs	r3, #14
 8001902:	e01a      	b.n	800193a <HAL_ADC_ConfigChannel+0x216>
 8001904:	230d      	movs	r3, #13
 8001906:	e018      	b.n	800193a <HAL_ADC_ConfigChannel+0x216>
 8001908:	230c      	movs	r3, #12
 800190a:	e016      	b.n	800193a <HAL_ADC_ConfigChannel+0x216>
 800190c:	230b      	movs	r3, #11
 800190e:	e014      	b.n	800193a <HAL_ADC_ConfigChannel+0x216>
 8001910:	230a      	movs	r3, #10
 8001912:	e012      	b.n	800193a <HAL_ADC_ConfigChannel+0x216>
 8001914:	2309      	movs	r3, #9
 8001916:	e010      	b.n	800193a <HAL_ADC_ConfigChannel+0x216>
 8001918:	2308      	movs	r3, #8
 800191a:	e00e      	b.n	800193a <HAL_ADC_ConfigChannel+0x216>
 800191c:	2307      	movs	r3, #7
 800191e:	e00c      	b.n	800193a <HAL_ADC_ConfigChannel+0x216>
 8001920:	2306      	movs	r3, #6
 8001922:	e00a      	b.n	800193a <HAL_ADC_ConfigChannel+0x216>
 8001924:	2305      	movs	r3, #5
 8001926:	e008      	b.n	800193a <HAL_ADC_ConfigChannel+0x216>
 8001928:	2304      	movs	r3, #4
 800192a:	e006      	b.n	800193a <HAL_ADC_ConfigChannel+0x216>
 800192c:	2303      	movs	r3, #3
 800192e:	e004      	b.n	800193a <HAL_ADC_ConfigChannel+0x216>
 8001930:	2302      	movs	r3, #2
 8001932:	e002      	b.n	800193a <HAL_ADC_ConfigChannel+0x216>
 8001934:	2301      	movs	r3, #1
 8001936:	e000      	b.n	800193a <HAL_ADC_ConfigChannel+0x216>
 8001938:	2300      	movs	r3, #0
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	6852      	ldr	r2, [r2, #4]
 800193e:	201f      	movs	r0, #31
 8001940:	4002      	ands	r2, r0
 8001942:	4093      	lsls	r3, r2
 8001944:	000a      	movs	r2, r1
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	089b      	lsrs	r3, r3, #2
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	429a      	cmp	r2, r3
 800195a:	d808      	bhi.n	800196e <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	6859      	ldr	r1, [r3, #4]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	001a      	movs	r2, r3
 800196a:	f7ff fb15 	bl	8000f98 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6818      	ldr	r0, [r3, #0]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	6819      	ldr	r1, [r3, #0]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	001a      	movs	r2, r3
 800197c:	f7ff fb5c 	bl	8001038 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	db00      	blt.n	800198a <HAL_ADC_ConfigChannel+0x266>
 8001988:	e096      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800198a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a88 <HAL_ADC_ConfigChannel+0x364>)
 800198c:	0018      	movs	r0, r3
 800198e:	f7ff fab1 	bl	8000ef4 <LL_ADC_GetCommonPathInternalCh>
 8001992:	0003      	movs	r3, r0
 8001994:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a3c      	ldr	r2, [pc, #240]	@ (8001a8c <HAL_ADC_ConfigChannel+0x368>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d123      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	2380      	movs	r3, #128	@ 0x80
 80019a4:	041b      	lsls	r3, r3, #16
 80019a6:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019a8:	d11e      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	2280      	movs	r2, #128	@ 0x80
 80019ae:	0412      	lsls	r2, r2, #16
 80019b0:	4313      	orrs	r3, r2
 80019b2:	4a35      	ldr	r2, [pc, #212]	@ (8001a88 <HAL_ADC_ConfigChannel+0x364>)
 80019b4:	0019      	movs	r1, r3
 80019b6:	0010      	movs	r0, r2
 80019b8:	f7ff fa88 	bl	8000ecc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80019bc:	4b34      	ldr	r3, [pc, #208]	@ (8001a90 <HAL_ADC_ConfigChannel+0x36c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4934      	ldr	r1, [pc, #208]	@ (8001a94 <HAL_ADC_ConfigChannel+0x370>)
 80019c2:	0018      	movs	r0, r3
 80019c4:	f7fe fba0 	bl	8000108 <__udivsi3>
 80019c8:	0003      	movs	r3, r0
 80019ca:	001a      	movs	r2, r3
 80019cc:	0013      	movs	r3, r2
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	189b      	adds	r3, r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	3301      	adds	r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80019d8:	e002      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	3b01      	subs	r3, #1
 80019de:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f9      	bne.n	80019da <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019e6:	e067      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a2a      	ldr	r2, [pc, #168]	@ (8001a98 <HAL_ADC_ConfigChannel+0x374>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d162      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	2380      	movs	r3, #128	@ 0x80
 80019f6:	03db      	lsls	r3, r3, #15
 80019f8:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80019fa:	d15d      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	2280      	movs	r2, #128	@ 0x80
 8001a00:	03d2      	lsls	r2, r2, #15
 8001a02:	4313      	orrs	r3, r2
 8001a04:	4a20      	ldr	r2, [pc, #128]	@ (8001a88 <HAL_ADC_ConfigChannel+0x364>)
 8001a06:	0019      	movs	r1, r3
 8001a08:	0010      	movs	r0, r2
 8001a0a:	f7ff fa5f 	bl	8000ecc <LL_ADC_SetCommonPathInternalCh>
 8001a0e:	e053      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691a      	ldr	r2, [r3, #16]
 8001a14:	2380      	movs	r3, #128	@ 0x80
 8001a16:	061b      	lsls	r3, r3, #24
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d004      	beq.n	8001a26 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a20:	4a18      	ldr	r2, [pc, #96]	@ (8001a84 <HAL_ADC_ConfigChannel+0x360>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d107      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	0019      	movs	r1, r3
 8001a30:	0010      	movs	r0, r2
 8001a32:	f7ff fae2 	bl	8000ffa <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	da3c      	bge.n	8001ab8 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a3e:	4b12      	ldr	r3, [pc, #72]	@ (8001a88 <HAL_ADC_ConfigChannel+0x364>)
 8001a40:	0018      	movs	r0, r3
 8001a42:	f7ff fa57 	bl	8000ef4 <LL_ADC_GetCommonPathInternalCh>
 8001a46:	0003      	movs	r3, r0
 8001a48:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a0f      	ldr	r2, [pc, #60]	@ (8001a8c <HAL_ADC_ConfigChannel+0x368>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d108      	bne.n	8001a66 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	4a11      	ldr	r2, [pc, #68]	@ (8001a9c <HAL_ADC_ConfigChannel+0x378>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a88 <HAL_ADC_ConfigChannel+0x364>)
 8001a5c:	0019      	movs	r1, r3
 8001a5e:	0010      	movs	r0, r2
 8001a60:	f7ff fa34 	bl	8000ecc <LL_ADC_SetCommonPathInternalCh>
 8001a64:	e028      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a0b      	ldr	r2, [pc, #44]	@ (8001a98 <HAL_ADC_ConfigChannel+0x374>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d123      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	4a0b      	ldr	r2, [pc, #44]	@ (8001aa0 <HAL_ADC_ConfigChannel+0x37c>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	4a04      	ldr	r2, [pc, #16]	@ (8001a88 <HAL_ADC_ConfigChannel+0x364>)
 8001a78:	0019      	movs	r1, r3
 8001a7a:	0010      	movs	r0, r2
 8001a7c:	f7ff fa26 	bl	8000ecc <LL_ADC_SetCommonPathInternalCh>
 8001a80:	e01a      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x394>
 8001a82:	46c0      	nop			@ (mov r8, r8)
 8001a84:	80000004 	.word	0x80000004
 8001a88:	40012708 	.word	0x40012708
 8001a8c:	a4000200 	.word	0xa4000200
 8001a90:	20000008 	.word	0x20000008
 8001a94:	00030d40 	.word	0x00030d40
 8001a98:	a8000400 	.word	0xa8000400
 8001a9c:	ff7fffff 	.word	0xff7fffff
 8001aa0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa8:	2220      	movs	r2, #32
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001ab0:	2317      	movs	r3, #23
 8001ab2:	18fb      	adds	r3, r7, r3
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2254      	movs	r2, #84	@ 0x54
 8001abc:	2100      	movs	r1, #0
 8001abe:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001ac0:	2317      	movs	r3, #23
 8001ac2:	18fb      	adds	r3, r7, r3
 8001ac4:	781b      	ldrb	r3, [r3, #0]
}
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	b006      	add	sp, #24
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	46c0      	nop			@ (mov r8, r8)

08001ad0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001ad8:	46c0      	nop			@ (mov r8, r8)
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b002      	add	sp, #8
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001ae8:	46c0      	nop			@ (mov r8, r8)
 8001aea:	46bd      	mov	sp, r7
 8001aec:	b002      	add	sp, #8
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001af8:	46c0      	nop			@ (mov r8, r8)
 8001afa:	46bd      	mov	sp, r7
 8001afc:	b002      	add	sp, #8
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8001b08:	46c0      	nop			@ (mov r8, r8)
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	b002      	add	sp, #8
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	0002      	movs	r2, r0
 8001b18:	1dfb      	adds	r3, r7, #7
 8001b1a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b1c:	1dfb      	adds	r3, r7, #7
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b22:	d809      	bhi.n	8001b38 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b24:	1dfb      	adds	r3, r7, #7
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	001a      	movs	r2, r3
 8001b2a:	231f      	movs	r3, #31
 8001b2c:	401a      	ands	r2, r3
 8001b2e:	4b04      	ldr	r3, [pc, #16]	@ (8001b40 <__NVIC_EnableIRQ+0x30>)
 8001b30:	2101      	movs	r1, #1
 8001b32:	4091      	lsls	r1, r2
 8001b34:	000a      	movs	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001b38:	46c0      	nop			@ (mov r8, r8)
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	b002      	add	sp, #8
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	e000e100 	.word	0xe000e100

08001b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b44:	b590      	push	{r4, r7, lr}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	6039      	str	r1, [r7, #0]
 8001b4e:	1dfb      	adds	r3, r7, #7
 8001b50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b52:	1dfb      	adds	r3, r7, #7
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b58:	d828      	bhi.n	8001bac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b5a:	4a2f      	ldr	r2, [pc, #188]	@ (8001c18 <__NVIC_SetPriority+0xd4>)
 8001b5c:	1dfb      	adds	r3, r7, #7
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	b25b      	sxtb	r3, r3
 8001b62:	089b      	lsrs	r3, r3, #2
 8001b64:	33c0      	adds	r3, #192	@ 0xc0
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	589b      	ldr	r3, [r3, r2]
 8001b6a:	1dfa      	adds	r2, r7, #7
 8001b6c:	7812      	ldrb	r2, [r2, #0]
 8001b6e:	0011      	movs	r1, r2
 8001b70:	2203      	movs	r2, #3
 8001b72:	400a      	ands	r2, r1
 8001b74:	00d2      	lsls	r2, r2, #3
 8001b76:	21ff      	movs	r1, #255	@ 0xff
 8001b78:	4091      	lsls	r1, r2
 8001b7a:	000a      	movs	r2, r1
 8001b7c:	43d2      	mvns	r2, r2
 8001b7e:	401a      	ands	r2, r3
 8001b80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	019b      	lsls	r3, r3, #6
 8001b86:	22ff      	movs	r2, #255	@ 0xff
 8001b88:	401a      	ands	r2, r3
 8001b8a:	1dfb      	adds	r3, r7, #7
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	0018      	movs	r0, r3
 8001b90:	2303      	movs	r3, #3
 8001b92:	4003      	ands	r3, r0
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b98:	481f      	ldr	r0, [pc, #124]	@ (8001c18 <__NVIC_SetPriority+0xd4>)
 8001b9a:	1dfb      	adds	r3, r7, #7
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	b25b      	sxtb	r3, r3
 8001ba0:	089b      	lsrs	r3, r3, #2
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	33c0      	adds	r3, #192	@ 0xc0
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001baa:	e031      	b.n	8001c10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bac:	4a1b      	ldr	r2, [pc, #108]	@ (8001c1c <__NVIC_SetPriority+0xd8>)
 8001bae:	1dfb      	adds	r3, r7, #7
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	0019      	movs	r1, r3
 8001bb4:	230f      	movs	r3, #15
 8001bb6:	400b      	ands	r3, r1
 8001bb8:	3b08      	subs	r3, #8
 8001bba:	089b      	lsrs	r3, r3, #2
 8001bbc:	3306      	adds	r3, #6
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	18d3      	adds	r3, r2, r3
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	1dfa      	adds	r2, r7, #7
 8001bc8:	7812      	ldrb	r2, [r2, #0]
 8001bca:	0011      	movs	r1, r2
 8001bcc:	2203      	movs	r2, #3
 8001bce:	400a      	ands	r2, r1
 8001bd0:	00d2      	lsls	r2, r2, #3
 8001bd2:	21ff      	movs	r1, #255	@ 0xff
 8001bd4:	4091      	lsls	r1, r2
 8001bd6:	000a      	movs	r2, r1
 8001bd8:	43d2      	mvns	r2, r2
 8001bda:	401a      	ands	r2, r3
 8001bdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	019b      	lsls	r3, r3, #6
 8001be2:	22ff      	movs	r2, #255	@ 0xff
 8001be4:	401a      	ands	r2, r3
 8001be6:	1dfb      	adds	r3, r7, #7
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	0018      	movs	r0, r3
 8001bec:	2303      	movs	r3, #3
 8001bee:	4003      	ands	r3, r0
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bf4:	4809      	ldr	r0, [pc, #36]	@ (8001c1c <__NVIC_SetPriority+0xd8>)
 8001bf6:	1dfb      	adds	r3, r7, #7
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	001c      	movs	r4, r3
 8001bfc:	230f      	movs	r3, #15
 8001bfe:	4023      	ands	r3, r4
 8001c00:	3b08      	subs	r3, #8
 8001c02:	089b      	lsrs	r3, r3, #2
 8001c04:	430a      	orrs	r2, r1
 8001c06:	3306      	adds	r3, #6
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	18c3      	adds	r3, r0, r3
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	601a      	str	r2, [r3, #0]
}
 8001c10:	46c0      	nop			@ (mov r8, r8)
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b003      	add	sp, #12
 8001c16:	bd90      	pop	{r4, r7, pc}
 8001c18:	e000e100 	.word	0xe000e100
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	1e5a      	subs	r2, r3, #1
 8001c2c:	2380      	movs	r3, #128	@ 0x80
 8001c2e:	045b      	lsls	r3, r3, #17
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d301      	bcc.n	8001c38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c34:	2301      	movs	r3, #1
 8001c36:	e010      	b.n	8001c5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c38:	4b0a      	ldr	r3, [pc, #40]	@ (8001c64 <SysTick_Config+0x44>)
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	3a01      	subs	r2, #1
 8001c3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c40:	2301      	movs	r3, #1
 8001c42:	425b      	negs	r3, r3
 8001c44:	2103      	movs	r1, #3
 8001c46:	0018      	movs	r0, r3
 8001c48:	f7ff ff7c 	bl	8001b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c4c:	4b05      	ldr	r3, [pc, #20]	@ (8001c64 <SysTick_Config+0x44>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c52:	4b04      	ldr	r3, [pc, #16]	@ (8001c64 <SysTick_Config+0x44>)
 8001c54:	2207      	movs	r2, #7
 8001c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	b002      	add	sp, #8
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	46c0      	nop			@ (mov r8, r8)
 8001c64:	e000e010 	.word	0xe000e010

08001c68 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60b9      	str	r1, [r7, #8]
 8001c70:	607a      	str	r2, [r7, #4]
 8001c72:	210f      	movs	r1, #15
 8001c74:	187b      	adds	r3, r7, r1
 8001c76:	1c02      	adds	r2, r0, #0
 8001c78:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	187b      	adds	r3, r7, r1
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	b25b      	sxtb	r3, r3
 8001c82:	0011      	movs	r1, r2
 8001c84:	0018      	movs	r0, r3
 8001c86:	f7ff ff5d 	bl	8001b44 <__NVIC_SetPriority>
}
 8001c8a:	46c0      	nop			@ (mov r8, r8)
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	b004      	add	sp, #16
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	0002      	movs	r2, r0
 8001c9a:	1dfb      	adds	r3, r7, #7
 8001c9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c9e:	1dfb      	adds	r3, r7, #7
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	b25b      	sxtb	r3, r3
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f7ff ff33 	bl	8001b10 <__NVIC_EnableIRQ>
}
 8001caa:	46c0      	nop			@ (mov r8, r8)
 8001cac:	46bd      	mov	sp, r7
 8001cae:	b002      	add	sp, #8
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f7ff ffaf 	bl	8001c20 <SysTick_Config>
 8001cc2:	0003      	movs	r3, r0
}
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	b002      	add	sp, #8
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e077      	b.n	8001dce <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a3d      	ldr	r2, [pc, #244]	@ (8001dd8 <HAL_DMA_Init+0x10c>)
 8001ce4:	4694      	mov	ip, r2
 8001ce6:	4463      	add	r3, ip
 8001ce8:	2114      	movs	r1, #20
 8001cea:	0018      	movs	r0, r3
 8001cec:	f7fe fa0c 	bl	8000108 <__udivsi3>
 8001cf0:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8001cf2:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2225      	movs	r2, #37	@ 0x25
 8001cfc:	2102      	movs	r1, #2
 8001cfe:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4934      	ldr	r1, [pc, #208]	@ (8001ddc <HAL_DMA_Init+0x110>)
 8001d0c:	400a      	ands	r2, r1
 8001d0e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6819      	ldr	r1, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	431a      	orrs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	431a      	orrs	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f000 fa49 	bl	80021e0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	2380      	movs	r3, #128	@ 0x80
 8001d54:	01db      	lsls	r3, r3, #7
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d102      	bne.n	8001d60 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d68:	21ff      	movs	r1, #255	@ 0xff
 8001d6a:	400a      	ands	r2, r1
 8001d6c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001d76:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d011      	beq.n	8001da4 <HAL_DMA_Init+0xd8>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	d80d      	bhi.n	8001da4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	f000 fa54 	bl	8002238 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	e008      	b.n	8001db6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2225      	movs	r2, #37	@ 0x25
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2224      	movs	r2, #36	@ 0x24
 8001dc8:	2100      	movs	r1, #0
 8001dca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	0018      	movs	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	b002      	add	sp, #8
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	46c0      	nop			@ (mov r8, r8)
 8001dd8:	bffdfff8 	.word	0xbffdfff8
 8001ddc:	ffff800f 	.word	0xffff800f

08001de0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
 8001dec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dee:	2317      	movs	r3, #23
 8001df0:	18fb      	adds	r3, r7, r3
 8001df2:	2200      	movs	r2, #0
 8001df4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2224      	movs	r2, #36	@ 0x24
 8001dfa:	5c9b      	ldrb	r3, [r3, r2]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <HAL_DMA_Start_IT+0x24>
 8001e00:	2302      	movs	r3, #2
 8001e02:	e070      	b.n	8001ee6 <HAL_DMA_Start_IT+0x106>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2224      	movs	r2, #36	@ 0x24
 8001e08:	2101      	movs	r1, #1
 8001e0a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2225      	movs	r2, #37	@ 0x25
 8001e10:	5c9b      	ldrb	r3, [r3, r2]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d157      	bne.n	8001ec8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2225      	movs	r2, #37	@ 0x25
 8001e1c:	2102      	movs	r1, #2
 8001e1e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2101      	movs	r1, #1
 8001e32:	438a      	bics	r2, r1
 8001e34:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	68b9      	ldr	r1, [r7, #8]
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 f98f 	bl	8002160 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d008      	beq.n	8001e5c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	210e      	movs	r1, #14
 8001e56:	430a      	orrs	r2, r1
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	e00f      	b.n	8001e7c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2104      	movs	r1, #4
 8001e68:	438a      	bics	r2, r1
 8001e6a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	210a      	movs	r1, #10
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	2380      	movs	r3, #128	@ 0x80
 8001e84:	025b      	lsls	r3, r3, #9
 8001e86:	4013      	ands	r3, r2
 8001e88:	d008      	beq.n	8001e9c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e94:	2180      	movs	r1, #128	@ 0x80
 8001e96:	0049      	lsls	r1, r1, #1
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d008      	beq.n	8001eb6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eae:	2180      	movs	r1, #128	@ 0x80
 8001eb0:	0049      	lsls	r1, r1, #1
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	e007      	b.n	8001ed8 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2224      	movs	r2, #36	@ 0x24
 8001ecc:	2100      	movs	r1, #0
 8001ece:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ed0:	2317      	movs	r3, #23
 8001ed2:	18fb      	adds	r3, r7, r3
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2224      	movs	r2, #36	@ 0x24
 8001edc:	2100      	movs	r1, #0
 8001ede:	5499      	strb	r1, [r3, r2]

  return status;
 8001ee0:	2317      	movs	r3, #23
 8001ee2:	18fb      	adds	r3, r7, r3
 8001ee4:	781b      	ldrb	r3, [r3, #0]
}
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	b006      	add	sp, #24
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef8:	230f      	movs	r3, #15
 8001efa:	18fb      	adds	r3, r7, r3
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2224      	movs	r2, #36	@ 0x24
 8001f04:	2100      	movs	r1, #0
 8001f06:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2224      	movs	r2, #36	@ 0x24
 8001f0c:	5c9b      	ldrb	r3, [r3, r2]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <HAL_DMA_Abort_IT+0x26>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e05e      	b.n	8001fd4 <HAL_DMA_Abort_IT+0xe4>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2224      	movs	r2, #36	@ 0x24
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2225      	movs	r2, #37	@ 0x25
 8001f22:	5c9b      	ldrb	r3, [r3, r2]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d007      	beq.n	8001f3a <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2204      	movs	r2, #4
 8001f2e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001f30:	230f      	movs	r3, #15
 8001f32:	18fb      	adds	r3, r7, r3
 8001f34:	2201      	movs	r2, #1
 8001f36:	701a      	strb	r2, [r3, #0]
 8001f38:	e049      	b.n	8001fce <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	210e      	movs	r1, #14
 8001f46:	438a      	bics	r2, r1
 8001f48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2101      	movs	r1, #1
 8001f56:	438a      	bics	r2, r1
 8001f58:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f64:	491d      	ldr	r1, [pc, #116]	@ (8001fdc <HAL_DMA_Abort_IT+0xec>)
 8001f66:	400a      	ands	r2, r1
 8001f68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8001f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe0 <HAL_DMA_Abort_IT+0xf0>)
 8001f6c:	6859      	ldr	r1, [r3, #4]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f72:	221c      	movs	r2, #28
 8001f74:	4013      	ands	r3, r2
 8001f76:	2201      	movs	r2, #1
 8001f78:	409a      	lsls	r2, r3
 8001f7a:	4b19      	ldr	r3, [pc, #100]	@ (8001fe0 <HAL_DMA_Abort_IT+0xf0>)
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001f88:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00c      	beq.n	8001fac <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f9c:	490f      	ldr	r1, [pc, #60]	@ (8001fdc <HAL_DMA_Abort_IT+0xec>)
 8001f9e:	400a      	ands	r2, r1
 8001fa0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001faa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2225      	movs	r2, #37	@ 0x25
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2224      	movs	r2, #36	@ 0x24
 8001fb8:	2100      	movs	r1, #0
 8001fba:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d004      	beq.n	8001fce <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	0010      	movs	r0, r2
 8001fcc:	4798      	blx	r3
    }
  }
  return status;
 8001fce:	230f      	movs	r3, #15
 8001fd0:	18fb      	adds	r3, r7, r3
 8001fd2:	781b      	ldrb	r3, [r3, #0]
}
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	b004      	add	sp, #16
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	fffffeff 	.word	0xfffffeff
 8001fe0:	40020000 	.word	0x40020000

08001fe4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8001fec:	4b55      	ldr	r3, [pc, #340]	@ (8002144 <HAL_DMA_IRQHandler+0x160>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	221c      	movs	r2, #28
 8002000:	4013      	ands	r3, r2
 8002002:	2204      	movs	r2, #4
 8002004:	409a      	lsls	r2, r3
 8002006:	0013      	movs	r3, r2
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	4013      	ands	r3, r2
 800200c:	d027      	beq.n	800205e <HAL_DMA_IRQHandler+0x7a>
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2204      	movs	r2, #4
 8002012:	4013      	ands	r3, r2
 8002014:	d023      	beq.n	800205e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2220      	movs	r2, #32
 800201e:	4013      	ands	r3, r2
 8002020:	d107      	bne.n	8002032 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2104      	movs	r1, #4
 800202e:	438a      	bics	r2, r1
 8002030:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8002032:	4b44      	ldr	r3, [pc, #272]	@ (8002144 <HAL_DMA_IRQHandler+0x160>)
 8002034:	6859      	ldr	r1, [r3, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203a:	221c      	movs	r2, #28
 800203c:	4013      	ands	r3, r2
 800203e:	2204      	movs	r2, #4
 8002040:	409a      	lsls	r2, r3
 8002042:	4b40      	ldr	r3, [pc, #256]	@ (8002144 <HAL_DMA_IRQHandler+0x160>)
 8002044:	430a      	orrs	r2, r1
 8002046:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204c:	2b00      	cmp	r3, #0
 800204e:	d100      	bne.n	8002052 <HAL_DMA_IRQHandler+0x6e>
 8002050:	e073      	b.n	800213a <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	0010      	movs	r0, r2
 800205a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800205c:	e06d      	b.n	800213a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002062:	221c      	movs	r2, #28
 8002064:	4013      	ands	r3, r2
 8002066:	2202      	movs	r2, #2
 8002068:	409a      	lsls	r2, r3
 800206a:	0013      	movs	r3, r2
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	4013      	ands	r3, r2
 8002070:	d02e      	beq.n	80020d0 <HAL_DMA_IRQHandler+0xec>
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2202      	movs	r2, #2
 8002076:	4013      	ands	r3, r2
 8002078:	d02a      	beq.n	80020d0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2220      	movs	r2, #32
 8002082:	4013      	ands	r3, r2
 8002084:	d10b      	bne.n	800209e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	210a      	movs	r1, #10
 8002092:	438a      	bics	r2, r1
 8002094:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2225      	movs	r2, #37	@ 0x25
 800209a:	2101      	movs	r1, #1
 800209c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800209e:	4b29      	ldr	r3, [pc, #164]	@ (8002144 <HAL_DMA_IRQHandler+0x160>)
 80020a0:	6859      	ldr	r1, [r3, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a6:	221c      	movs	r2, #28
 80020a8:	4013      	ands	r3, r2
 80020aa:	2202      	movs	r2, #2
 80020ac:	409a      	lsls	r2, r3
 80020ae:	4b25      	ldr	r3, [pc, #148]	@ (8002144 <HAL_DMA_IRQHandler+0x160>)
 80020b0:	430a      	orrs	r2, r1
 80020b2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2224      	movs	r2, #36	@ 0x24
 80020b8:	2100      	movs	r1, #0
 80020ba:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d03a      	beq.n	800213a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	0010      	movs	r0, r2
 80020cc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80020ce:	e034      	b.n	800213a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d4:	221c      	movs	r2, #28
 80020d6:	4013      	ands	r3, r2
 80020d8:	2208      	movs	r2, #8
 80020da:	409a      	lsls	r2, r3
 80020dc:	0013      	movs	r3, r2
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	4013      	ands	r3, r2
 80020e2:	d02b      	beq.n	800213c <HAL_DMA_IRQHandler+0x158>
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2208      	movs	r2, #8
 80020e8:	4013      	ands	r3, r2
 80020ea:	d027      	beq.n	800213c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	210e      	movs	r1, #14
 80020f8:	438a      	bics	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80020fc:	4b11      	ldr	r3, [pc, #68]	@ (8002144 <HAL_DMA_IRQHandler+0x160>)
 80020fe:	6859      	ldr	r1, [r3, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002104:	221c      	movs	r2, #28
 8002106:	4013      	ands	r3, r2
 8002108:	2201      	movs	r2, #1
 800210a:	409a      	lsls	r2, r3
 800210c:	4b0d      	ldr	r3, [pc, #52]	@ (8002144 <HAL_DMA_IRQHandler+0x160>)
 800210e:	430a      	orrs	r2, r1
 8002110:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2225      	movs	r2, #37	@ 0x25
 800211c:	2101      	movs	r1, #1
 800211e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2224      	movs	r2, #36	@ 0x24
 8002124:	2100      	movs	r1, #0
 8002126:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800212c:	2b00      	cmp	r3, #0
 800212e:	d005      	beq.n	800213c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	0010      	movs	r0, r2
 8002138:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800213a:	46c0      	nop			@ (mov r8, r8)
 800213c:	46c0      	nop			@ (mov r8, r8)
}
 800213e:	46bd      	mov	sp, r7
 8002140:	b004      	add	sp, #16
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40020000 	.word	0x40020000

08002148 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2225      	movs	r2, #37	@ 0x25
 8002154:	5c9b      	ldrb	r3, [r3, r2]
 8002156:	b2db      	uxtb	r3, r3
}
 8002158:	0018      	movs	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	b002      	add	sp, #8
 800215e:	bd80      	pop	{r7, pc}

08002160 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
 800216c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002176:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800217c:	2b00      	cmp	r3, #0
 800217e:	d004      	beq.n	800218a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002188:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800218a:	4b14      	ldr	r3, [pc, #80]	@ (80021dc <DMA_SetConfig+0x7c>)
 800218c:	6859      	ldr	r1, [r3, #4]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	221c      	movs	r2, #28
 8002194:	4013      	ands	r3, r2
 8002196:	2201      	movs	r2, #1
 8002198:	409a      	lsls	r2, r3
 800219a:	4b10      	ldr	r3, [pc, #64]	@ (80021dc <DMA_SetConfig+0x7c>)
 800219c:	430a      	orrs	r2, r1
 800219e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2b10      	cmp	r3, #16
 80021ae:	d108      	bne.n	80021c2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80021c0:	e007      	b.n	80021d2 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	60da      	str	r2, [r3, #12]
}
 80021d2:	46c0      	nop			@ (mov r8, r8)
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b004      	add	sp, #16
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	46c0      	nop			@ (mov r8, r8)
 80021dc:	40020000 	.word	0x40020000

080021e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	001a      	movs	r2, r3
 80021ee:	23ff      	movs	r3, #255	@ 0xff
 80021f0:	4013      	ands	r3, r2
 80021f2:	3b08      	subs	r3, #8
 80021f4:	2114      	movs	r1, #20
 80021f6:	0018      	movs	r0, r3
 80021f8:	f7fd ff86 	bl	8000108 <__udivsi3>
 80021fc:	0003      	movs	r3, r0
 80021fe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002204:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8002206:	4a0a      	ldr	r2, [pc, #40]	@ (8002230 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002208:	4694      	mov	ip, r2
 800220a:	4463      	add	r3, ip
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	001a      	movs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a07      	ldr	r2, [pc, #28]	@ (8002234 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002218:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	221c      	movs	r2, #28
 800221e:	4013      	ands	r3, r2
 8002220:	2201      	movs	r2, #1
 8002222:	409a      	lsls	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002228:	46c0      	nop			@ (mov r8, r8)
 800222a:	46bd      	mov	sp, r7
 800222c:	b004      	add	sp, #16
 800222e:	bd80      	pop	{r7, pc}
 8002230:	10008200 	.word	0x10008200
 8002234:	40020880 	.word	0x40020880

08002238 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	22ff      	movs	r2, #255	@ 0xff
 8002246:	4013      	ands	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4a0a      	ldr	r2, [pc, #40]	@ (8002278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800224e:	4694      	mov	ip, r2
 8002250:	4463      	add	r3, ip
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	001a      	movs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a07      	ldr	r2, [pc, #28]	@ (800227c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800225e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	3b01      	subs	r3, #1
 8002264:	2203      	movs	r2, #3
 8002266:	4013      	ands	r3, r2
 8002268:	2201      	movs	r2, #1
 800226a:	409a      	lsls	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002270:	46c0      	nop			@ (mov r8, r8)
 8002272:	46bd      	mov	sp, r7
 8002274:	b004      	add	sp, #16
 8002276:	bd80      	pop	{r7, pc}
 8002278:	1000823f 	.word	0x1000823f
 800227c:	40020940 	.word	0x40020940

08002280 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	607a      	str	r2, [r7, #4]
 800228a:	200b      	movs	r0, #11
 800228c:	183b      	adds	r3, r7, r0
 800228e:	1c0a      	adds	r2, r1, #0
 8002290:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002292:	2317      	movs	r3, #23
 8002294:	18fb      	adds	r3, r7, r3
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 800229a:	183b      	adds	r3, r7, r0
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d010      	beq.n	80022c4 <HAL_EXTI_RegisterCallback+0x44>
 80022a2:	dc13      	bgt.n	80022cc <HAL_EXTI_RegisterCallback+0x4c>
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d002      	beq.n	80022ae <HAL_EXTI_RegisterCallback+0x2e>
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d007      	beq.n	80022bc <HAL_EXTI_RegisterCallback+0x3c>
 80022ac:	e00e      	b.n	80022cc <HAL_EXTI_RegisterCallback+0x4c>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	609a      	str	r2, [r3, #8]
      break;
 80022ba:	e00c      	b.n	80022d6 <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	605a      	str	r2, [r3, #4]
      break;
 80022c2:	e008      	b.n	80022d6 <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	609a      	str	r2, [r3, #8]
      break;
 80022ca:	e004      	b.n	80022d6 <HAL_EXTI_RegisterCallback+0x56>

    default:
      status = HAL_ERROR;
 80022cc:	2317      	movs	r3, #23
 80022ce:	18fb      	adds	r3, r7, r3
 80022d0:	2201      	movs	r2, #1
 80022d2:	701a      	strb	r2, [r3, #0]
      break;
 80022d4:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 80022d6:	2317      	movs	r3, #23
 80022d8:	18fb      	adds	r3, r7, r3
 80022da:	781b      	ldrb	r3, [r3, #0]
}
 80022dc:	0018      	movs	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	b006      	add	sp, #24
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e003      	b.n	8002300 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80022fe:	2300      	movs	r3, #0
  }
}
 8002300:	0018      	movs	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	b002      	add	sp, #8
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	0c1b      	lsrs	r3, r3, #16
 8002316:	2201      	movs	r2, #1
 8002318:	4013      	ands	r3, r2
 800231a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	221f      	movs	r2, #31
 8002322:	4013      	ands	r3, r2
 8002324:	2201      	movs	r2, #1
 8002326:	409a      	lsls	r2, r3
 8002328:	0013      	movs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	015b      	lsls	r3, r3, #5
 8002330:	4a18      	ldr	r2, [pc, #96]	@ (8002394 <HAL_EXTI_IRQHandler+0x8c>)
 8002332:	4694      	mov	ip, r2
 8002334:	4463      	add	r3, ip
 8002336:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4013      	ands	r3, r2
 8002340:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d009      	beq.n	800235c <HAL_EXTI_IRQHandler+0x54>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <HAL_EXTI_IRQHandler+0x54>
    {
      hexti->RisingCallback();
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	015b      	lsls	r3, r3, #5
 8002360:	4a0d      	ldr	r2, [pc, #52]	@ (8002398 <HAL_EXTI_IRQHandler+0x90>)
 8002362:	4694      	mov	ip, r2
 8002364:	4463      	add	r3, ip
 8002366:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4013      	ands	r3, r2
 8002370:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d009      	beq.n	800238c <HAL_EXTI_IRQHandler+0x84>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <HAL_EXTI_IRQHandler+0x84>
    {
      hexti->FallingCallback();
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	4798      	blx	r3
    }
  }
}
 800238c:	46c0      	nop			@ (mov r8, r8)
 800238e:	46bd      	mov	sp, r7
 8002390:	b006      	add	sp, #24
 8002392:	bd80      	pop	{r7, pc}
 8002394:	4002180c 	.word	0x4002180c
 8002398:	40021810 	.word	0x40021810

0800239c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80023aa:	e153      	b.n	8002654 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2101      	movs	r1, #1
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4091      	lsls	r1, r2
 80023b6:	000a      	movs	r2, r1
 80023b8:	4013      	ands	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d100      	bne.n	80023c4 <HAL_GPIO_Init+0x28>
 80023c2:	e144      	b.n	800264e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d003      	beq.n	80023d4 <HAL_GPIO_Init+0x38>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b12      	cmp	r3, #18
 80023d2:	d125      	bne.n	8002420 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	08da      	lsrs	r2, r3, #3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3208      	adds	r2, #8
 80023dc:	0092      	lsls	r2, r2, #2
 80023de:	58d3      	ldr	r3, [r2, r3]
 80023e0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	2207      	movs	r2, #7
 80023e6:	4013      	ands	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	220f      	movs	r2, #15
 80023ec:	409a      	lsls	r2, r3
 80023ee:	0013      	movs	r3, r2
 80023f0:	43da      	mvns	r2, r3
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	4013      	ands	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	691b      	ldr	r3, [r3, #16]
 80023fc:	220f      	movs	r2, #15
 80023fe:	401a      	ands	r2, r3
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	2107      	movs	r1, #7
 8002404:	400b      	ands	r3, r1
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	409a      	lsls	r2, r3
 800240a:	0013      	movs	r3, r2
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	4313      	orrs	r3, r2
 8002410:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	08da      	lsrs	r2, r3, #3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3208      	adds	r2, #8
 800241a:	0092      	lsls	r2, r2, #2
 800241c:	6979      	ldr	r1, [r7, #20]
 800241e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	2203      	movs	r2, #3
 800242c:	409a      	lsls	r2, r3
 800242e:	0013      	movs	r3, r2
 8002430:	43da      	mvns	r2, r3
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	4013      	ands	r3, r2
 8002436:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2203      	movs	r2, #3
 800243e:	401a      	ands	r2, r3
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	409a      	lsls	r2, r3
 8002446:	0013      	movs	r3, r2
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	4313      	orrs	r3, r2
 800244c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d00b      	beq.n	8002474 <HAL_GPIO_Init+0xd8>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d007      	beq.n	8002474 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002468:	2b11      	cmp	r3, #17
 800246a:	d003      	beq.n	8002474 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b12      	cmp	r3, #18
 8002472:	d130      	bne.n	80024d6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	2203      	movs	r2, #3
 8002480:	409a      	lsls	r2, r3
 8002482:	0013      	movs	r3, r2
 8002484:	43da      	mvns	r2, r3
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	4013      	ands	r3, r2
 800248a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	68da      	ldr	r2, [r3, #12]
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	409a      	lsls	r2, r3
 8002496:	0013      	movs	r3, r2
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	4313      	orrs	r3, r2
 800249c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024aa:	2201      	movs	r2, #1
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	409a      	lsls	r2, r3
 80024b0:	0013      	movs	r3, r2
 80024b2:	43da      	mvns	r2, r3
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	4013      	ands	r3, r2
 80024b8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	091b      	lsrs	r3, r3, #4
 80024c0:	2201      	movs	r2, #1
 80024c2:	401a      	ands	r2, r3
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	409a      	lsls	r2, r3
 80024c8:	0013      	movs	r3, r2
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d017      	beq.n	800250e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	2203      	movs	r2, #3
 80024ea:	409a      	lsls	r2, r3
 80024ec:	0013      	movs	r3, r2
 80024ee:	43da      	mvns	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	4013      	ands	r3, r2
 80024f4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	409a      	lsls	r2, r3
 8002500:	0013      	movs	r3, r2
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	4313      	orrs	r3, r2
 8002506:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	2380      	movs	r3, #128	@ 0x80
 8002514:	055b      	lsls	r3, r3, #21
 8002516:	4013      	ands	r3, r2
 8002518:	d100      	bne.n	800251c <HAL_GPIO_Init+0x180>
 800251a:	e098      	b.n	800264e <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800251c:	4a53      	ldr	r2, [pc, #332]	@ (800266c <HAL_GPIO_Init+0x2d0>)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	089b      	lsrs	r3, r3, #2
 8002522:	3318      	adds	r3, #24
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	589b      	ldr	r3, [r3, r2]
 8002528:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	2203      	movs	r2, #3
 800252e:	4013      	ands	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	220f      	movs	r2, #15
 8002534:	409a      	lsls	r2, r3
 8002536:	0013      	movs	r3, r2
 8002538:	43da      	mvns	r2, r3
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	4013      	ands	r3, r2
 800253e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	23a0      	movs	r3, #160	@ 0xa0
 8002544:	05db      	lsls	r3, r3, #23
 8002546:	429a      	cmp	r2, r3
 8002548:	d019      	beq.n	800257e <HAL_GPIO_Init+0x1e2>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a48      	ldr	r2, [pc, #288]	@ (8002670 <HAL_GPIO_Init+0x2d4>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d013      	beq.n	800257a <HAL_GPIO_Init+0x1de>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a47      	ldr	r2, [pc, #284]	@ (8002674 <HAL_GPIO_Init+0x2d8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d00d      	beq.n	8002576 <HAL_GPIO_Init+0x1da>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a46      	ldr	r2, [pc, #280]	@ (8002678 <HAL_GPIO_Init+0x2dc>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d007      	beq.n	8002572 <HAL_GPIO_Init+0x1d6>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a45      	ldr	r2, [pc, #276]	@ (800267c <HAL_GPIO_Init+0x2e0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d101      	bne.n	800256e <HAL_GPIO_Init+0x1d2>
 800256a:	2305      	movs	r3, #5
 800256c:	e008      	b.n	8002580 <HAL_GPIO_Init+0x1e4>
 800256e:	2306      	movs	r3, #6
 8002570:	e006      	b.n	8002580 <HAL_GPIO_Init+0x1e4>
 8002572:	2303      	movs	r3, #3
 8002574:	e004      	b.n	8002580 <HAL_GPIO_Init+0x1e4>
 8002576:	2302      	movs	r3, #2
 8002578:	e002      	b.n	8002580 <HAL_GPIO_Init+0x1e4>
 800257a:	2301      	movs	r3, #1
 800257c:	e000      	b.n	8002580 <HAL_GPIO_Init+0x1e4>
 800257e:	2300      	movs	r3, #0
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	2103      	movs	r1, #3
 8002584:	400a      	ands	r2, r1
 8002586:	00d2      	lsls	r2, r2, #3
 8002588:	4093      	lsls	r3, r2
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	4313      	orrs	r3, r2
 800258e:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002590:	4936      	ldr	r1, [pc, #216]	@ (800266c <HAL_GPIO_Init+0x2d0>)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	089b      	lsrs	r3, r3, #2
 8002596:	3318      	adds	r3, #24
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800259e:	4a33      	ldr	r2, [pc, #204]	@ (800266c <HAL_GPIO_Init+0x2d0>)
 80025a0:	2380      	movs	r3, #128	@ 0x80
 80025a2:	58d3      	ldr	r3, [r2, r3]
 80025a4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	43da      	mvns	r2, r3
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	4013      	ands	r3, r2
 80025ae:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	2380      	movs	r3, #128	@ 0x80
 80025b6:	025b      	lsls	r3, r3, #9
 80025b8:	4013      	ands	r3, r2
 80025ba:	d003      	beq.n	80025c4 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80025c4:	4929      	ldr	r1, [pc, #164]	@ (800266c <HAL_GPIO_Init+0x2d0>)
 80025c6:	2280      	movs	r2, #128	@ 0x80
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80025cc:	4a27      	ldr	r2, [pc, #156]	@ (800266c <HAL_GPIO_Init+0x2d0>)
 80025ce:	2384      	movs	r3, #132	@ 0x84
 80025d0:	58d3      	ldr	r3, [r2, r3]
 80025d2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	43da      	mvns	r2, r3
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	4013      	ands	r3, r2
 80025dc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	2380      	movs	r3, #128	@ 0x80
 80025e4:	029b      	lsls	r3, r3, #10
 80025e6:	4013      	ands	r3, r2
 80025e8:	d003      	beq.n	80025f2 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80025f2:	491e      	ldr	r1, [pc, #120]	@ (800266c <HAL_GPIO_Init+0x2d0>)
 80025f4:	2284      	movs	r2, #132	@ 0x84
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80025fa:	4b1c      	ldr	r3, [pc, #112]	@ (800266c <HAL_GPIO_Init+0x2d0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	43da      	mvns	r2, r3
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	4013      	ands	r3, r2
 8002608:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	2380      	movs	r3, #128	@ 0x80
 8002610:	035b      	lsls	r3, r3, #13
 8002612:	4013      	ands	r3, r2
 8002614:	d003      	beq.n	800261e <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4313      	orrs	r3, r2
 800261c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800261e:	4b13      	ldr	r3, [pc, #76]	@ (800266c <HAL_GPIO_Init+0x2d0>)
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8002624:	4b11      	ldr	r3, [pc, #68]	@ (800266c <HAL_GPIO_Init+0x2d0>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	43da      	mvns	r2, r3
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	4013      	ands	r3, r2
 8002632:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	2380      	movs	r3, #128	@ 0x80
 800263a:	039b      	lsls	r3, r3, #14
 800263c:	4013      	ands	r3, r2
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002648:	4b08      	ldr	r3, [pc, #32]	@ (800266c <HAL_GPIO_Init+0x2d0>)
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	3301      	adds	r3, #1
 8002652:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	40da      	lsrs	r2, r3
 800265c:	1e13      	subs	r3, r2, #0
 800265e:	d000      	beq.n	8002662 <HAL_GPIO_Init+0x2c6>
 8002660:	e6a4      	b.n	80023ac <HAL_GPIO_Init+0x10>
  }
}
 8002662:	46c0      	nop			@ (mov r8, r8)
 8002664:	46c0      	nop			@ (mov r8, r8)
 8002666:	46bd      	mov	sp, r7
 8002668:	b006      	add	sp, #24
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40021800 	.word	0x40021800
 8002670:	50000400 	.word	0x50000400
 8002674:	50000800 	.word	0x50000800
 8002678:	50000c00 	.word	0x50000c00
 800267c:	50001400 	.word	0x50001400

08002680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	0008      	movs	r0, r1
 800268a:	0011      	movs	r1, r2
 800268c:	1cbb      	adds	r3, r7, #2
 800268e:	1c02      	adds	r2, r0, #0
 8002690:	801a      	strh	r2, [r3, #0]
 8002692:	1c7b      	adds	r3, r7, #1
 8002694:	1c0a      	adds	r2, r1, #0
 8002696:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002698:	1c7b      	adds	r3, r7, #1
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d004      	beq.n	80026aa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026a0:	1cbb      	adds	r3, r7, #2
 80026a2:	881a      	ldrh	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026a8:	e003      	b.n	80026b2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026aa:	1cbb      	adds	r3, r7, #2
 80026ac:	881a      	ldrh	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026b2:	46c0      	nop			@ (mov r8, r8)
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b002      	add	sp, #8
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e08f      	b.n	80027ee <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2241      	movs	r2, #65	@ 0x41
 80026d2:	5c9b      	ldrb	r3, [r3, r2]
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d107      	bne.n	80026ea <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2240      	movs	r2, #64	@ 0x40
 80026de:	2100      	movs	r1, #0
 80026e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	0018      	movs	r0, r3
 80026e6:	f7fe f86f 	bl	80007c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2241      	movs	r2, #65	@ 0x41
 80026ee:	2124      	movs	r1, #36	@ 0x24
 80026f0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2101      	movs	r1, #1
 80026fe:	438a      	bics	r2, r1
 8002700:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	493b      	ldr	r1, [pc, #236]	@ (80027f8 <HAL_I2C_Init+0x13c>)
 800270c:	400a      	ands	r2, r1
 800270e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4938      	ldr	r1, [pc, #224]	@ (80027fc <HAL_I2C_Init+0x140>)
 800271c:	400a      	ands	r2, r1
 800271e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d108      	bne.n	800273a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2180      	movs	r1, #128	@ 0x80
 8002732:	0209      	lsls	r1, r1, #8
 8002734:	430a      	orrs	r2, r1
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	e007      	b.n	800274a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2184      	movs	r1, #132	@ 0x84
 8002744:	0209      	lsls	r1, r1, #8
 8002746:	430a      	orrs	r2, r1
 8002748:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d109      	bne.n	8002766 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2180      	movs	r1, #128	@ 0x80
 800275e:	0109      	lsls	r1, r1, #4
 8002760:	430a      	orrs	r2, r1
 8002762:	605a      	str	r2, [r3, #4]
 8002764:	e007      	b.n	8002776 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4923      	ldr	r1, [pc, #140]	@ (8002800 <HAL_I2C_Init+0x144>)
 8002772:	400a      	ands	r2, r1
 8002774:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4920      	ldr	r1, [pc, #128]	@ (8002804 <HAL_I2C_Init+0x148>)
 8002782:	430a      	orrs	r2, r1
 8002784:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	491a      	ldr	r1, [pc, #104]	@ (80027fc <HAL_I2C_Init+0x140>)
 8002792:	400a      	ands	r2, r1
 8002794:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	431a      	orrs	r2, r3
 80027a0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69d9      	ldr	r1, [r3, #28]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a1a      	ldr	r2, [r3, #32]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2101      	movs	r1, #1
 80027cc:	430a      	orrs	r2, r1
 80027ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2241      	movs	r2, #65	@ 0x41
 80027da:	2120      	movs	r1, #32
 80027dc:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2242      	movs	r2, #66	@ 0x42
 80027e8:	2100      	movs	r1, #0
 80027ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	0018      	movs	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	b002      	add	sp, #8
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	46c0      	nop			@ (mov r8, r8)
 80027f8:	f0ffffff 	.word	0xf0ffffff
 80027fc:	ffff7fff 	.word	0xffff7fff
 8002800:	fffff7ff 	.word	0xfffff7ff
 8002804:	02008000 	.word	0x02008000

08002808 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8002808:	b5b0      	push	{r4, r5, r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	1dbb      	adds	r3, r7, #6
 8002814:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2241      	movs	r2, #65	@ 0x41
 800281a:	5c9b      	ldrb	r3, [r3, r2]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b20      	cmp	r3, #32
 8002820:	d000      	beq.n	8002824 <HAL_I2C_Slave_Transmit_DMA+0x1c>
 8002822:	e0db      	b.n	80029dc <HAL_I2C_Slave_Transmit_DMA+0x1d4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_I2C_Slave_Transmit_DMA+0x2a>
 800282a:	1dbb      	adds	r3, r7, #6
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d105      	bne.n	800283e <HAL_I2C_Slave_Transmit_DMA+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2280      	movs	r2, #128	@ 0x80
 8002836:	0092      	lsls	r2, r2, #2
 8002838:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e0cf      	b.n	80029de <HAL_I2C_Slave_Transmit_DMA+0x1d6>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2240      	movs	r2, #64	@ 0x40
 8002842:	5c9b      	ldrb	r3, [r3, r2]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <HAL_I2C_Slave_Transmit_DMA+0x44>
 8002848:	2302      	movs	r3, #2
 800284a:	e0c8      	b.n	80029de <HAL_I2C_Slave_Transmit_DMA+0x1d6>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2240      	movs	r2, #64	@ 0x40
 8002850:	2101      	movs	r1, #1
 8002852:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2241      	movs	r2, #65	@ 0x41
 8002858:	2121      	movs	r1, #33	@ 0x21
 800285a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2242      	movs	r2, #66	@ 0x42
 8002860:	2120      	movs	r1, #32
 8002862:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	1dba      	adds	r2, r7, #6
 8002874:	8812      	ldrh	r2, [r2, #0]
 8002876:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4a58      	ldr	r2, [pc, #352]	@ (80029e8 <HAL_I2C_Slave_Transmit_DMA+0x1e0>)
 8002886:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4a58      	ldr	r2, [pc, #352]	@ (80029ec <HAL_I2C_Slave_Transmit_DMA+0x1e4>)
 800288c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a1a      	ldr	r2, [r3, #32]
 8002892:	2380      	movs	r3, #128	@ 0x80
 8002894:	029b      	lsls	r3, r3, #10
 8002896:	429a      	cmp	r2, r3
 8002898:	d117      	bne.n	80028ca <HAL_I2C_Slave_Transmit_DMA+0xc2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289e:	781a      	ldrb	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferCount != 0U)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d06e      	beq.n	80029b2 <HAL_I2C_Slave_Transmit_DMA+0x1aa>
    {
      if (hi2c->hdmatx != NULL)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d025      	beq.n	8002928 <HAL_I2C_Slave_Transmit_DMA+0x120>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e0:	4a43      	ldr	r2, [pc, #268]	@ (80029f0 <HAL_I2C_Slave_Transmit_DMA+0x1e8>)
 80028e2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e8:	4a42      	ldr	r2, [pc, #264]	@ (80029f4 <HAL_I2C_Slave_Transmit_DMA+0x1ec>)
 80028ea:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f0:	2200      	movs	r2, #0
 80028f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f8:	2200      	movs	r2, #0
 80028fa:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8002904:	0019      	movs	r1, r3
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 800290c:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8002912:	2517      	movs	r5, #23
 8002914:	197c      	adds	r4, r7, r5
 8002916:	f7ff fa63 	bl	8001de0 <HAL_DMA_Start_IT>
 800291a:	0003      	movs	r3, r0
 800291c:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800291e:	197b      	adds	r3, r7, r5
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d131      	bne.n	800298a <HAL_I2C_Slave_Transmit_DMA+0x182>
 8002926:	e013      	b.n	8002950 <HAL_I2C_Slave_Transmit_DMA+0x148>
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2241      	movs	r2, #65	@ 0x41
 800292c:	2128      	movs	r1, #40	@ 0x28
 800292e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2242      	movs	r2, #66	@ 0x42
 8002934:	2100      	movs	r1, #0
 8002936:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293c:	2280      	movs	r2, #128	@ 0x80
 800293e:	431a      	orrs	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2240      	movs	r2, #64	@ 0x40
 8002948:	2100      	movs	r1, #0
 800294a:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e046      	b.n	80029de <HAL_I2C_Slave_Transmit_DMA+0x1d6>
      {
        /* Enable Address Acknowledge */
        hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4927      	ldr	r1, [pc, #156]	@ (80029f8 <HAL_I2C_Slave_Transmit_DMA+0x1f0>)
 800295c:	400a      	ands	r2, r1
 800295e:	605a      	str	r2, [r3, #4]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2240      	movs	r2, #64	@ 0x40
 8002964:	2100      	movs	r1, #0
 8002966:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR, STOP, NACK, ADDR interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002968:	2380      	movs	r3, #128	@ 0x80
 800296a:	021a      	lsls	r2, r3, #8
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	0011      	movs	r1, r2
 8002970:	0018      	movs	r0, r3
 8002972:	f001 fc05 	bl	8004180 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2180      	movs	r1, #128	@ 0x80
 8002982:	01c9      	lsls	r1, r1, #7
 8002984:	430a      	orrs	r2, r1
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	e026      	b.n	80029d8 <HAL_I2C_Slave_Transmit_DMA+0x1d0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2241      	movs	r2, #65	@ 0x41
 800298e:	2128      	movs	r1, #40	@ 0x28
 8002990:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2242      	movs	r2, #66	@ 0x42
 8002996:	2100      	movs	r1, #0
 8002998:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299e:	2210      	movs	r2, #16
 80029a0:	431a      	orrs	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2240      	movs	r2, #64	@ 0x40
 80029aa:	2100      	movs	r1, #0
 80029ac:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e015      	b.n	80029de <HAL_I2C_Slave_Transmit_DMA+0x1d6>
      }
    }
    else
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	490e      	ldr	r1, [pc, #56]	@ (80029f8 <HAL_I2C_Slave_Transmit_DMA+0x1f0>)
 80029be:	400a      	ands	r2, r1
 80029c0:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2240      	movs	r2, #64	@ 0x40
 80029c6:	2100      	movs	r1, #0
 80029c8:	5499      	strb	r1, [r3, r2]

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80029ca:	2380      	movs	r3, #128	@ 0x80
 80029cc:	021a      	lsls	r2, r3, #8
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	0011      	movs	r1, r2
 80029d2:	0018      	movs	r0, r3
 80029d4:	f001 fbd4 	bl	8004180 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80029d8:	2300      	movs	r3, #0
 80029da:	e000      	b.n	80029de <HAL_I2C_Slave_Transmit_DMA+0x1d6>
  }
  else
  {
    return HAL_BUSY;
 80029dc:	2302      	movs	r3, #2
  }
}
 80029de:	0018      	movs	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	b006      	add	sp, #24
 80029e4:	bdb0      	pop	{r4, r5, r7, pc}
 80029e6:	46c0      	nop			@ (mov r8, r8)
 80029e8:	ffff0000 	.word	0xffff0000
 80029ec:	080033b9 	.word	0x080033b9
 80029f0:	08004055 	.word	0x08004055
 80029f4:	0800409d 	.word	0x0800409d
 80029f8:	ffff7fff 	.word	0xffff7fff

080029fc <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	1dbb      	adds	r3, r7, #6
 8002a0a:	801a      	strh	r2, [r3, #0]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2241      	movs	r2, #65	@ 0x41
 8002a10:	5c9b      	ldrb	r3, [r3, r2]
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	001a      	movs	r2, r3
 8002a16:	2328      	movs	r3, #40	@ 0x28
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2b28      	cmp	r3, #40	@ 0x28
 8002a1c:	d000      	beq.n	8002a20 <HAL_I2C_Slave_Seq_Transmit_IT+0x24>
 8002a1e:	e09f      	b.n	8002b60 <HAL_I2C_Slave_Seq_Transmit_IT+0x164>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_I2C_Slave_Seq_Transmit_IT+0x32>
 8002a26:	1dbb      	adds	r3, r7, #6
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d105      	bne.n	8002a3a <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2280      	movs	r2, #128	@ 0x80
 8002a32:	0092      	lsls	r2, r2, #2
 8002a34:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e093      	b.n	8002b62 <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002a3a:	4a4c      	ldr	r2, [pc, #304]	@ (8002b6c <HAL_I2C_Slave_Seq_Transmit_IT+0x170>)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	0011      	movs	r1, r2
 8002a40:	0018      	movs	r0, r3
 8002a42:	f001 fc27 	bl	8004294 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2240      	movs	r2, #64	@ 0x40
 8002a4a:	5c9b      	ldrb	r3, [r3, r2]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <HAL_I2C_Slave_Seq_Transmit_IT+0x58>
 8002a50:	2302      	movs	r3, #2
 8002a52:	e086      	b.n	8002b62 <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2240      	movs	r2, #64	@ 0x40
 8002a58:	2101      	movs	r1, #1
 8002a5a:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2241      	movs	r2, #65	@ 0x41
 8002a60:	5c9b      	ldrb	r3, [r3, r2]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a66:	d12c      	bne.n	8002ac2 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2102      	movs	r1, #2
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f001 fc11 	bl	8004294 <I2C_Disable_IRQ>

#if defined(HAL_DMA_MODULE_ENABLED)
      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	2380      	movs	r3, #128	@ 0x80
 8002a7a:	021b      	lsls	r3, r3, #8
 8002a7c:	401a      	ands	r2, r3
 8002a7e:	2380      	movs	r3, #128	@ 0x80
 8002a80:	021b      	lsls	r3, r3, #8
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d11d      	bne.n	8002ac2 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4937      	ldr	r1, [pc, #220]	@ (8002b70 <HAL_I2C_Slave_Seq_Transmit_IT+0x174>)
 8002a92:	400a      	ands	r2, r1
 8002a94:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d011      	beq.n	8002ac2 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa2:	4a34      	ldr	r2, [pc, #208]	@ (8002b74 <HAL_I2C_Slave_Seq_Transmit_IT+0x178>)
 8002aa4:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f7ff fa20 	bl	8001ef0 <HAL_DMA_Abort_IT>
 8002ab0:	1e03      	subs	r3, r0, #0
 8002ab2:	d006      	beq.n	8002ac2 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002abe:	0018      	movs	r0, r3
 8002ac0:	4790      	blx	r2
        }
      }
#endif /* HAL_DMA_MODULE_ENABLED */
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2241      	movs	r2, #65	@ 0x41
 8002ac6:	2129      	movs	r1, #41	@ 0x29
 8002ac8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2242      	movs	r2, #66	@ 0x42
 8002ace:	2120      	movs	r1, #32
 8002ad0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4923      	ldr	r1, [pc, #140]	@ (8002b70 <HAL_I2C_Slave_Seq_Transmit_IT+0x174>)
 8002ae4:	400a      	ands	r2, r1
 8002ae6:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1dba      	adds	r2, r7, #6
 8002af2:	8812      	ldrh	r2, [r2, #0]
 8002af4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4a1b      	ldr	r2, [pc, #108]	@ (8002b78 <HAL_I2C_Slave_Seq_Transmit_IT+0x17c>)
 8002b0a:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	2208      	movs	r2, #8
 8002b14:	4013      	ands	r3, r2
 8002b16:	3b08      	subs	r3, #8
 8002b18:	425a      	negs	r2, r3
 8002b1a:	4153      	adcs	r3, r2
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	2117      	movs	r1, #23
 8002b20:	187b      	adds	r3, r7, r1
 8002b22:	701a      	strb	r2, [r3, #0]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	0c1b      	lsrs	r3, r3, #16
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2201      	movs	r2, #1
 8002b30:	4013      	ands	r3, r2
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d107      	bne.n	8002b48 <HAL_I2C_Slave_Seq_Transmit_IT+0x14c>
 8002b38:	187b      	adds	r3, r7, r1
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_I2C_Slave_Seq_Transmit_IT+0x14c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2208      	movs	r2, #8
 8002b46:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2240      	movs	r2, #64	@ 0x40
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8002b50:	4a06      	ldr	r2, [pc, #24]	@ (8002b6c <HAL_I2C_Slave_Seq_Transmit_IT+0x170>)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	0011      	movs	r1, r2
 8002b56:	0018      	movs	r0, r3
 8002b58:	f001 fb12 	bl	8004180 <I2C_Enable_IRQ>

    return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	e000      	b.n	8002b62 <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
  }
  else
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
  }
}
 8002b62:	0018      	movs	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	b006      	add	sp, #24
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	46c0      	nop			@ (mov r8, r8)
 8002b6c:	00008001 	.word	0x00008001
 8002b70:	ffff7fff 	.word	0xffff7fff
 8002b74:	080040cf 	.word	0x080040cf
 8002b78:	08002cf9 	.word	0x08002cf9

08002b7c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d005      	beq.n	8002ba8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	68f9      	ldr	r1, [r7, #12]
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	4798      	blx	r3
  }
}
 8002ba8:	46c0      	nop			@ (mov r8, r8)
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b004      	add	sp, #16
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	0a1b      	lsrs	r3, r3, #8
 8002bcc:	001a      	movs	r2, r3
 8002bce:	2301      	movs	r3, #1
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d010      	beq.n	8002bf6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	09db      	lsrs	r3, r3, #7
 8002bd8:	001a      	movs	r2, r3
 8002bda:	2301      	movs	r3, #1
 8002bdc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002bde:	d00a      	beq.n	8002bf6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be4:	2201      	movs	r2, #1
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2280      	movs	r2, #128	@ 0x80
 8002bf2:	0052      	lsls	r2, r2, #1
 8002bf4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	0a9b      	lsrs	r3, r3, #10
 8002bfa:	001a      	movs	r2, r3
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d010      	beq.n	8002c24 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	09db      	lsrs	r3, r3, #7
 8002c06:	001a      	movs	r2, r3
 8002c08:	2301      	movs	r3, #1
 8002c0a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002c0c:	d00a      	beq.n	8002c24 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c12:	2208      	movs	r2, #8
 8002c14:	431a      	orrs	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2280      	movs	r2, #128	@ 0x80
 8002c20:	00d2      	lsls	r2, r2, #3
 8002c22:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	0a5b      	lsrs	r3, r3, #9
 8002c28:	001a      	movs	r2, r3
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d010      	beq.n	8002c52 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	09db      	lsrs	r3, r3, #7
 8002c34:	001a      	movs	r2, r3
 8002c36:	2301      	movs	r3, #1
 8002c38:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002c3a:	d00a      	beq.n	8002c52 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c40:	2202      	movs	r2, #2
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2280      	movs	r2, #128	@ 0x80
 8002c4e:	0092      	lsls	r2, r2, #2
 8002c50:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c56:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	220b      	movs	r2, #11
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d005      	beq.n	8002c6c <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	0011      	movs	r1, r2
 8002c66:	0018      	movs	r0, r3
 8002c68:	f001 f8a6 	bl	8003db8 <I2C_ITError>
  }
}
 8002c6c:	46c0      	nop			@ (mov r8, r8)
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	b006      	add	sp, #24
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002c7c:	46c0      	nop			@ (mov r8, r8)
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	b002      	add	sp, #8
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002c8c:	46c0      	nop			@ (mov r8, r8)
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	b002      	add	sp, #8
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002c9c:	46c0      	nop			@ (mov r8, r8)
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	b002      	add	sp, #8
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002cac:	46c0      	nop			@ (mov r8, r8)
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b002      	add	sp, #8
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002cbc:	46c0      	nop			@ (mov r8, r8)
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b002      	add	sp, #8
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002ccc:	46c0      	nop			@ (mov r8, r8)
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b002      	add	sp, #8
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002cdc:	46c0      	nop			@ (mov r8, r8)
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	b002      	add	sp, #8
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b002      	add	sp, #8
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d08:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2240      	movs	r2, #64	@ 0x40
 8002d12:	5c9b      	ldrb	r3, [r3, r2]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <I2C_Slave_ISR_IT+0x24>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e0fb      	b.n	8002f14 <I2C_Slave_ISR_IT+0x21c>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2240      	movs	r2, #64	@ 0x40
 8002d20:	2101      	movs	r1, #1
 8002d22:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	095b      	lsrs	r3, r3, #5
 8002d28:	001a      	movs	r2, r3
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d00c      	beq.n	8002d4a <I2C_Slave_ISR_IT+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	001a      	movs	r2, r3
 8002d36:	2301      	movs	r3, #1
 8002d38:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d3a:	d006      	beq.n	8002d4a <I2C_Slave_ISR_IT+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	0011      	movs	r1, r2
 8002d42:	0018      	movs	r0, r3
 8002d44:	f000 fe4e 	bl	80039e4 <I2C_ITSlaveCplt>
 8002d48:	e0df      	b.n	8002f0a <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	091b      	lsrs	r3, r3, #4
 8002d4e:	001a      	movs	r2, r3
 8002d50:	2301      	movs	r3, #1
 8002d52:	4013      	ands	r3, r2
 8002d54:	d054      	beq.n	8002e00 <I2C_Slave_ISR_IT+0x108>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	091b      	lsrs	r3, r3, #4
 8002d5a:	001a      	movs	r2, r3
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002d60:	d04e      	beq.n	8002e00 <I2C_Slave_ISR_IT+0x108>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d12d      	bne.n	8002dc8 <I2C_Slave_ISR_IT+0xd0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2241      	movs	r2, #65	@ 0x41
 8002d70:	5c9b      	ldrb	r3, [r3, r2]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b28      	cmp	r3, #40	@ 0x28
 8002d76:	d10b      	bne.n	8002d90 <I2C_Slave_ISR_IT+0x98>
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	2380      	movs	r3, #128	@ 0x80
 8002d7c:	049b      	lsls	r3, r3, #18
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d106      	bne.n	8002d90 <I2C_Slave_ISR_IT+0x98>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	0011      	movs	r1, r2
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f000 ffbb 	bl	8003d04 <I2C_ITListenCplt>
 8002d8e:	e036      	b.n	8002dfe <I2C_Slave_ISR_IT+0x106>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2241      	movs	r2, #65	@ 0x41
 8002d94:	5c9b      	ldrb	r3, [r3, r2]
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b29      	cmp	r3, #41	@ 0x29
 8002d9a:	d110      	bne.n	8002dbe <I2C_Slave_ISR_IT+0xc6>
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	4a5f      	ldr	r2, [pc, #380]	@ (8002f1c <I2C_Slave_ISR_IT+0x224>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d00c      	beq.n	8002dbe <I2C_Slave_ISR_IT+0xc6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2210      	movs	r2, #16
 8002daa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	0018      	movs	r0, r3
 8002db0:	f001 f92d 	bl	800400e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	0018      	movs	r0, r3
 8002db8:	f000 fcdc 	bl	8003774 <I2C_ITSlaveSeqCplt>
 8002dbc:	e01f      	b.n	8002dfe <I2C_Slave_ISR_IT+0x106>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2210      	movs	r2, #16
 8002dc4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002dc6:	e09d      	b.n	8002f04 <I2C_Slave_ISR_IT+0x20c>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2210      	movs	r2, #16
 8002dce:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd4:	2204      	movs	r2, #4
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d005      	beq.n	8002dee <I2C_Slave_ISR_IT+0xf6>
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	2380      	movs	r3, #128	@ 0x80
 8002de6:	045b      	lsls	r3, r3, #17
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d000      	beq.n	8002dee <I2C_Slave_ISR_IT+0xf6>
 8002dec:	e08a      	b.n	8002f04 <I2C_Slave_ISR_IT+0x20c>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	0011      	movs	r1, r2
 8002df6:	0018      	movs	r0, r3
 8002df8:	f000 ffde 	bl	8003db8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002dfc:	e082      	b.n	8002f04 <I2C_Slave_ISR_IT+0x20c>
 8002dfe:	e081      	b.n	8002f04 <I2C_Slave_ISR_IT+0x20c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	089b      	lsrs	r3, r3, #2
 8002e04:	001a      	movs	r2, r3
 8002e06:	2301      	movs	r3, #1
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d031      	beq.n	8002e70 <I2C_Slave_ISR_IT+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	089b      	lsrs	r3, r3, #2
 8002e10:	001a      	movs	r2, r3
 8002e12:	2301      	movs	r3, #1
 8002e14:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002e16:	d02b      	beq.n	8002e70 <I2C_Slave_ISR_IT+0x178>
  {
    if (hi2c->XferCount > 0U)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d018      	beq.n	8002e54 <I2C_Slave_ISR_IT+0x15c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d154      	bne.n	8002f08 <I2C_Slave_ISR_IT+0x210>
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	4a2e      	ldr	r2, [pc, #184]	@ (8002f1c <I2C_Slave_ISR_IT+0x224>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d050      	beq.n	8002f08 <I2C_Slave_ISR_IT+0x210>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f000 fc83 	bl	8003774 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002e6e:	e04b      	b.n	8002f08 <I2C_Slave_ISR_IT+0x210>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	08db      	lsrs	r3, r3, #3
 8002e74:	001a      	movs	r2, r3
 8002e76:	2301      	movs	r3, #1
 8002e78:	4013      	ands	r3, r2
 8002e7a:	d00c      	beq.n	8002e96 <I2C_Slave_ISR_IT+0x19e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	08db      	lsrs	r3, r3, #3
 8002e80:	001a      	movs	r2, r3
 8002e82:	2301      	movs	r3, #1
 8002e84:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002e86:	d006      	beq.n	8002e96 <I2C_Slave_ISR_IT+0x19e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	0011      	movs	r1, r2
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f000 fb8a 	bl	80035a8 <I2C_ITAddrCplt>
 8002e94:	e039      	b.n	8002f0a <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	085b      	lsrs	r3, r3, #1
 8002e9a:	001a      	movs	r2, r3
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d033      	beq.n	8002f0a <I2C_Slave_ISR_IT+0x212>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	085b      	lsrs	r3, r3, #1
 8002ea6:	001a      	movs	r2, r3
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002eac:	d02d      	beq.n	8002f0a <I2C_Slave_ISR_IT+0x212>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d018      	beq.n	8002eea <I2C_Slave_ISR_IT+0x1f2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ebc:	781a      	ldrb	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec8:	1c5a      	adds	r2, r3, #1
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002ee8:	e00f      	b.n	8002f0a <I2C_Slave_ISR_IT+0x212>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	2380      	movs	r3, #128	@ 0x80
 8002eee:	045b      	lsls	r3, r3, #17
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d002      	beq.n	8002efa <I2C_Slave_ISR_IT+0x202>
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d107      	bne.n	8002f0a <I2C_Slave_ISR_IT+0x212>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	0018      	movs	r0, r3
 8002efe:	f000 fc39 	bl	8003774 <I2C_ITSlaveSeqCplt>
 8002f02:	e002      	b.n	8002f0a <I2C_Slave_ISR_IT+0x212>
    if (hi2c->XferCount == 0U)
 8002f04:	46c0      	nop			@ (mov r8, r8)
 8002f06:	e000      	b.n	8002f0a <I2C_Slave_ISR_IT+0x212>
    if ((hi2c->XferCount == 0U) && \
 8002f08:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2240      	movs	r2, #64	@ 0x40
 8002f0e:	2100      	movs	r1, #0
 8002f10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	0018      	movs	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b006      	add	sp, #24
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	ffff0000 	.word	0xffff0000

08002f20 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002f20:	b590      	push	{r4, r7, lr}
 8002f22:	b089      	sub	sp, #36	@ 0x24
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2240      	movs	r2, #64	@ 0x40
 8002f30:	5c9b      	ldrb	r3, [r3, r2]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <I2C_Master_ISR_DMA+0x1a>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e0f7      	b.n	800312a <I2C_Master_ISR_DMA+0x20a>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2240      	movs	r2, #64	@ 0x40
 8002f3e:	2101      	movs	r1, #1
 8002f40:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	091b      	lsrs	r3, r3, #4
 8002f46:	001a      	movs	r2, r3
 8002f48:	2301      	movs	r3, #1
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	d019      	beq.n	8002f82 <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	091b      	lsrs	r3, r3, #4
 8002f52:	001a      	movs	r2, r3
 8002f54:	2301      	movs	r3, #1
 8002f56:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002f58:	d013      	beq.n	8002f82 <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2210      	movs	r2, #16
 8002f60:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f66:	2204      	movs	r2, #4
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2120      	movs	r1, #32
 8002f72:	0018      	movs	r0, r3
 8002f74:	f001 f904 	bl	8004180 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f001 f847 	bl	800400e <I2C_Flush_TXDR>
 8002f80:	e0ce      	b.n	8003120 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	09db      	lsrs	r3, r3, #7
 8002f86:	001a      	movs	r2, r3
 8002f88:	2301      	movs	r3, #1
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d100      	bne.n	8002f90 <I2C_Master_ISR_DMA+0x70>
 8002f8e:	e07e      	b.n	800308e <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	099b      	lsrs	r3, r3, #6
 8002f94:	001a      	movs	r2, r3
 8002f96:	2301      	movs	r3, #1
 8002f98:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002f9a:	d100      	bne.n	8002f9e <I2C_Master_ISR_DMA+0x7e>
 8002f9c:	e077      	b.n	800308e <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2140      	movs	r1, #64	@ 0x40
 8002faa:	438a      	bics	r2, r1
 8002fac:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d055      	beq.n	8003064 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	2312      	movs	r3, #18
 8002fc2:	18fb      	adds	r3, r7, r3
 8002fc4:	0592      	lsls	r2, r2, #22
 8002fc6:	0d92      	lsrs	r2, r2, #22
 8002fc8:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2bff      	cmp	r3, #255	@ 0xff
 8002fd2:	d906      	bls.n	8002fe2 <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	22ff      	movs	r2, #255	@ 0xff
 8002fd8:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8002fda:	2380      	movs	r3, #128	@ 0x80
 8002fdc:	045b      	lsls	r3, r3, #17
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	e010      	b.n	8003004 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff0:	4a50      	ldr	r2, [pc, #320]	@ (8003134 <I2C_Master_ISR_DMA+0x214>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d003      	beq.n	8002ffe <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	e002      	b.n	8003004 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002ffe:	2380      	movs	r3, #128	@ 0x80
 8003000:	049b      	lsls	r3, r3, #18
 8003002:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003008:	b2da      	uxtb	r2, r3
 800300a:	697c      	ldr	r4, [r7, #20]
 800300c:	2312      	movs	r3, #18
 800300e:	18fb      	adds	r3, r7, r3
 8003010:	8819      	ldrh	r1, [r3, #0]
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	2300      	movs	r3, #0
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	0023      	movs	r3, r4
 800301a:	f001 f877 	bl	800410c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	b29a      	uxth	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2241      	movs	r2, #65	@ 0x41
 8003034:	5c9b      	ldrb	r3, [r3, r2]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b22      	cmp	r3, #34	@ 0x22
 800303a:	d109      	bne.n	8003050 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2180      	movs	r1, #128	@ 0x80
 8003048:	0209      	lsls	r1, r1, #8
 800304a:	430a      	orrs	r2, r1
 800304c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800304e:	e067      	b.n	8003120 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2180      	movs	r1, #128	@ 0x80
 800305c:	01c9      	lsls	r1, r1, #7
 800305e:	430a      	orrs	r2, r1
 8003060:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003062:	e05d      	b.n	8003120 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	2380      	movs	r3, #128	@ 0x80
 800306c:	049b      	lsls	r3, r3, #18
 800306e:	401a      	ands	r2, r3
 8003070:	2380      	movs	r3, #128	@ 0x80
 8003072:	049b      	lsls	r3, r3, #18
 8003074:	429a      	cmp	r2, r3
 8003076:	d004      	beq.n	8003082 <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	0018      	movs	r0, r3
 800307c:	f000 fb38 	bl	80036f0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003080:	e04e      	b.n	8003120 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2140      	movs	r1, #64	@ 0x40
 8003086:	0018      	movs	r0, r3
 8003088:	f000 fe96 	bl	8003db8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800308c:	e048      	b.n	8003120 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	099b      	lsrs	r3, r3, #6
 8003092:	001a      	movs	r2, r3
 8003094:	2301      	movs	r3, #1
 8003096:	4013      	ands	r3, r2
 8003098:	d02e      	beq.n	80030f8 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	099b      	lsrs	r3, r3, #6
 800309e:	001a      	movs	r2, r3
 80030a0:	2301      	movs	r3, #1
 80030a2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80030a4:	d028      	beq.n	80030f8 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d11d      	bne.n	80030ec <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	2380      	movs	r3, #128	@ 0x80
 80030b8:	049b      	lsls	r3, r3, #18
 80030ba:	401a      	ands	r2, r3
 80030bc:	2380      	movs	r3, #128	@ 0x80
 80030be:	049b      	lsls	r3, r3, #18
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d02c      	beq.n	800311e <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c8:	4a1a      	ldr	r2, [pc, #104]	@ (8003134 <I2C_Master_ISR_DMA+0x214>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d109      	bne.n	80030e2 <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2180      	movs	r1, #128	@ 0x80
 80030da:	01c9      	lsls	r1, r1, #7
 80030dc:	430a      	orrs	r2, r1
 80030de:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80030e0:	e01d      	b.n	800311e <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	0018      	movs	r0, r3
 80030e6:	f000 fb03 	bl	80036f0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80030ea:	e018      	b.n	800311e <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2140      	movs	r1, #64	@ 0x40
 80030f0:	0018      	movs	r0, r3
 80030f2:	f000 fe61 	bl	8003db8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80030f6:	e012      	b.n	800311e <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	095b      	lsrs	r3, r3, #5
 80030fc:	001a      	movs	r2, r3
 80030fe:	2301      	movs	r3, #1
 8003100:	4013      	ands	r3, r2
 8003102:	d00d      	beq.n	8003120 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	001a      	movs	r2, r3
 800310a:	2301      	movs	r3, #1
 800310c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800310e:	d007      	beq.n	8003120 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	0011      	movs	r1, r2
 8003116:	0018      	movs	r0, r3
 8003118:	f000 fb92 	bl	8003840 <I2C_ITMasterCplt>
 800311c:	e000      	b.n	8003120 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 800311e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2240      	movs	r2, #64	@ 0x40
 8003124:	2100      	movs	r1, #0
 8003126:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	0018      	movs	r0, r3
 800312c:	46bd      	mov	sp, r7
 800312e:	b007      	add	sp, #28
 8003130:	bd90      	pop	{r4, r7, pc}
 8003132:	46c0      	nop			@ (mov r8, r8)
 8003134:	ffff0000 	.word	0xffff0000

08003138 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8003138:	b590      	push	{r4, r7, lr}
 800313a:	b089      	sub	sp, #36	@ 0x24
 800313c:	af02      	add	r7, sp, #8
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003144:	4b9a      	ldr	r3, [pc, #616]	@ (80033b0 <I2C_Mem_ISR_DMA+0x278>)
 8003146:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2240      	movs	r2, #64	@ 0x40
 800314c:	5c9b      	ldrb	r3, [r3, r2]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <I2C_Mem_ISR_DMA+0x1e>
 8003152:	2302      	movs	r3, #2
 8003154:	e127      	b.n	80033a6 <I2C_Mem_ISR_DMA+0x26e>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2240      	movs	r2, #64	@ 0x40
 800315a:	2101      	movs	r1, #1
 800315c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	091b      	lsrs	r3, r3, #4
 8003162:	001a      	movs	r2, r3
 8003164:	2301      	movs	r3, #1
 8003166:	4013      	ands	r3, r2
 8003168:	d019      	beq.n	800319e <I2C_Mem_ISR_DMA+0x66>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	091b      	lsrs	r3, r3, #4
 800316e:	001a      	movs	r2, r3
 8003170:	2301      	movs	r3, #1
 8003172:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003174:	d013      	beq.n	800319e <I2C_Mem_ISR_DMA+0x66>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2210      	movs	r2, #16
 800317c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003182:	2204      	movs	r2, #4
 8003184:	431a      	orrs	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2120      	movs	r1, #32
 800318e:	0018      	movs	r0, r3
 8003190:	f000 fff6 	bl	8004180 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	0018      	movs	r0, r3
 8003198:	f000 ff39 	bl	800400e <I2C_Flush_TXDR>
 800319c:	e0fe      	b.n	800339c <I2C_Mem_ISR_DMA+0x264>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	085b      	lsrs	r3, r3, #1
 80031a2:	001a      	movs	r2, r3
 80031a4:	2301      	movs	r3, #1
 80031a6:	4013      	ands	r3, r2
 80031a8:	d00f      	beq.n	80031ca <I2C_Mem_ISR_DMA+0x92>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	085b      	lsrs	r3, r3, #1
 80031ae:	001a      	movs	r2, r3
 80031b0:	2301      	movs	r3, #1
 80031b2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80031b4:	d009      	beq.n	80031ca <I2C_Mem_ISR_DMA+0x92>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031be:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2201      	movs	r2, #1
 80031c4:	4252      	negs	r2, r2
 80031c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80031c8:	e0e8      	b.n	800339c <I2C_Mem_ISR_DMA+0x264>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	09db      	lsrs	r3, r3, #7
 80031ce:	001a      	movs	r2, r3
 80031d0:	2301      	movs	r3, #1
 80031d2:	4013      	ands	r3, r2
 80031d4:	d065      	beq.n	80032a2 <I2C_Mem_ISR_DMA+0x16a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	099b      	lsrs	r3, r3, #6
 80031da:	001a      	movs	r2, r3
 80031dc:	2301      	movs	r3, #1
 80031de:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80031e0:	d05f      	beq.n	80032a2 <I2C_Mem_ISR_DMA+0x16a>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2101      	movs	r1, #1
 80031e6:	0018      	movs	r0, r3
 80031e8:	f001 f854 	bl	8004294 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2110      	movs	r1, #16
 80031f0:	0018      	movs	r0, r3
 80031f2:	f000 ffc5 	bl	8004180 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d04a      	beq.n	8003296 <I2C_Mem_ISR_DMA+0x15e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003204:	b29b      	uxth	r3, r3
 8003206:	2bff      	cmp	r3, #255	@ 0xff
 8003208:	d910      	bls.n	800322c <I2C_Mem_ISR_DMA+0xf4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	22ff      	movs	r2, #255	@ 0xff
 800320e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003214:	b299      	uxth	r1, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800321a:	b2da      	uxtb	r2, r3
 800321c:	2380      	movs	r3, #128	@ 0x80
 800321e:	045b      	lsls	r3, r3, #17
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	2400      	movs	r4, #0
 8003224:	9400      	str	r4, [sp, #0]
 8003226:	f000 ff71 	bl	800410c <I2C_TransferConfig>
 800322a:	e011      	b.n	8003250 <I2C_Mem_ISR_DMA+0x118>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800323a:	b299      	uxth	r1, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003240:	b2da      	uxtb	r2, r3
 8003242:	2380      	movs	r3, #128	@ 0x80
 8003244:	049b      	lsls	r3, r3, #18
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	2400      	movs	r4, #0
 800324a:	9400      	str	r4, [sp, #0]
 800324c:	f000 ff5e 	bl	800410c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2241      	movs	r2, #65	@ 0x41
 8003266:	5c9b      	ldrb	r3, [r3, r2]
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b22      	cmp	r3, #34	@ 0x22
 800326c:	d109      	bne.n	8003282 <I2C_Mem_ISR_DMA+0x14a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2180      	movs	r1, #128	@ 0x80
 800327a:	0209      	lsls	r1, r1, #8
 800327c:	430a      	orrs	r2, r1
 800327e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003280:	e08c      	b.n	800339c <I2C_Mem_ISR_DMA+0x264>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2180      	movs	r1, #128	@ 0x80
 800328e:	01c9      	lsls	r1, r1, #7
 8003290:	430a      	orrs	r2, r1
 8003292:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003294:	e082      	b.n	800339c <I2C_Mem_ISR_DMA+0x264>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2140      	movs	r1, #64	@ 0x40
 800329a:	0018      	movs	r0, r3
 800329c:	f000 fd8c 	bl	8003db8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80032a0:	e07c      	b.n	800339c <I2C_Mem_ISR_DMA+0x264>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	099b      	lsrs	r3, r3, #6
 80032a6:	001a      	movs	r2, r3
 80032a8:	2301      	movs	r3, #1
 80032aa:	4013      	ands	r3, r2
 80032ac:	d064      	beq.n	8003378 <I2C_Mem_ISR_DMA+0x240>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	099b      	lsrs	r3, r3, #6
 80032b2:	001a      	movs	r2, r3
 80032b4:	2301      	movs	r3, #1
 80032b6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80032b8:	d05e      	beq.n	8003378 <I2C_Mem_ISR_DMA+0x240>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2101      	movs	r1, #1
 80032be:	0018      	movs	r0, r3
 80032c0:	f000 ffe8 	bl	8004294 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2110      	movs	r1, #16
 80032c8:	0018      	movs	r0, r3
 80032ca:	f000 ff59 	bl	8004180 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2241      	movs	r2, #65	@ 0x41
 80032d2:	5c9b      	ldrb	r3, [r3, r2]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b22      	cmp	r3, #34	@ 0x22
 80032d8:	d101      	bne.n	80032de <I2C_Mem_ISR_DMA+0x1a6>
    {
      direction = I2C_GENERATE_START_READ;
 80032da:	4b36      	ldr	r3, [pc, #216]	@ (80033b4 <I2C_Mem_ISR_DMA+0x27c>)
 80032dc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	2bff      	cmp	r3, #255	@ 0xff
 80032e6:	d911      	bls.n	800330c <I2C_Mem_ISR_DMA+0x1d4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	22ff      	movs	r2, #255	@ 0xff
 80032ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032f2:	b299      	uxth	r1, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	2380      	movs	r3, #128	@ 0x80
 80032fc:	045c      	lsls	r4, r3, #17
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	0023      	movs	r3, r4
 8003306:	f000 ff01 	bl	800410c <I2C_TransferConfig>
 800330a:	e012      	b.n	8003332 <I2C_Mem_ISR_DMA+0x1fa>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800331a:	b299      	uxth	r1, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003320:	b2da      	uxtb	r2, r3
 8003322:	2380      	movs	r3, #128	@ 0x80
 8003324:	049c      	lsls	r4, r3, #18
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	0023      	movs	r3, r4
 800332e:	f000 feed 	bl	800410c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	b29a      	uxth	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2241      	movs	r2, #65	@ 0x41
 8003348:	5c9b      	ldrb	r3, [r3, r2]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b22      	cmp	r3, #34	@ 0x22
 800334e:	d109      	bne.n	8003364 <I2C_Mem_ISR_DMA+0x22c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2180      	movs	r1, #128	@ 0x80
 800335c:	0209      	lsls	r1, r1, #8
 800335e:	430a      	orrs	r2, r1
 8003360:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003362:	e01b      	b.n	800339c <I2C_Mem_ISR_DMA+0x264>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2180      	movs	r1, #128	@ 0x80
 8003370:	01c9      	lsls	r1, r1, #7
 8003372:	430a      	orrs	r2, r1
 8003374:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003376:	e011      	b.n	800339c <I2C_Mem_ISR_DMA+0x264>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	095b      	lsrs	r3, r3, #5
 800337c:	001a      	movs	r2, r3
 800337e:	2301      	movs	r3, #1
 8003380:	4013      	ands	r3, r2
 8003382:	d00b      	beq.n	800339c <I2C_Mem_ISR_DMA+0x264>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	095b      	lsrs	r3, r3, #5
 8003388:	001a      	movs	r2, r3
 800338a:	2301      	movs	r3, #1
 800338c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800338e:	d005      	beq.n	800339c <I2C_Mem_ISR_DMA+0x264>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	0011      	movs	r1, r2
 8003396:	0018      	movs	r0, r3
 8003398:	f000 fa52 	bl	8003840 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2240      	movs	r2, #64	@ 0x40
 80033a0:	2100      	movs	r1, #0
 80033a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	0018      	movs	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b007      	add	sp, #28
 80033ac:	bd90      	pop	{r4, r7, pc}
 80033ae:	46c0      	nop			@ (mov r8, r8)
 80033b0:	80002000 	.word	0x80002000
 80033b4:	80002400 	.word	0x80002400

080033b8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2240      	movs	r2, #64	@ 0x40
 80033d2:	5c9b      	ldrb	r3, [r3, r2]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <I2C_Slave_ISR_DMA+0x24>
 80033d8:	2302      	movs	r3, #2
 80033da:	e0de      	b.n	800359a <I2C_Slave_ISR_DMA+0x1e2>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2240      	movs	r2, #64	@ 0x40
 80033e0:	2101      	movs	r1, #1
 80033e2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	095b      	lsrs	r3, r3, #5
 80033e8:	001a      	movs	r2, r3
 80033ea:	2301      	movs	r3, #1
 80033ec:	4013      	ands	r3, r2
 80033ee:	d00c      	beq.n	800340a <I2C_Slave_ISR_DMA+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	001a      	movs	r2, r3
 80033f6:	2301      	movs	r3, #1
 80033f8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80033fa:	d006      	beq.n	800340a <I2C_Slave_ISR_DMA+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	0011      	movs	r1, r2
 8003402:	0018      	movs	r0, r3
 8003404:	f000 faee 	bl	80039e4 <I2C_ITSlaveCplt>
 8003408:	e0c2      	b.n	8003590 <I2C_Slave_ISR_DMA+0x1d8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	091b      	lsrs	r3, r3, #4
 800340e:	001a      	movs	r2, r3
 8003410:	2301      	movs	r3, #1
 8003412:	4013      	ands	r3, r2
 8003414:	d100      	bne.n	8003418 <I2C_Slave_ISR_DMA+0x60>
 8003416:	e0a9      	b.n	800356c <I2C_Slave_ISR_DMA+0x1b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	091b      	lsrs	r3, r3, #4
 800341c:	001a      	movs	r2, r3
 800341e:	2301      	movs	r3, #1
 8003420:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003422:	d100      	bne.n	8003426 <I2C_Slave_ISR_DMA+0x6e>
 8003424:	e0a2      	b.n	800356c <I2C_Slave_ISR_DMA+0x1b4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	0b9b      	lsrs	r3, r3, #14
 800342a:	001a      	movs	r2, r3
 800342c:	2301      	movs	r3, #1
 800342e:	4013      	ands	r3, r2
 8003430:	d106      	bne.n	8003440 <I2C_Slave_ISR_DMA+0x88>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	0bdb      	lsrs	r3, r3, #15
 8003436:	001a      	movs	r2, r3
 8003438:	2301      	movs	r3, #1
 800343a:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800343c:	d100      	bne.n	8003440 <I2C_Slave_ISR_DMA+0x88>
 800343e:	e08e      	b.n	800355e <I2C_Slave_ISR_DMA+0x1a6>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00d      	beq.n	8003464 <I2C_Slave_ISR_DMA+0xac>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	0bdb      	lsrs	r3, r3, #15
 800344c:	001a      	movs	r2, r3
 800344e:	2301      	movs	r3, #1
 8003450:	4013      	ands	r3, r2
 8003452:	d007      	beq.n	8003464 <I2C_Slave_ISR_DMA+0xac>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <I2C_Slave_ISR_DMA+0xac>
          {
            treatdmanack = 1U;
 8003460:	2301      	movs	r3, #1
 8003462:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00d      	beq.n	8003488 <I2C_Slave_ISR_DMA+0xd0>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	0b9b      	lsrs	r3, r3, #14
 8003470:	001a      	movs	r2, r3
 8003472:	2301      	movs	r3, #1
 8003474:	4013      	ands	r3, r2
 8003476:	d007      	beq.n	8003488 <I2C_Slave_ISR_DMA+0xd0>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <I2C_Slave_ISR_DMA+0xd0>
          {
            treatdmanack = 1U;
 8003484:	2301      	movs	r3, #1
 8003486:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d12d      	bne.n	80034ea <I2C_Slave_ISR_DMA+0x132>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2241      	movs	r2, #65	@ 0x41
 8003492:	5c9b      	ldrb	r3, [r3, r2]
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b28      	cmp	r3, #40	@ 0x28
 8003498:	d10b      	bne.n	80034b2 <I2C_Slave_ISR_DMA+0xfa>
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	2380      	movs	r3, #128	@ 0x80
 800349e:	049b      	lsls	r3, r3, #18
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d106      	bne.n	80034b2 <I2C_Slave_ISR_DMA+0xfa>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	0011      	movs	r1, r2
 80034aa:	0018      	movs	r0, r3
 80034ac:	f000 fc2a 	bl	8003d04 <I2C_ITListenCplt>
 80034b0:	e054      	b.n	800355c <I2C_Slave_ISR_DMA+0x1a4>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2241      	movs	r2, #65	@ 0x41
 80034b6:	5c9b      	ldrb	r3, [r3, r2]
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b29      	cmp	r3, #41	@ 0x29
 80034bc:	d110      	bne.n	80034e0 <I2C_Slave_ISR_DMA+0x128>
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	4a38      	ldr	r2, [pc, #224]	@ (80035a4 <I2C_Slave_ISR_DMA+0x1ec>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d00c      	beq.n	80034e0 <I2C_Slave_ISR_DMA+0x128>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2210      	movs	r2, #16
 80034cc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	0018      	movs	r0, r3
 80034d2:	f000 fd9c 	bl	800400e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	0018      	movs	r0, r3
 80034da:	f000 f94b 	bl	8003774 <I2C_ITSlaveSeqCplt>
 80034de:	e03d      	b.n	800355c <I2C_Slave_ISR_DMA+0x1a4>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2210      	movs	r2, #16
 80034e6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80034e8:	e03e      	b.n	8003568 <I2C_Slave_ISR_DMA+0x1b0>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2210      	movs	r2, #16
 80034f0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f6:	2204      	movs	r2, #4
 80034f8:	431a      	orrs	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80034fe:	2317      	movs	r3, #23
 8003500:	18fb      	adds	r3, r7, r3
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	2141      	movs	r1, #65	@ 0x41
 8003506:	5c52      	ldrb	r2, [r2, r1]
 8003508:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d004      	beq.n	800351a <I2C_Slave_ISR_DMA+0x162>
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	2380      	movs	r3, #128	@ 0x80
 8003514:	045b      	lsls	r3, r3, #17
 8003516:	429a      	cmp	r2, r3
 8003518:	d126      	bne.n	8003568 <I2C_Slave_ISR_DMA+0x1b0>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800351a:	2217      	movs	r2, #23
 800351c:	18bb      	adds	r3, r7, r2
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b21      	cmp	r3, #33	@ 0x21
 8003522:	d003      	beq.n	800352c <I2C_Slave_ISR_DMA+0x174>
 8003524:	18bb      	adds	r3, r7, r2
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b29      	cmp	r3, #41	@ 0x29
 800352a:	d103      	bne.n	8003534 <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2221      	movs	r2, #33	@ 0x21
 8003530:	631a      	str	r2, [r3, #48]	@ 0x30
 8003532:	e00b      	b.n	800354c <I2C_Slave_ISR_DMA+0x194>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003534:	2217      	movs	r2, #23
 8003536:	18bb      	adds	r3, r7, r2
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b22      	cmp	r3, #34	@ 0x22
 800353c:	d003      	beq.n	8003546 <I2C_Slave_ISR_DMA+0x18e>
 800353e:	18bb      	adds	r3, r7, r2
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b2a      	cmp	r3, #42	@ 0x2a
 8003544:	d102      	bne.n	800354c <I2C_Slave_ISR_DMA+0x194>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2222      	movs	r2, #34	@ 0x22
 800354a:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	0011      	movs	r1, r2
 8003554:	0018      	movs	r0, r3
 8003556:	f000 fc2f 	bl	8003db8 <I2C_ITError>
      if (treatdmanack == 1U)
 800355a:	e005      	b.n	8003568 <I2C_Slave_ISR_DMA+0x1b0>
 800355c:	e004      	b.n	8003568 <I2C_Slave_ISR_DMA+0x1b0>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2210      	movs	r2, #16
 8003564:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003566:	e013      	b.n	8003590 <I2C_Slave_ISR_DMA+0x1d8>
      if (treatdmanack == 1U)
 8003568:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800356a:	e011      	b.n	8003590 <I2C_Slave_ISR_DMA+0x1d8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	08db      	lsrs	r3, r3, #3
 8003570:	001a      	movs	r2, r3
 8003572:	2301      	movs	r3, #1
 8003574:	4013      	ands	r3, r2
 8003576:	d00b      	beq.n	8003590 <I2C_Slave_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	08db      	lsrs	r3, r3, #3
 800357c:	001a      	movs	r2, r3
 800357e:	2301      	movs	r3, #1
 8003580:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003582:	d005      	beq.n	8003590 <I2C_Slave_ISR_DMA+0x1d8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	0011      	movs	r1, r2
 800358a:	0018      	movs	r0, r3
 800358c:	f000 f80c 	bl	80035a8 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2240      	movs	r2, #64	@ 0x40
 8003594:	2100      	movs	r1, #0
 8003596:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	0018      	movs	r0, r3
 800359c:	46bd      	mov	sp, r7
 800359e:	b008      	add	sp, #32
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	46c0      	nop			@ (mov r8, r8)
 80035a4:	ffff0000 	.word	0xffff0000

080035a8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80035a8:	b5b0      	push	{r4, r5, r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2241      	movs	r2, #65	@ 0x41
 80035b6:	5c9b      	ldrb	r3, [r3, r2]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	001a      	movs	r2, r3
 80035bc:	2328      	movs	r3, #40	@ 0x28
 80035be:	4013      	ands	r3, r2
 80035c0:	2b28      	cmp	r3, #40	@ 0x28
 80035c2:	d000      	beq.n	80035c6 <I2C_ITAddrCplt+0x1e>
 80035c4:	e088      	b.n	80036d8 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	0c1b      	lsrs	r3, r3, #16
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	250f      	movs	r5, #15
 80035d2:	197b      	adds	r3, r7, r5
 80035d4:	2101      	movs	r1, #1
 80035d6:	400a      	ands	r2, r1
 80035d8:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	0c1b      	lsrs	r3, r3, #16
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	200c      	movs	r0, #12
 80035e6:	183b      	adds	r3, r7, r0
 80035e8:	21fe      	movs	r1, #254	@ 0xfe
 80035ea:	400a      	ands	r2, r1
 80035ec:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	240a      	movs	r4, #10
 80035f8:	193b      	adds	r3, r7, r4
 80035fa:	0592      	lsls	r2, r2, #22
 80035fc:	0d92      	lsrs	r2, r2, #22
 80035fe:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	b29a      	uxth	r2, r3
 8003608:	2308      	movs	r3, #8
 800360a:	18fb      	adds	r3, r7, r3
 800360c:	21fe      	movs	r1, #254	@ 0xfe
 800360e:	400a      	ands	r2, r1
 8003610:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	2b02      	cmp	r3, #2
 8003618:	d148      	bne.n	80036ac <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800361a:	0021      	movs	r1, r4
 800361c:	187b      	adds	r3, r7, r1
 800361e:	881b      	ldrh	r3, [r3, #0]
 8003620:	09db      	lsrs	r3, r3, #7
 8003622:	b29a      	uxth	r2, r3
 8003624:	183b      	adds	r3, r7, r0
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	4053      	eors	r3, r2
 800362a:	b29b      	uxth	r3, r3
 800362c:	001a      	movs	r2, r3
 800362e:	2306      	movs	r3, #6
 8003630:	4013      	ands	r3, r2
 8003632:	d120      	bne.n	8003676 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8003634:	183b      	adds	r3, r7, r0
 8003636:	187a      	adds	r2, r7, r1
 8003638:	8812      	ldrh	r2, [r2, #0]
 800363a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800364a:	2b02      	cmp	r3, #2
 800364c:	d14c      	bne.n	80036e8 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2208      	movs	r2, #8
 800365a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2240      	movs	r2, #64	@ 0x40
 8003660:	2100      	movs	r1, #0
 8003662:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003664:	183b      	adds	r3, r7, r0
 8003666:	881a      	ldrh	r2, [r3, #0]
 8003668:	197b      	adds	r3, r7, r5
 800366a:	7819      	ldrb	r1, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	0018      	movs	r0, r3
 8003670:	f7fc ff9a 	bl	80005a8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003674:	e038      	b.n	80036e8 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8003676:	240c      	movs	r4, #12
 8003678:	193b      	adds	r3, r7, r4
 800367a:	2208      	movs	r2, #8
 800367c:	18ba      	adds	r2, r7, r2
 800367e:	8812      	ldrh	r2, [r2, #0]
 8003680:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003682:	2380      	movs	r3, #128	@ 0x80
 8003684:	021a      	lsls	r2, r3, #8
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	0011      	movs	r1, r2
 800368a:	0018      	movs	r0, r3
 800368c:	f000 fe02 	bl	8004294 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2240      	movs	r2, #64	@ 0x40
 8003694:	2100      	movs	r1, #0
 8003696:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003698:	193b      	adds	r3, r7, r4
 800369a:	881a      	ldrh	r2, [r3, #0]
 800369c:	230f      	movs	r3, #15
 800369e:	18fb      	adds	r3, r7, r3
 80036a0:	7819      	ldrb	r1, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	0018      	movs	r0, r3
 80036a6:	f7fc ff7f 	bl	80005a8 <HAL_I2C_AddrCallback>
}
 80036aa:	e01d      	b.n	80036e8 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80036ac:	2380      	movs	r3, #128	@ 0x80
 80036ae:	021a      	lsls	r2, r3, #8
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	0011      	movs	r1, r2
 80036b4:	0018      	movs	r0, r3
 80036b6:	f000 fded 	bl	8004294 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2240      	movs	r2, #64	@ 0x40
 80036be:	2100      	movs	r1, #0
 80036c0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80036c2:	230c      	movs	r3, #12
 80036c4:	18fb      	adds	r3, r7, r3
 80036c6:	881a      	ldrh	r2, [r3, #0]
 80036c8:	230f      	movs	r3, #15
 80036ca:	18fb      	adds	r3, r7, r3
 80036cc:	7819      	ldrb	r1, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	0018      	movs	r0, r3
 80036d2:	f7fc ff69 	bl	80005a8 <HAL_I2C_AddrCallback>
}
 80036d6:	e007      	b.n	80036e8 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2208      	movs	r2, #8
 80036de:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2240      	movs	r2, #64	@ 0x40
 80036e4:	2100      	movs	r1, #0
 80036e6:	5499      	strb	r1, [r3, r2]
}
 80036e8:	46c0      	nop			@ (mov r8, r8)
 80036ea:	46bd      	mov	sp, r7
 80036ec:	b004      	add	sp, #16
 80036ee:	bdb0      	pop	{r4, r5, r7, pc}

080036f0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2242      	movs	r2, #66	@ 0x42
 80036fc:	2100      	movs	r1, #0
 80036fe:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2241      	movs	r2, #65	@ 0x41
 8003704:	5c9b      	ldrb	r3, [r3, r2]
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b21      	cmp	r3, #33	@ 0x21
 800370a:	d117      	bne.n	800373c <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2241      	movs	r2, #65	@ 0x41
 8003710:	2120      	movs	r1, #32
 8003712:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2211      	movs	r2, #17
 8003718:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2101      	movs	r1, #1
 8003724:	0018      	movs	r0, r3
 8003726:	f000 fdb5 	bl	8004294 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2240      	movs	r2, #64	@ 0x40
 800372e:	2100      	movs	r1, #0
 8003730:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	0018      	movs	r0, r3
 8003736:	f7ff fa9d 	bl	8002c74 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800373a:	e016      	b.n	800376a <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2241      	movs	r2, #65	@ 0x41
 8003740:	2120      	movs	r1, #32
 8003742:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2212      	movs	r2, #18
 8003748:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2102      	movs	r1, #2
 8003754:	0018      	movs	r0, r3
 8003756:	f000 fd9d 	bl	8004294 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2240      	movs	r2, #64	@ 0x40
 800375e:	2100      	movs	r1, #0
 8003760:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	0018      	movs	r0, r3
 8003766:	f7ff fa8d 	bl	8002c84 <HAL_I2C_MasterRxCpltCallback>
}
 800376a:	46c0      	nop			@ (mov r8, r8)
 800376c:	46bd      	mov	sp, r7
 800376e:	b002      	add	sp, #8
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2242      	movs	r2, #66	@ 0x42
 8003788:	2100      	movs	r1, #0
 800378a:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	0b9b      	lsrs	r3, r3, #14
 8003790:	001a      	movs	r2, r3
 8003792:	2301      	movs	r3, #1
 8003794:	4013      	ands	r3, r2
 8003796:	d008      	beq.n	80037aa <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4925      	ldr	r1, [pc, #148]	@ (8003838 <I2C_ITSlaveSeqCplt+0xc4>)
 80037a4:	400a      	ands	r2, r1
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	e00d      	b.n	80037c6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	0bdb      	lsrs	r3, r3, #15
 80037ae:	001a      	movs	r2, r3
 80037b0:	2301      	movs	r3, #1
 80037b2:	4013      	ands	r3, r2
 80037b4:	d007      	beq.n	80037c6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	491e      	ldr	r1, [pc, #120]	@ (800383c <I2C_ITSlaveSeqCplt+0xc8>)
 80037c2:	400a      	ands	r2, r1
 80037c4:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2241      	movs	r2, #65	@ 0x41
 80037ca:	5c9b      	ldrb	r3, [r3, r2]
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b29      	cmp	r3, #41	@ 0x29
 80037d0:	d114      	bne.n	80037fc <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2241      	movs	r2, #65	@ 0x41
 80037d6:	2128      	movs	r1, #40	@ 0x28
 80037d8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2221      	movs	r2, #33	@ 0x21
 80037de:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2101      	movs	r1, #1
 80037e4:	0018      	movs	r0, r3
 80037e6:	f000 fd55 	bl	8004294 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2240      	movs	r2, #64	@ 0x40
 80037ee:	2100      	movs	r1, #0
 80037f0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	0018      	movs	r0, r3
 80037f6:	f7fc fef5 	bl	80005e4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80037fa:	e019      	b.n	8003830 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2241      	movs	r2, #65	@ 0x41
 8003800:	5c9b      	ldrb	r3, [r3, r2]
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b2a      	cmp	r3, #42	@ 0x2a
 8003806:	d113      	bne.n	8003830 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2241      	movs	r2, #65	@ 0x41
 800380c:	2128      	movs	r1, #40	@ 0x28
 800380e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2222      	movs	r2, #34	@ 0x22
 8003814:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2102      	movs	r1, #2
 800381a:	0018      	movs	r0, r3
 800381c:	f000 fd3a 	bl	8004294 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2240      	movs	r2, #64	@ 0x40
 8003824:	2100      	movs	r1, #0
 8003826:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	0018      	movs	r0, r3
 800382c:	f7ff fa32 	bl	8002c94 <HAL_I2C_SlaveRxCpltCallback>
}
 8003830:	46c0      	nop			@ (mov r8, r8)
 8003832:	46bd      	mov	sp, r7
 8003834:	b004      	add	sp, #16
 8003836:	bd80      	pop	{r7, pc}
 8003838:	ffffbfff 	.word	0xffffbfff
 800383c:	ffff7fff 	.word	0xffff7fff

08003840 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2220      	movs	r2, #32
 8003854:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2241      	movs	r2, #65	@ 0x41
 800385a:	5c9b      	ldrb	r3, [r3, r2]
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b21      	cmp	r3, #33	@ 0x21
 8003860:	d108      	bne.n	8003874 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2101      	movs	r1, #1
 8003866:	0018      	movs	r0, r3
 8003868:	f000 fd14 	bl	8004294 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2211      	movs	r2, #17
 8003870:	631a      	str	r2, [r3, #48]	@ 0x30
 8003872:	e00d      	b.n	8003890 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2241      	movs	r2, #65	@ 0x41
 8003878:	5c9b      	ldrb	r3, [r3, r2]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b22      	cmp	r3, #34	@ 0x22
 800387e:	d107      	bne.n	8003890 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2102      	movs	r1, #2
 8003884:	0018      	movs	r0, r3
 8003886:	f000 fd05 	bl	8004294 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2212      	movs	r2, #18
 800388e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4950      	ldr	r1, [pc, #320]	@ (80039dc <I2C_ITMasterCplt+0x19c>)
 800389c:	400a      	ands	r2, r1
 800389e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a4d      	ldr	r2, [pc, #308]	@ (80039e0 <I2C_ITMasterCplt+0x1a0>)
 80038aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	091b      	lsrs	r3, r3, #4
 80038b0:	001a      	movs	r2, r3
 80038b2:	2301      	movs	r3, #1
 80038b4:	4013      	ands	r3, r2
 80038b6:	d009      	beq.n	80038cc <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2210      	movs	r2, #16
 80038be:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c4:	2204      	movs	r2, #4
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2241      	movs	r2, #65	@ 0x41
 80038d0:	5c9b      	ldrb	r3, [r3, r2]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b60      	cmp	r3, #96	@ 0x60
 80038d6:	d10b      	bne.n	80038f0 <I2C_ITMasterCplt+0xb0>
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	089b      	lsrs	r3, r3, #2
 80038dc:	001a      	movs	r2, r3
 80038de:	2301      	movs	r3, #1
 80038e0:	4013      	ands	r3, r2
 80038e2:	d005      	beq.n	80038f0 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80038ee:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	0018      	movs	r0, r3
 80038f4:	f000 fb8b 	bl	800400e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fc:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2241      	movs	r2, #65	@ 0x41
 8003902:	5c9b      	ldrb	r3, [r3, r2]
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b60      	cmp	r3, #96	@ 0x60
 8003908:	d002      	beq.n	8003910 <I2C_ITMasterCplt+0xd0>
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d007      	beq.n	8003920 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	0011      	movs	r1, r2
 8003918:	0018      	movs	r0, r3
 800391a:	f000 fa4d 	bl	8003db8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800391e:	e058      	b.n	80039d2 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2241      	movs	r2, #65	@ 0x41
 8003924:	5c9b      	ldrb	r3, [r3, r2]
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b21      	cmp	r3, #33	@ 0x21
 800392a:	d126      	bne.n	800397a <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2241      	movs	r2, #65	@ 0x41
 8003930:	2120      	movs	r1, #32
 8003932:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2242      	movs	r2, #66	@ 0x42
 800393e:	5c9b      	ldrb	r3, [r3, r2]
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b40      	cmp	r3, #64	@ 0x40
 8003944:	d10c      	bne.n	8003960 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2242      	movs	r2, #66	@ 0x42
 800394a:	2100      	movs	r1, #0
 800394c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2240      	movs	r2, #64	@ 0x40
 8003952:	2100      	movs	r1, #0
 8003954:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	0018      	movs	r0, r3
 800395a:	f7ff f9ab 	bl	8002cb4 <HAL_I2C_MemTxCpltCallback>
}
 800395e:	e038      	b.n	80039d2 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2242      	movs	r2, #66	@ 0x42
 8003964:	2100      	movs	r1, #0
 8003966:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2240      	movs	r2, #64	@ 0x40
 800396c:	2100      	movs	r1, #0
 800396e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	0018      	movs	r0, r3
 8003974:	f7ff f97e 	bl	8002c74 <HAL_I2C_MasterTxCpltCallback>
}
 8003978:	e02b      	b.n	80039d2 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2241      	movs	r2, #65	@ 0x41
 800397e:	5c9b      	ldrb	r3, [r3, r2]
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b22      	cmp	r3, #34	@ 0x22
 8003984:	d125      	bne.n	80039d2 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2241      	movs	r2, #65	@ 0x41
 800398a:	2120      	movs	r1, #32
 800398c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2242      	movs	r2, #66	@ 0x42
 8003998:	5c9b      	ldrb	r3, [r3, r2]
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b40      	cmp	r3, #64	@ 0x40
 800399e:	d10c      	bne.n	80039ba <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2242      	movs	r2, #66	@ 0x42
 80039a4:	2100      	movs	r1, #0
 80039a6:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2240      	movs	r2, #64	@ 0x40
 80039ac:	2100      	movs	r1, #0
 80039ae:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	0018      	movs	r0, r3
 80039b4:	f7ff f986 	bl	8002cc4 <HAL_I2C_MemRxCpltCallback>
}
 80039b8:	e00b      	b.n	80039d2 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2242      	movs	r2, #66	@ 0x42
 80039be:	2100      	movs	r1, #0
 80039c0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2240      	movs	r2, #64	@ 0x40
 80039c6:	2100      	movs	r1, #0
 80039c8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	0018      	movs	r0, r3
 80039ce:	f7ff f959 	bl	8002c84 <HAL_I2C_MasterRxCpltCallback>
}
 80039d2:	46c0      	nop			@ (mov r8, r8)
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b006      	add	sp, #24
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	46c0      	nop			@ (mov r8, r8)
 80039dc:	fe00e800 	.word	0xfe00e800
 80039e0:	ffff0000 	.word	0xffff0000

080039e4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fe:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003a00:	200b      	movs	r0, #11
 8003a02:	183b      	adds	r3, r7, r0
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	2141      	movs	r1, #65	@ 0x41
 8003a08:	5c52      	ldrb	r2, [r2, r1]
 8003a0a:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2220      	movs	r2, #32
 8003a12:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a14:	183b      	adds	r3, r7, r0
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	2b21      	cmp	r3, #33	@ 0x21
 8003a1a:	d003      	beq.n	8003a24 <I2C_ITSlaveCplt+0x40>
 8003a1c:	183b      	adds	r3, r7, r0
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b29      	cmp	r3, #41	@ 0x29
 8003a22:	d109      	bne.n	8003a38 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003a24:	4ab0      	ldr	r2, [pc, #704]	@ (8003ce8 <I2C_ITSlaveCplt+0x304>)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	0011      	movs	r1, r2
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	f000 fc32 	bl	8004294 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2221      	movs	r2, #33	@ 0x21
 8003a34:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a36:	e020      	b.n	8003a7a <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a38:	220b      	movs	r2, #11
 8003a3a:	18bb      	adds	r3, r7, r2
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b22      	cmp	r3, #34	@ 0x22
 8003a40:	d003      	beq.n	8003a4a <I2C_ITSlaveCplt+0x66>
 8003a42:	18bb      	adds	r3, r7, r2
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a48:	d109      	bne.n	8003a5e <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003a4a:	4aa8      	ldr	r2, [pc, #672]	@ (8003cec <I2C_ITSlaveCplt+0x308>)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	0011      	movs	r1, r2
 8003a50:	0018      	movs	r0, r3
 8003a52:	f000 fc1f 	bl	8004294 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2222      	movs	r2, #34	@ 0x22
 8003a5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a5c:	e00d      	b.n	8003a7a <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003a5e:	230b      	movs	r3, #11
 8003a60:	18fb      	adds	r3, r7, r3
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b28      	cmp	r3, #40	@ 0x28
 8003a66:	d108      	bne.n	8003a7a <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003a68:	4aa1      	ldr	r2, [pc, #644]	@ (8003cf0 <I2C_ITSlaveCplt+0x30c>)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	0011      	movs	r1, r2
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f000 fc10 	bl	8004294 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2180      	movs	r1, #128	@ 0x80
 8003a86:	0209      	lsls	r1, r1, #8
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4997      	ldr	r1, [pc, #604]	@ (8003cf4 <I2C_ITSlaveCplt+0x310>)
 8003a98:	400a      	ands	r2, r1
 8003a9a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	f000 fab5 	bl	800400e <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	0b9b      	lsrs	r3, r3, #14
 8003aa8:	001a      	movs	r2, r3
 8003aaa:	2301      	movs	r3, #1
 8003aac:	4013      	ands	r3, r2
 8003aae:	d013      	beq.n	8003ad8 <I2C_ITSlaveCplt+0xf4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	498f      	ldr	r1, [pc, #572]	@ (8003cf8 <I2C_ITSlaveCplt+0x314>)
 8003abc:	400a      	ands	r2, r1
 8003abe:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d020      	beq.n	8003b0a <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ad6:	e018      	b.n	8003b0a <I2C_ITSlaveCplt+0x126>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	0bdb      	lsrs	r3, r3, #15
 8003adc:	001a      	movs	r2, r3
 8003ade:	2301      	movs	r3, #1
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	d012      	beq.n	8003b0a <I2C_ITSlaveCplt+0x126>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4983      	ldr	r1, [pc, #524]	@ (8003cfc <I2C_ITSlaveCplt+0x318>)
 8003af0:	400a      	ands	r2, r1
 8003af2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d006      	beq.n	8003b0a <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	089b      	lsrs	r3, r3, #2
 8003b0e:	001a      	movs	r2, r3
 8003b10:	2301      	movs	r3, #1
 8003b12:	4013      	ands	r3, r2
 8003b14:	d020      	beq.n	8003b58 <I2C_ITSlaveCplt+0x174>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2204      	movs	r2, #4
 8003b1a:	4393      	bics	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00c      	beq.n	8003b58 <I2C_ITSlaveCplt+0x174>
    {
      hi2c->XferSize--;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d005      	beq.n	8003b6e <I2C_ITSlaveCplt+0x18a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b66:	2204      	movs	r2, #4
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	091b      	lsrs	r3, r3, #4
 8003b72:	001a      	movs	r2, r3
 8003b74:	2301      	movs	r3, #1
 8003b76:	4013      	ands	r3, r2
 8003b78:	d051      	beq.n	8003c1e <I2C_ITSlaveCplt+0x23a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	091b      	lsrs	r3, r3, #4
 8003b7e:	001a      	movs	r2, r3
 8003b80:	2301      	movs	r3, #1
 8003b82:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003b84:	d04b      	beq.n	8003c1e <I2C_ITSlaveCplt+0x23a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d12d      	bne.n	8003bec <I2C_ITSlaveCplt+0x208>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2241      	movs	r2, #65	@ 0x41
 8003b94:	5c9b      	ldrb	r3, [r3, r2]
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b28      	cmp	r3, #40	@ 0x28
 8003b9a:	d10b      	bne.n	8003bb4 <I2C_ITSlaveCplt+0x1d0>
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	2380      	movs	r3, #128	@ 0x80
 8003ba0:	049b      	lsls	r3, r3, #18
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d106      	bne.n	8003bb4 <I2C_ITSlaveCplt+0x1d0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	0011      	movs	r1, r2
 8003bac:	0018      	movs	r0, r3
 8003bae:	f000 f8a9 	bl	8003d04 <I2C_ITListenCplt>
 8003bb2:	e034      	b.n	8003c1e <I2C_ITSlaveCplt+0x23a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2241      	movs	r2, #65	@ 0x41
 8003bb8:	5c9b      	ldrb	r3, [r3, r2]
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b29      	cmp	r3, #41	@ 0x29
 8003bbe:	d110      	bne.n	8003be2 <I2C_ITSlaveCplt+0x1fe>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4a4f      	ldr	r2, [pc, #316]	@ (8003d00 <I2C_ITSlaveCplt+0x31c>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d00c      	beq.n	8003be2 <I2C_ITSlaveCplt+0x1fe>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2210      	movs	r2, #16
 8003bce:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f000 fa1b 	bl	800400e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f7ff fdca 	bl	8003774 <I2C_ITSlaveSeqCplt>
 8003be0:	e01d      	b.n	8003c1e <I2C_ITSlaveCplt+0x23a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2210      	movs	r2, #16
 8003be8:	61da      	str	r2, [r3, #28]
 8003bea:	e018      	b.n	8003c1e <I2C_ITSlaveCplt+0x23a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2210      	movs	r2, #16
 8003bf2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf8:	2204      	movs	r2, #4
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d004      	beq.n	8003c10 <I2C_ITSlaveCplt+0x22c>
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	2380      	movs	r3, #128	@ 0x80
 8003c0a:	045b      	lsls	r3, r3, #17
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d106      	bne.n	8003c1e <I2C_ITSlaveCplt+0x23a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	0011      	movs	r1, r2
 8003c18:	0018      	movs	r0, r3
 8003c1a:	f000 f8cd 	bl	8003db8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2242      	movs	r2, #66	@ 0x42
 8003c22:	2100      	movs	r1, #0
 8003c24:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d013      	beq.n	8003c5c <I2C_ITSlaveCplt+0x278>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	0011      	movs	r1, r2
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	f000 f8bb 	bl	8003db8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2241      	movs	r2, #65	@ 0x41
 8003c46:	5c9b      	ldrb	r3, [r3, r2]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b28      	cmp	r3, #40	@ 0x28
 8003c4c:	d147      	bne.n	8003cde <I2C_ITSlaveCplt+0x2fa>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	0011      	movs	r1, r2
 8003c54:	0018      	movs	r0, r3
 8003c56:	f000 f855 	bl	8003d04 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c5a:	e040      	b.n	8003cde <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c60:	4a27      	ldr	r2, [pc, #156]	@ (8003d00 <I2C_ITSlaveCplt+0x31c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d016      	beq.n	8003c94 <I2C_ITSlaveCplt+0x2b0>
    I2C_ITSlaveSeqCplt(hi2c);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f7ff fd83 	bl	8003774 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a23      	ldr	r2, [pc, #140]	@ (8003d00 <I2C_ITSlaveCplt+0x31c>)
 8003c72:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2241      	movs	r2, #65	@ 0x41
 8003c78:	2120      	movs	r1, #32
 8003c7a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2240      	movs	r2, #64	@ 0x40
 8003c86:	2100      	movs	r1, #0
 8003c88:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	f7ff f809 	bl	8002ca4 <HAL_I2C_ListenCpltCallback>
}
 8003c92:	e024      	b.n	8003cde <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2241      	movs	r2, #65	@ 0x41
 8003c98:	5c9b      	ldrb	r3, [r3, r2]
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b22      	cmp	r3, #34	@ 0x22
 8003c9e:	d10f      	bne.n	8003cc0 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2241      	movs	r2, #65	@ 0x41
 8003ca4:	2120      	movs	r1, #32
 8003ca6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2240      	movs	r2, #64	@ 0x40
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	0018      	movs	r0, r3
 8003cba:	f7fe ffeb 	bl	8002c94 <HAL_I2C_SlaveRxCpltCallback>
}
 8003cbe:	e00e      	b.n	8003cde <I2C_ITSlaveCplt+0x2fa>
    hi2c->State = HAL_I2C_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2241      	movs	r2, #65	@ 0x41
 8003cc4:	2120      	movs	r1, #32
 8003cc6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2240      	movs	r2, #64	@ 0x40
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	0018      	movs	r0, r3
 8003cda:	f7fc fc83 	bl	80005e4 <HAL_I2C_SlaveTxCpltCallback>
}
 8003cde:	46c0      	nop			@ (mov r8, r8)
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	b006      	add	sp, #24
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	46c0      	nop			@ (mov r8, r8)
 8003ce8:	00008001 	.word	0x00008001
 8003cec:	00008002 	.word	0x00008002
 8003cf0:	00008003 	.word	0x00008003
 8003cf4:	fe00e800 	.word	0xfe00e800
 8003cf8:	ffffbfff 	.word	0xffffbfff
 8003cfc:	ffff7fff 	.word	0xffff7fff
 8003d00:	ffff0000 	.word	0xffff0000

08003d04 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a27      	ldr	r2, [pc, #156]	@ (8003db0 <I2C_ITListenCplt+0xac>)
 8003d12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2241      	movs	r2, #65	@ 0x41
 8003d1e:	2120      	movs	r1, #32
 8003d20:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2242      	movs	r2, #66	@ 0x42
 8003d26:	2100      	movs	r1, #0
 8003d28:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	089b      	lsrs	r3, r3, #2
 8003d34:	001a      	movs	r2, r3
 8003d36:	2301      	movs	r3, #1
 8003d38:	4013      	ands	r3, r2
 8003d3a:	d022      	beq.n	8003d82 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d012      	beq.n	8003d82 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d60:	3b01      	subs	r3, #1
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7a:	2204      	movs	r2, #4
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003d82:	4a0c      	ldr	r2, [pc, #48]	@ (8003db4 <I2C_ITListenCplt+0xb0>)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	0011      	movs	r1, r2
 8003d88:	0018      	movs	r0, r3
 8003d8a:	f000 fa83 	bl	8004294 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2210      	movs	r2, #16
 8003d94:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2240      	movs	r2, #64	@ 0x40
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	0018      	movs	r0, r3
 8003da2:	f7fe ff7f 	bl	8002ca4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003da6:	46c0      	nop			@ (mov r8, r8)
 8003da8:	46bd      	mov	sp, r7
 8003daa:	b002      	add	sp, #8
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	46c0      	nop			@ (mov r8, r8)
 8003db0:	ffff0000 	.word	0xffff0000
 8003db4:	00008003 	.word	0x00008003

08003db8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003dc2:	200f      	movs	r0, #15
 8003dc4:	183b      	adds	r3, r7, r0
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	2141      	movs	r1, #65	@ 0x41
 8003dca:	5c52      	ldrb	r2, [r2, r1]
 8003dcc:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2242      	movs	r2, #66	@ 0x42
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a72      	ldr	r2, [pc, #456]	@ (8003fa4 <I2C_ITError+0x1ec>)
 8003dda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003dee:	183b      	adds	r3, r7, r0
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	2b28      	cmp	r3, #40	@ 0x28
 8003df4:	d007      	beq.n	8003e06 <I2C_ITError+0x4e>
 8003df6:	183b      	adds	r3, r7, r0
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	2b29      	cmp	r3, #41	@ 0x29
 8003dfc:	d003      	beq.n	8003e06 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003dfe:	183b      	adds	r3, r7, r0
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e04:	d10c      	bne.n	8003e20 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2103      	movs	r1, #3
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f000 fa42 	bl	8004294 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2241      	movs	r2, #65	@ 0x41
 8003e14:	2128      	movs	r1, #40	@ 0x28
 8003e16:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a63      	ldr	r2, [pc, #396]	@ (8003fa8 <I2C_ITError+0x1f0>)
 8003e1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e1e:	e032      	b.n	8003e86 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e20:	4a62      	ldr	r2, [pc, #392]	@ (8003fac <I2C_ITError+0x1f4>)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	0011      	movs	r1, r2
 8003e26:	0018      	movs	r0, r3
 8003e28:	f000 fa34 	bl	8004294 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f000 f8ed 	bl	800400e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2241      	movs	r2, #65	@ 0x41
 8003e38:	5c9b      	ldrb	r3, [r3, r2]
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b60      	cmp	r3, #96	@ 0x60
 8003e3e:	d01f      	beq.n	8003e80 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2241      	movs	r2, #65	@ 0x41
 8003e44:	2120      	movs	r1, #32
 8003e46:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	4013      	ands	r3, r2
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	d114      	bne.n	8003e80 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	2210      	movs	r2, #16
 8003e5e:	4013      	ands	r3, r2
 8003e60:	2b10      	cmp	r3, #16
 8003e62:	d109      	bne.n	8003e78 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2210      	movs	r2, #16
 8003e6a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e70:	2204      	movs	r2, #4
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d03b      	beq.n	8003f0c <I2C_ITError+0x154>
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2b11      	cmp	r3, #17
 8003e98:	d002      	beq.n	8003ea0 <I2C_ITError+0xe8>
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2b21      	cmp	r3, #33	@ 0x21
 8003e9e:	d135      	bne.n	8003f0c <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	2380      	movs	r3, #128	@ 0x80
 8003ea8:	01db      	lsls	r3, r3, #7
 8003eaa:	401a      	ands	r2, r3
 8003eac:	2380      	movs	r3, #128	@ 0x80
 8003eae:	01db      	lsls	r3, r3, #7
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d107      	bne.n	8003ec4 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	493c      	ldr	r1, [pc, #240]	@ (8003fb0 <I2C_ITError+0x1f8>)
 8003ec0:	400a      	ands	r2, r1
 8003ec2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f7fe f93d 	bl	8002148 <HAL_DMA_GetState>
 8003ece:	0003      	movs	r3, r0
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d016      	beq.n	8003f02 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed8:	4a36      	ldr	r2, [pc, #216]	@ (8003fb4 <I2C_ITError+0x1fc>)
 8003eda:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2240      	movs	r2, #64	@ 0x40
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f7fe f801 	bl	8001ef0 <HAL_DMA_Abort_IT>
 8003eee:	1e03      	subs	r3, r0, #0
 8003ef0:	d051      	beq.n	8003f96 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efc:	0018      	movs	r0, r3
 8003efe:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f00:	e049      	b.n	8003f96 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	0018      	movs	r0, r3
 8003f06:	f000 f859 	bl	8003fbc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f0a:	e044      	b.n	8003f96 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d03b      	beq.n	8003f8c <I2C_ITError+0x1d4>
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2b12      	cmp	r3, #18
 8003f18:	d002      	beq.n	8003f20 <I2C_ITError+0x168>
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2b22      	cmp	r3, #34	@ 0x22
 8003f1e:	d135      	bne.n	8003f8c <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	2380      	movs	r3, #128	@ 0x80
 8003f28:	021b      	lsls	r3, r3, #8
 8003f2a:	401a      	ands	r2, r3
 8003f2c:	2380      	movs	r3, #128	@ 0x80
 8003f2e:	021b      	lsls	r3, r3, #8
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d107      	bne.n	8003f44 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	491e      	ldr	r1, [pc, #120]	@ (8003fb8 <I2C_ITError+0x200>)
 8003f40:	400a      	ands	r2, r1
 8003f42:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f7fe f8fd 	bl	8002148 <HAL_DMA_GetState>
 8003f4e:	0003      	movs	r3, r0
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d016      	beq.n	8003f82 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f58:	4a16      	ldr	r2, [pc, #88]	@ (8003fb4 <I2C_ITError+0x1fc>)
 8003f5a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2240      	movs	r2, #64	@ 0x40
 8003f60:	2100      	movs	r1, #0
 8003f62:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f7fd ffc1 	bl	8001ef0 <HAL_DMA_Abort_IT>
 8003f6e:	1e03      	subs	r3, r0, #0
 8003f70:	d013      	beq.n	8003f9a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f80:	e00b      	b.n	8003f9a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	0018      	movs	r0, r3
 8003f86:	f000 f819 	bl	8003fbc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f8a:	e006      	b.n	8003f9a <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	0018      	movs	r0, r3
 8003f90:	f000 f814 	bl	8003fbc <I2C_TreatErrorCallback>
  }
}
 8003f94:	e002      	b.n	8003f9c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f96:	46c0      	nop			@ (mov r8, r8)
 8003f98:	e000      	b.n	8003f9c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f9a:	46c0      	nop			@ (mov r8, r8)
}
 8003f9c:	46c0      	nop			@ (mov r8, r8)
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b004      	add	sp, #16
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	ffff0000 	.word	0xffff0000
 8003fa8:	08002cf9 	.word	0x08002cf9
 8003fac:	00008003 	.word	0x00008003
 8003fb0:	ffffbfff 	.word	0xffffbfff
 8003fb4:	080040cf 	.word	0x080040cf
 8003fb8:	ffff7fff 	.word	0xffff7fff

08003fbc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2241      	movs	r2, #65	@ 0x41
 8003fc8:	5c9b      	ldrb	r3, [r3, r2]
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b60      	cmp	r3, #96	@ 0x60
 8003fce:	d10f      	bne.n	8003ff0 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2241      	movs	r2, #65	@ 0x41
 8003fd4:	2120      	movs	r1, #32
 8003fd6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2240      	movs	r2, #64	@ 0x40
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f7fe fe73 	bl	8002cd4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003fee:	e00a      	b.n	8004006 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2240      	movs	r2, #64	@ 0x40
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	0018      	movs	r0, r3
 8004002:	f7fc faff 	bl	8000604 <HAL_I2C_ErrorCallback>
}
 8004006:	46c0      	nop			@ (mov r8, r8)
 8004008:	46bd      	mov	sp, r7
 800400a:	b002      	add	sp, #8
 800400c:	bd80      	pop	{r7, pc}

0800400e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b082      	sub	sp, #8
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	2202      	movs	r2, #2
 800401e:	4013      	ands	r3, r2
 8004020:	2b02      	cmp	r3, #2
 8004022:	d103      	bne.n	800402c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2200      	movs	r2, #0
 800402a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	2201      	movs	r2, #1
 8004034:	4013      	ands	r3, r2
 8004036:	2b01      	cmp	r3, #1
 8004038:	d007      	beq.n	800404a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	699a      	ldr	r2, [r3, #24]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2101      	movs	r1, #1
 8004046:	430a      	orrs	r2, r1
 8004048:	619a      	str	r2, [r3, #24]
  }
}
 800404a:	46c0      	nop			@ (mov r8, r8)
 800404c:	46bd      	mov	sp, r7
 800404e:	b002      	add	sp, #8
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004060:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004066:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	2380      	movs	r3, #128	@ 0x80
 800406c:	045b      	lsls	r3, r3, #17
 800406e:	429a      	cmp	r2, r3
 8004070:	d002      	beq.n	8004078 <I2C_DMASlaveTransmitCplt+0x24>
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10b      	bne.n	8004090 <I2C_DMASlaveTransmitCplt+0x3c>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4905      	ldr	r1, [pc, #20]	@ (8004098 <I2C_DMASlaveTransmitCplt+0x44>)
 8004084:	400a      	ands	r2, r1
 8004086:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	0018      	movs	r0, r3
 800408c:	f7ff fb72 	bl	8003774 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8004090:	46c0      	nop			@ (mov r8, r8)
 8004092:	46bd      	mov	sp, r7
 8004094:	b004      	add	sp, #16
 8004096:	bd80      	pop	{r7, pc}
 8004098:	ffffbfff 	.word	0xffffbfff

0800409c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a8:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2180      	movs	r1, #128	@ 0x80
 80040b6:	0209      	lsls	r1, r1, #8
 80040b8:	430a      	orrs	r2, r1
 80040ba:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2110      	movs	r1, #16
 80040c0:	0018      	movs	r0, r3
 80040c2:	f7ff fe79 	bl	8003db8 <I2C_ITError>
}
 80040c6:	46c0      	nop			@ (mov r8, r8)
 80040c8:	46bd      	mov	sp, r7
 80040ca:	b004      	add	sp, #16
 80040cc:	bd80      	pop	{r7, pc}

080040ce <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b084      	sub	sp, #16
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040da:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d003      	beq.n	80040ec <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e8:	2200      	movs	r2, #0
 80040ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f8:	2200      	movs	r2, #0
 80040fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	0018      	movs	r0, r3
 8004100:	f7ff ff5c 	bl	8003fbc <I2C_TreatErrorCallback>
}
 8004104:	46c0      	nop			@ (mov r8, r8)
 8004106:	46bd      	mov	sp, r7
 8004108:	b004      	add	sp, #16
 800410a:	bd80      	pop	{r7, pc}

0800410c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800410c:	b590      	push	{r4, r7, lr}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	0008      	movs	r0, r1
 8004116:	0011      	movs	r1, r2
 8004118:	607b      	str	r3, [r7, #4]
 800411a:	240a      	movs	r4, #10
 800411c:	193b      	adds	r3, r7, r4
 800411e:	1c02      	adds	r2, r0, #0
 8004120:	801a      	strh	r2, [r3, #0]
 8004122:	2009      	movs	r0, #9
 8004124:	183b      	adds	r3, r7, r0
 8004126:	1c0a      	adds	r2, r1, #0
 8004128:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800412a:	193b      	adds	r3, r7, r4
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	059b      	lsls	r3, r3, #22
 8004130:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004132:	183b      	adds	r3, r7, r0
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	0419      	lsls	r1, r3, #16
 8004138:	23ff      	movs	r3, #255	@ 0xff
 800413a:	041b      	lsls	r3, r3, #16
 800413c:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800413e:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004146:	4313      	orrs	r3, r2
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	085b      	lsrs	r3, r3, #1
 800414c:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004156:	0d51      	lsrs	r1, r2, #21
 8004158:	2280      	movs	r2, #128	@ 0x80
 800415a:	00d2      	lsls	r2, r2, #3
 800415c:	400a      	ands	r2, r1
 800415e:	4907      	ldr	r1, [pc, #28]	@ (800417c <I2C_TransferConfig+0x70>)
 8004160:	430a      	orrs	r2, r1
 8004162:	43d2      	mvns	r2, r2
 8004164:	401a      	ands	r2, r3
 8004166:	0011      	movs	r1, r2
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	430a      	orrs	r2, r1
 8004170:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004172:	46c0      	nop			@ (mov r8, r8)
 8004174:	46bd      	mov	sp, r7
 8004176:	b007      	add	sp, #28
 8004178:	bd90      	pop	{r4, r7, pc}
 800417a:	46c0      	nop			@ (mov r8, r8)
 800417c:	03ff63ff 	.word	0x03ff63ff

08004180 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	000a      	movs	r2, r1
 800418a:	1cbb      	adds	r3, r7, #2
 800418c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004196:	4b3c      	ldr	r3, [pc, #240]	@ (8004288 <I2C_Enable_IRQ+0x108>)
 8004198:	429a      	cmp	r2, r3
 800419a:	d035      	beq.n	8004208 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80041a0:	4b3a      	ldr	r3, [pc, #232]	@ (800428c <I2C_Enable_IRQ+0x10c>)
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d030      	beq.n	8004208 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80041aa:	4b39      	ldr	r3, [pc, #228]	@ (8004290 <I2C_Enable_IRQ+0x110>)
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d02b      	beq.n	8004208 <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80041b0:	1cbb      	adds	r3, r7, #2
 80041b2:	2200      	movs	r2, #0
 80041b4:	5e9b      	ldrsh	r3, [r3, r2]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	da03      	bge.n	80041c2 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	22b8      	movs	r2, #184	@ 0xb8
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80041c2:	1cbb      	adds	r3, r7, #2
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	2201      	movs	r2, #1
 80041c8:	4013      	ands	r3, r2
 80041ca:	d003      	beq.n	80041d4 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	22f2      	movs	r2, #242	@ 0xf2
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80041d4:	1cbb      	adds	r3, r7, #2
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	2202      	movs	r2, #2
 80041da:	4013      	ands	r3, r2
 80041dc:	d003      	beq.n	80041e6 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	22f4      	movs	r2, #244	@ 0xf4
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80041e6:	1cbb      	adds	r3, r7, #2
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	2b10      	cmp	r3, #16
 80041ec:	d103      	bne.n	80041f6 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2290      	movs	r2, #144	@ 0x90
 80041f2:	4313      	orrs	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80041f6:	1cbb      	adds	r3, r7, #2
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	2b20      	cmp	r3, #32
 80041fc:	d137      	bne.n	800426e <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2220      	movs	r2, #32
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004206:	e032      	b.n	800426e <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004208:	1cbb      	adds	r3, r7, #2
 800420a:	2200      	movs	r2, #0
 800420c:	5e9b      	ldrsh	r3, [r3, r2]
 800420e:	2b00      	cmp	r3, #0
 8004210:	da03      	bge.n	800421a <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	22b8      	movs	r2, #184	@ 0xb8
 8004216:	4313      	orrs	r3, r2
 8004218:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800421a:	1cbb      	adds	r3, r7, #2
 800421c:	881b      	ldrh	r3, [r3, #0]
 800421e:	2201      	movs	r2, #1
 8004220:	4013      	ands	r3, r2
 8004222:	d003      	beq.n	800422c <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	22f2      	movs	r2, #242	@ 0xf2
 8004228:	4313      	orrs	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800422c:	1cbb      	adds	r3, r7, #2
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	2202      	movs	r2, #2
 8004232:	4013      	ands	r3, r2
 8004234:	d003      	beq.n	800423e <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	22f4      	movs	r2, #244	@ 0xf4
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800423e:	1cbb      	adds	r3, r7, #2
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	2b10      	cmp	r3, #16
 8004244:	d103      	bne.n	800424e <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2290      	movs	r2, #144	@ 0x90
 800424a:	4313      	orrs	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800424e:	1cbb      	adds	r3, r7, #2
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	2b20      	cmp	r3, #32
 8004254:	d103      	bne.n	800425e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2260      	movs	r2, #96	@ 0x60
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800425e:	1cbb      	adds	r3, r7, #2
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	2b40      	cmp	r3, #64	@ 0x40
 8004264:	d103      	bne.n	800426e <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2240      	movs	r2, #64	@ 0x40
 800426a:	4313      	orrs	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6819      	ldr	r1, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	430a      	orrs	r2, r1
 800427c:	601a      	str	r2, [r3, #0]
}
 800427e:	46c0      	nop			@ (mov r8, r8)
 8004280:	46bd      	mov	sp, r7
 8004282:	b004      	add	sp, #16
 8004284:	bd80      	pop	{r7, pc}
 8004286:	46c0      	nop			@ (mov r8, r8)
 8004288:	08002f21 	.word	0x08002f21
 800428c:	080033b9 	.word	0x080033b9
 8004290:	08003139 	.word	0x08003139

08004294 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	000a      	movs	r2, r1
 800429e:	1cbb      	adds	r3, r7, #2
 80042a0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80042a2:	2300      	movs	r3, #0
 80042a4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80042a6:	1cbb      	adds	r3, r7, #2
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	2201      	movs	r2, #1
 80042ac:	4013      	ands	r3, r2
 80042ae:	d010      	beq.n	80042d2 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2242      	movs	r2, #66	@ 0x42
 80042b4:	4313      	orrs	r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2241      	movs	r2, #65	@ 0x41
 80042bc:	5c9b      	ldrb	r3, [r3, r2]
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	001a      	movs	r2, r3
 80042c2:	2328      	movs	r3, #40	@ 0x28
 80042c4:	4013      	ands	r3, r2
 80042c6:	2b28      	cmp	r3, #40	@ 0x28
 80042c8:	d003      	beq.n	80042d2 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	22b0      	movs	r2, #176	@ 0xb0
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80042d2:	1cbb      	adds	r3, r7, #2
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	2202      	movs	r2, #2
 80042d8:	4013      	ands	r3, r2
 80042da:	d010      	beq.n	80042fe <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2244      	movs	r2, #68	@ 0x44
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2241      	movs	r2, #65	@ 0x41
 80042e8:	5c9b      	ldrb	r3, [r3, r2]
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	001a      	movs	r2, r3
 80042ee:	2328      	movs	r3, #40	@ 0x28
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b28      	cmp	r3, #40	@ 0x28
 80042f4:	d003      	beq.n	80042fe <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	22b0      	movs	r2, #176	@ 0xb0
 80042fa:	4313      	orrs	r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80042fe:	1cbb      	adds	r3, r7, #2
 8004300:	2200      	movs	r2, #0
 8004302:	5e9b      	ldrsh	r3, [r3, r2]
 8004304:	2b00      	cmp	r3, #0
 8004306:	da03      	bge.n	8004310 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	22b8      	movs	r2, #184	@ 0xb8
 800430c:	4313      	orrs	r3, r2
 800430e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004310:	1cbb      	adds	r3, r7, #2
 8004312:	881b      	ldrh	r3, [r3, #0]
 8004314:	2b10      	cmp	r3, #16
 8004316:	d103      	bne.n	8004320 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2290      	movs	r2, #144	@ 0x90
 800431c:	4313      	orrs	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004320:	1cbb      	adds	r3, r7, #2
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	2b20      	cmp	r3, #32
 8004326:	d103      	bne.n	8004330 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2220      	movs	r2, #32
 800432c:	4313      	orrs	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004330:	1cbb      	adds	r3, r7, #2
 8004332:	881b      	ldrh	r3, [r3, #0]
 8004334:	2b40      	cmp	r3, #64	@ 0x40
 8004336:	d103      	bne.n	8004340 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2240      	movs	r2, #64	@ 0x40
 800433c:	4313      	orrs	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	43d9      	mvns	r1, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	400a      	ands	r2, r1
 8004350:	601a      	str	r2, [r3, #0]
}
 8004352:	46c0      	nop			@ (mov r8, r8)
 8004354:	46bd      	mov	sp, r7
 8004356:	b004      	add	sp, #16
 8004358:	bd80      	pop	{r7, pc}
	...

0800435c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2241      	movs	r2, #65	@ 0x41
 800436a:	5c9b      	ldrb	r3, [r3, r2]
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b20      	cmp	r3, #32
 8004370:	d138      	bne.n	80043e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2240      	movs	r2, #64	@ 0x40
 8004376:	5c9b      	ldrb	r3, [r3, r2]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d101      	bne.n	8004380 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800437c:	2302      	movs	r3, #2
 800437e:	e032      	b.n	80043e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2240      	movs	r2, #64	@ 0x40
 8004384:	2101      	movs	r1, #1
 8004386:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2241      	movs	r2, #65	@ 0x41
 800438c:	2124      	movs	r1, #36	@ 0x24
 800438e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2101      	movs	r1, #1
 800439c:	438a      	bics	r2, r1
 800439e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4911      	ldr	r1, [pc, #68]	@ (80043f0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80043ac:	400a      	ands	r2, r1
 80043ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6819      	ldr	r1, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2101      	movs	r1, #1
 80043cc:	430a      	orrs	r2, r1
 80043ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2241      	movs	r2, #65	@ 0x41
 80043d4:	2120      	movs	r1, #32
 80043d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2240      	movs	r2, #64	@ 0x40
 80043dc:	2100      	movs	r1, #0
 80043de:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	e000      	b.n	80043e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80043e4:	2302      	movs	r3, #2
  }
}
 80043e6:	0018      	movs	r0, r3
 80043e8:	46bd      	mov	sp, r7
 80043ea:	b002      	add	sp, #8
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	46c0      	nop			@ (mov r8, r8)
 80043f0:	ffffefff 	.word	0xffffefff

080043f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2241      	movs	r2, #65	@ 0x41
 8004402:	5c9b      	ldrb	r3, [r3, r2]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b20      	cmp	r3, #32
 8004408:	d139      	bne.n	800447e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2240      	movs	r2, #64	@ 0x40
 800440e:	5c9b      	ldrb	r3, [r3, r2]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d101      	bne.n	8004418 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004414:	2302      	movs	r3, #2
 8004416:	e033      	b.n	8004480 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2240      	movs	r2, #64	@ 0x40
 800441c:	2101      	movs	r1, #1
 800441e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2241      	movs	r2, #65	@ 0x41
 8004424:	2124      	movs	r1, #36	@ 0x24
 8004426:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2101      	movs	r1, #1
 8004434:	438a      	bics	r2, r1
 8004436:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4a11      	ldr	r2, [pc, #68]	@ (8004488 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004444:	4013      	ands	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	021b      	lsls	r3, r3, #8
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	4313      	orrs	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2101      	movs	r1, #1
 8004466:	430a      	orrs	r2, r1
 8004468:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2241      	movs	r2, #65	@ 0x41
 800446e:	2120      	movs	r1, #32
 8004470:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2240      	movs	r2, #64	@ 0x40
 8004476:	2100      	movs	r1, #0
 8004478:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	e000      	b.n	8004480 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800447e:	2302      	movs	r3, #2
  }
}
 8004480:	0018      	movs	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	b004      	add	sp, #16
 8004486:	bd80      	pop	{r7, pc}
 8004488:	fffff0ff 	.word	0xfffff0ff

0800448c <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e1d0      	b.n	8004840 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2201      	movs	r2, #1
 80044a4:	4013      	ands	r3, r2
 80044a6:	d100      	bne.n	80044aa <HAL_RCC_OscConfig+0x1e>
 80044a8:	e069      	b.n	800457e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044aa:	4bc8      	ldr	r3, [pc, #800]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2238      	movs	r2, #56	@ 0x38
 80044b0:	4013      	ands	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	d105      	bne.n	80044c6 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d15d      	bne.n	800457e <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e1bc      	b.n	8004840 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	2380      	movs	r3, #128	@ 0x80
 80044cc:	025b      	lsls	r3, r3, #9
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d107      	bne.n	80044e2 <HAL_RCC_OscConfig+0x56>
 80044d2:	4bbe      	ldr	r3, [pc, #760]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	4bbd      	ldr	r3, [pc, #756]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 80044d8:	2180      	movs	r1, #128	@ 0x80
 80044da:	0249      	lsls	r1, r1, #9
 80044dc:	430a      	orrs	r2, r1
 80044de:	601a      	str	r2, [r3, #0]
 80044e0:	e020      	b.n	8004524 <HAL_RCC_OscConfig+0x98>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	23a0      	movs	r3, #160	@ 0xa0
 80044e8:	02db      	lsls	r3, r3, #11
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d10e      	bne.n	800450c <HAL_RCC_OscConfig+0x80>
 80044ee:	4bb7      	ldr	r3, [pc, #732]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	4bb6      	ldr	r3, [pc, #728]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 80044f4:	2180      	movs	r1, #128	@ 0x80
 80044f6:	02c9      	lsls	r1, r1, #11
 80044f8:	430a      	orrs	r2, r1
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	4bb3      	ldr	r3, [pc, #716]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	4bb2      	ldr	r3, [pc, #712]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 8004502:	2180      	movs	r1, #128	@ 0x80
 8004504:	0249      	lsls	r1, r1, #9
 8004506:	430a      	orrs	r2, r1
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	e00b      	b.n	8004524 <HAL_RCC_OscConfig+0x98>
 800450c:	4baf      	ldr	r3, [pc, #700]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	4bae      	ldr	r3, [pc, #696]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 8004512:	49af      	ldr	r1, [pc, #700]	@ (80047d0 <HAL_RCC_OscConfig+0x344>)
 8004514:	400a      	ands	r2, r1
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	4bac      	ldr	r3, [pc, #688]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	4bab      	ldr	r3, [pc, #684]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 800451e:	49ad      	ldr	r1, [pc, #692]	@ (80047d4 <HAL_RCC_OscConfig+0x348>)
 8004520:	400a      	ands	r2, r1
 8004522:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d014      	beq.n	8004556 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fc fcc4 	bl	8000eb8 <HAL_GetTick>
 8004530:	0003      	movs	r3, r0
 8004532:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004534:	e008      	b.n	8004548 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004536:	f7fc fcbf 	bl	8000eb8 <HAL_GetTick>
 800453a:	0002      	movs	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b64      	cmp	r3, #100	@ 0x64
 8004542:	d901      	bls.n	8004548 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e17b      	b.n	8004840 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004548:	4ba0      	ldr	r3, [pc, #640]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	2380      	movs	r3, #128	@ 0x80
 800454e:	029b      	lsls	r3, r3, #10
 8004550:	4013      	ands	r3, r2
 8004552:	d0f0      	beq.n	8004536 <HAL_RCC_OscConfig+0xaa>
 8004554:	e013      	b.n	800457e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004556:	f7fc fcaf 	bl	8000eb8 <HAL_GetTick>
 800455a:	0003      	movs	r3, r0
 800455c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004560:	f7fc fcaa 	bl	8000eb8 <HAL_GetTick>
 8004564:	0002      	movs	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b64      	cmp	r3, #100	@ 0x64
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e166      	b.n	8004840 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004572:	4b96      	ldr	r3, [pc, #600]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	2380      	movs	r3, #128	@ 0x80
 8004578:	029b      	lsls	r3, r3, #10
 800457a:	4013      	ands	r3, r2
 800457c:	d1f0      	bne.n	8004560 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2202      	movs	r2, #2
 8004584:	4013      	ands	r3, r2
 8004586:	d100      	bne.n	800458a <HAL_RCC_OscConfig+0xfe>
 8004588:	e086      	b.n	8004698 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800458a:	4b90      	ldr	r3, [pc, #576]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	2238      	movs	r2, #56	@ 0x38
 8004590:	4013      	ands	r3, r2
 8004592:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d12f      	bne.n	80045fa <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e14c      	b.n	8004840 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a6:	4b89      	ldr	r3, [pc, #548]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	4a8b      	ldr	r2, [pc, #556]	@ (80047d8 <HAL_RCC_OscConfig+0x34c>)
 80045ac:	4013      	ands	r3, r2
 80045ae:	0019      	movs	r1, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	021a      	lsls	r2, r3, #8
 80045b6:	4b85      	ldr	r3, [pc, #532]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 80045b8:	430a      	orrs	r2, r1
 80045ba:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d112      	bne.n	80045e8 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80045c2:	4b82      	ldr	r3, [pc, #520]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a85      	ldr	r2, [pc, #532]	@ (80047dc <HAL_RCC_OscConfig+0x350>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	0019      	movs	r1, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691a      	ldr	r2, [r3, #16]
 80045d0:	4b7e      	ldr	r3, [pc, #504]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 80045d2:	430a      	orrs	r2, r1
 80045d4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80045d6:	4b7d      	ldr	r3, [pc, #500]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	0adb      	lsrs	r3, r3, #11
 80045dc:	2207      	movs	r2, #7
 80045de:	4013      	ands	r3, r2
 80045e0:	4a7f      	ldr	r2, [pc, #508]	@ (80047e0 <HAL_RCC_OscConfig+0x354>)
 80045e2:	40da      	lsrs	r2, r3
 80045e4:	4b7f      	ldr	r3, [pc, #508]	@ (80047e4 <HAL_RCC_OscConfig+0x358>)
 80045e6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80045e8:	4b7f      	ldr	r3, [pc, #508]	@ (80047e8 <HAL_RCC_OscConfig+0x35c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	0018      	movs	r0, r3
 80045ee:	f7fc fc07 	bl	8000e00 <HAL_InitTick>
 80045f2:	1e03      	subs	r3, r0, #0
 80045f4:	d050      	beq.n	8004698 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e122      	b.n	8004840 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d030      	beq.n	8004664 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004602:	4b72      	ldr	r3, [pc, #456]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a75      	ldr	r2, [pc, #468]	@ (80047dc <HAL_RCC_OscConfig+0x350>)
 8004608:	4013      	ands	r3, r2
 800460a:	0019      	movs	r1, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	4b6e      	ldr	r3, [pc, #440]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 8004612:	430a      	orrs	r2, r1
 8004614:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8004616:	4b6d      	ldr	r3, [pc, #436]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4b6c      	ldr	r3, [pc, #432]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 800461c:	2180      	movs	r1, #128	@ 0x80
 800461e:	0049      	lsls	r1, r1, #1
 8004620:	430a      	orrs	r2, r1
 8004622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004624:	f7fc fc48 	bl	8000eb8 <HAL_GetTick>
 8004628:	0003      	movs	r3, r0
 800462a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800462c:	e008      	b.n	8004640 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800462e:	f7fc fc43 	bl	8000eb8 <HAL_GetTick>
 8004632:	0002      	movs	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e0ff      	b.n	8004840 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004640:	4b62      	ldr	r3, [pc, #392]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	2380      	movs	r3, #128	@ 0x80
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	4013      	ands	r3, r2
 800464a:	d0f0      	beq.n	800462e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800464c:	4b5f      	ldr	r3, [pc, #380]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	4a61      	ldr	r2, [pc, #388]	@ (80047d8 <HAL_RCC_OscConfig+0x34c>)
 8004652:	4013      	ands	r3, r2
 8004654:	0019      	movs	r1, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	021a      	lsls	r2, r3, #8
 800465c:	4b5b      	ldr	r3, [pc, #364]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 800465e:	430a      	orrs	r2, r1
 8004660:	605a      	str	r2, [r3, #4]
 8004662:	e019      	b.n	8004698 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8004664:	4b59      	ldr	r3, [pc, #356]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	4b58      	ldr	r3, [pc, #352]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 800466a:	4960      	ldr	r1, [pc, #384]	@ (80047ec <HAL_RCC_OscConfig+0x360>)
 800466c:	400a      	ands	r2, r1
 800466e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004670:	f7fc fc22 	bl	8000eb8 <HAL_GetTick>
 8004674:	0003      	movs	r3, r0
 8004676:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800467a:	f7fc fc1d 	bl	8000eb8 <HAL_GetTick>
 800467e:	0002      	movs	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e0d9      	b.n	8004840 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800468c:	4b4f      	ldr	r3, [pc, #316]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	2380      	movs	r3, #128	@ 0x80
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	4013      	ands	r3, r2
 8004696:	d1f0      	bne.n	800467a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2208      	movs	r2, #8
 800469e:	4013      	ands	r3, r2
 80046a0:	d042      	beq.n	8004728 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80046a2:	4b4a      	ldr	r3, [pc, #296]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	2238      	movs	r2, #56	@ 0x38
 80046a8:	4013      	ands	r3, r2
 80046aa:	2b18      	cmp	r3, #24
 80046ac:	d105      	bne.n	80046ba <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d138      	bne.n	8004728 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e0c2      	b.n	8004840 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d019      	beq.n	80046f6 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80046c2:	4b42      	ldr	r3, [pc, #264]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 80046c4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80046c6:	4b41      	ldr	r3, [pc, #260]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 80046c8:	2101      	movs	r1, #1
 80046ca:	430a      	orrs	r2, r1
 80046cc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ce:	f7fc fbf3 	bl	8000eb8 <HAL_GetTick>
 80046d2:	0003      	movs	r3, r0
 80046d4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80046d8:	f7fc fbee 	bl	8000eb8 <HAL_GetTick>
 80046dc:	0002      	movs	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e0aa      	b.n	8004840 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80046ea:	4b38      	ldr	r3, [pc, #224]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 80046ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ee:	2202      	movs	r2, #2
 80046f0:	4013      	ands	r3, r2
 80046f2:	d0f1      	beq.n	80046d8 <HAL_RCC_OscConfig+0x24c>
 80046f4:	e018      	b.n	8004728 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80046f6:	4b35      	ldr	r3, [pc, #212]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 80046f8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80046fa:	4b34      	ldr	r3, [pc, #208]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 80046fc:	2101      	movs	r1, #1
 80046fe:	438a      	bics	r2, r1
 8004700:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004702:	f7fc fbd9 	bl	8000eb8 <HAL_GetTick>
 8004706:	0003      	movs	r3, r0
 8004708:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800470c:	f7fc fbd4 	bl	8000eb8 <HAL_GetTick>
 8004710:	0002      	movs	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e090      	b.n	8004840 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800471e:	4b2b      	ldr	r3, [pc, #172]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 8004720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004722:	2202      	movs	r2, #2
 8004724:	4013      	ands	r3, r2
 8004726:	d1f1      	bne.n	800470c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2204      	movs	r2, #4
 800472e:	4013      	ands	r3, r2
 8004730:	d100      	bne.n	8004734 <HAL_RCC_OscConfig+0x2a8>
 8004732:	e084      	b.n	800483e <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004734:	230f      	movs	r3, #15
 8004736:	18fb      	adds	r3, r7, r3
 8004738:	2200      	movs	r2, #0
 800473a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800473c:	4b23      	ldr	r3, [pc, #140]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2238      	movs	r2, #56	@ 0x38
 8004742:	4013      	ands	r3, r2
 8004744:	2b20      	cmp	r3, #32
 8004746:	d106      	bne.n	8004756 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d000      	beq.n	8004752 <HAL_RCC_OscConfig+0x2c6>
 8004750:	e075      	b.n	800483e <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e074      	b.n	8004840 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d106      	bne.n	800476c <HAL_RCC_OscConfig+0x2e0>
 800475e:	4b1b      	ldr	r3, [pc, #108]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 8004760:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004762:	4b1a      	ldr	r3, [pc, #104]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 8004764:	2101      	movs	r1, #1
 8004766:	430a      	orrs	r2, r1
 8004768:	65da      	str	r2, [r3, #92]	@ 0x5c
 800476a:	e01c      	b.n	80047a6 <HAL_RCC_OscConfig+0x31a>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	2b05      	cmp	r3, #5
 8004772:	d10c      	bne.n	800478e <HAL_RCC_OscConfig+0x302>
 8004774:	4b15      	ldr	r3, [pc, #84]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 8004776:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004778:	4b14      	ldr	r3, [pc, #80]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 800477a:	2104      	movs	r1, #4
 800477c:	430a      	orrs	r2, r1
 800477e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004780:	4b12      	ldr	r3, [pc, #72]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 8004782:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004784:	4b11      	ldr	r3, [pc, #68]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 8004786:	2101      	movs	r1, #1
 8004788:	430a      	orrs	r2, r1
 800478a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800478c:	e00b      	b.n	80047a6 <HAL_RCC_OscConfig+0x31a>
 800478e:	4b0f      	ldr	r3, [pc, #60]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 8004790:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004792:	4b0e      	ldr	r3, [pc, #56]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 8004794:	2101      	movs	r1, #1
 8004796:	438a      	bics	r2, r1
 8004798:	65da      	str	r2, [r3, #92]	@ 0x5c
 800479a:	4b0c      	ldr	r3, [pc, #48]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 800479c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800479e:	4b0b      	ldr	r3, [pc, #44]	@ (80047cc <HAL_RCC_OscConfig+0x340>)
 80047a0:	2104      	movs	r1, #4
 80047a2:	438a      	bics	r2, r1
 80047a4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d028      	beq.n	8004800 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ae:	f7fc fb83 	bl	8000eb8 <HAL_GetTick>
 80047b2:	0003      	movs	r3, r0
 80047b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80047b6:	e01d      	b.n	80047f4 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b8:	f7fc fb7e 	bl	8000eb8 <HAL_GetTick>
 80047bc:	0002      	movs	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	4a0b      	ldr	r2, [pc, #44]	@ (80047f0 <HAL_RCC_OscConfig+0x364>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d915      	bls.n	80047f4 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e039      	b.n	8004840 <HAL_RCC_OscConfig+0x3b4>
 80047cc:	40021000 	.word	0x40021000
 80047d0:	fffeffff 	.word	0xfffeffff
 80047d4:	fffbffff 	.word	0xfffbffff
 80047d8:	ffff80ff 	.word	0xffff80ff
 80047dc:	ffffc7ff 	.word	0xffffc7ff
 80047e0:	02dc6c00 	.word	0x02dc6c00
 80047e4:	20000008 	.word	0x20000008
 80047e8:	20000024 	.word	0x20000024
 80047ec:	fffffeff 	.word	0xfffffeff
 80047f0:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80047f4:	4b14      	ldr	r3, [pc, #80]	@ (8004848 <HAL_RCC_OscConfig+0x3bc>)
 80047f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047f8:	2202      	movs	r2, #2
 80047fa:	4013      	ands	r3, r2
 80047fc:	d0dc      	beq.n	80047b8 <HAL_RCC_OscConfig+0x32c>
 80047fe:	e013      	b.n	8004828 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004800:	f7fc fb5a 	bl	8000eb8 <HAL_GetTick>
 8004804:	0003      	movs	r3, r0
 8004806:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8004808:	e009      	b.n	800481e <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800480a:	f7fc fb55 	bl	8000eb8 <HAL_GetTick>
 800480e:	0002      	movs	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	4a0d      	ldr	r2, [pc, #52]	@ (800484c <HAL_RCC_OscConfig+0x3c0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e010      	b.n	8004840 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800481e:	4b0a      	ldr	r3, [pc, #40]	@ (8004848 <HAL_RCC_OscConfig+0x3bc>)
 8004820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004822:	2202      	movs	r2, #2
 8004824:	4013      	ands	r3, r2
 8004826:	d1f0      	bne.n	800480a <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004828:	230f      	movs	r3, #15
 800482a:	18fb      	adds	r3, r7, r3
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d105      	bne.n	800483e <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004832:	4b05      	ldr	r3, [pc, #20]	@ (8004848 <HAL_RCC_OscConfig+0x3bc>)
 8004834:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004836:	4b04      	ldr	r3, [pc, #16]	@ (8004848 <HAL_RCC_OscConfig+0x3bc>)
 8004838:	4905      	ldr	r1, [pc, #20]	@ (8004850 <HAL_RCC_OscConfig+0x3c4>)
 800483a:	400a      	ands	r2, r1
 800483c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	0018      	movs	r0, r3
 8004842:	46bd      	mov	sp, r7
 8004844:	b006      	add	sp, #24
 8004846:	bd80      	pop	{r7, pc}
 8004848:	40021000 	.word	0x40021000
 800484c:	00001388 	.word	0x00001388
 8004850:	efffffff 	.word	0xefffffff

08004854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e0df      	b.n	8004a28 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004868:	4b71      	ldr	r3, [pc, #452]	@ (8004a30 <HAL_RCC_ClockConfig+0x1dc>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2207      	movs	r2, #7
 800486e:	4013      	ands	r3, r2
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	429a      	cmp	r2, r3
 8004874:	d91e      	bls.n	80048b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004876:	4b6e      	ldr	r3, [pc, #440]	@ (8004a30 <HAL_RCC_ClockConfig+0x1dc>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2207      	movs	r2, #7
 800487c:	4393      	bics	r3, r2
 800487e:	0019      	movs	r1, r3
 8004880:	4b6b      	ldr	r3, [pc, #428]	@ (8004a30 <HAL_RCC_ClockConfig+0x1dc>)
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004888:	f7fc fb16 	bl	8000eb8 <HAL_GetTick>
 800488c:	0003      	movs	r3, r0
 800488e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004890:	e009      	b.n	80048a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004892:	f7fc fb11 	bl	8000eb8 <HAL_GetTick>
 8004896:	0002      	movs	r2, r0
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	4a65      	ldr	r2, [pc, #404]	@ (8004a34 <HAL_RCC_ClockConfig+0x1e0>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e0c0      	b.n	8004a28 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80048a6:	4b62      	ldr	r3, [pc, #392]	@ (8004a30 <HAL_RCC_ClockConfig+0x1dc>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2207      	movs	r2, #7
 80048ac:	4013      	ands	r3, r2
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d1ee      	bne.n	8004892 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2202      	movs	r2, #2
 80048ba:	4013      	ands	r3, r2
 80048bc:	d017      	beq.n	80048ee <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2204      	movs	r2, #4
 80048c4:	4013      	ands	r3, r2
 80048c6:	d008      	beq.n	80048da <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80048c8:	4b5b      	ldr	r3, [pc, #364]	@ (8004a38 <HAL_RCC_ClockConfig+0x1e4>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	4a5b      	ldr	r2, [pc, #364]	@ (8004a3c <HAL_RCC_ClockConfig+0x1e8>)
 80048ce:	401a      	ands	r2, r3
 80048d0:	4b59      	ldr	r3, [pc, #356]	@ (8004a38 <HAL_RCC_ClockConfig+0x1e4>)
 80048d2:	21b0      	movs	r1, #176	@ 0xb0
 80048d4:	0109      	lsls	r1, r1, #4
 80048d6:	430a      	orrs	r2, r1
 80048d8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048da:	4b57      	ldr	r3, [pc, #348]	@ (8004a38 <HAL_RCC_ClockConfig+0x1e4>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	4a58      	ldr	r2, [pc, #352]	@ (8004a40 <HAL_RCC_ClockConfig+0x1ec>)
 80048e0:	4013      	ands	r3, r2
 80048e2:	0019      	movs	r1, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	4b53      	ldr	r3, [pc, #332]	@ (8004a38 <HAL_RCC_ClockConfig+0x1e4>)
 80048ea:	430a      	orrs	r2, r1
 80048ec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2201      	movs	r2, #1
 80048f4:	4013      	ands	r3, r2
 80048f6:	d04b      	beq.n	8004990 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d107      	bne.n	8004910 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004900:	4b4d      	ldr	r3, [pc, #308]	@ (8004a38 <HAL_RCC_ClockConfig+0x1e4>)
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	2380      	movs	r3, #128	@ 0x80
 8004906:	029b      	lsls	r3, r3, #10
 8004908:	4013      	ands	r3, r2
 800490a:	d11f      	bne.n	800494c <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e08b      	b.n	8004a28 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d107      	bne.n	8004928 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004918:	4b47      	ldr	r3, [pc, #284]	@ (8004a38 <HAL_RCC_ClockConfig+0x1e4>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	2380      	movs	r3, #128	@ 0x80
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	4013      	ands	r3, r2
 8004922:	d113      	bne.n	800494c <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e07f      	b.n	8004a28 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	2b03      	cmp	r3, #3
 800492e:	d106      	bne.n	800493e <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004930:	4b41      	ldr	r3, [pc, #260]	@ (8004a38 <HAL_RCC_ClockConfig+0x1e4>)
 8004932:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004934:	2202      	movs	r2, #2
 8004936:	4013      	ands	r3, r2
 8004938:	d108      	bne.n	800494c <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e074      	b.n	8004a28 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800493e:	4b3e      	ldr	r3, [pc, #248]	@ (8004a38 <HAL_RCC_ClockConfig+0x1e4>)
 8004940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004942:	2202      	movs	r2, #2
 8004944:	4013      	ands	r3, r2
 8004946:	d101      	bne.n	800494c <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e06d      	b.n	8004a28 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800494c:	4b3a      	ldr	r3, [pc, #232]	@ (8004a38 <HAL_RCC_ClockConfig+0x1e4>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2207      	movs	r2, #7
 8004952:	4393      	bics	r3, r2
 8004954:	0019      	movs	r1, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	4b37      	ldr	r3, [pc, #220]	@ (8004a38 <HAL_RCC_ClockConfig+0x1e4>)
 800495c:	430a      	orrs	r2, r1
 800495e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004960:	f7fc faaa 	bl	8000eb8 <HAL_GetTick>
 8004964:	0003      	movs	r3, r0
 8004966:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004968:	e009      	b.n	800497e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800496a:	f7fc faa5 	bl	8000eb8 <HAL_GetTick>
 800496e:	0002      	movs	r2, r0
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	4a2f      	ldr	r2, [pc, #188]	@ (8004a34 <HAL_RCC_ClockConfig+0x1e0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d901      	bls.n	800497e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e054      	b.n	8004a28 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800497e:	4b2e      	ldr	r3, [pc, #184]	@ (8004a38 <HAL_RCC_ClockConfig+0x1e4>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	2238      	movs	r2, #56	@ 0x38
 8004984:	401a      	ands	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	429a      	cmp	r2, r3
 800498e:	d1ec      	bne.n	800496a <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004990:	4b27      	ldr	r3, [pc, #156]	@ (8004a30 <HAL_RCC_ClockConfig+0x1dc>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2207      	movs	r2, #7
 8004996:	4013      	ands	r3, r2
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d21e      	bcs.n	80049dc <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800499e:	4b24      	ldr	r3, [pc, #144]	@ (8004a30 <HAL_RCC_ClockConfig+0x1dc>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2207      	movs	r2, #7
 80049a4:	4393      	bics	r3, r2
 80049a6:	0019      	movs	r1, r3
 80049a8:	4b21      	ldr	r3, [pc, #132]	@ (8004a30 <HAL_RCC_ClockConfig+0x1dc>)
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80049b0:	f7fc fa82 	bl	8000eb8 <HAL_GetTick>
 80049b4:	0003      	movs	r3, r0
 80049b6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80049b8:	e009      	b.n	80049ce <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80049ba:	f7fc fa7d 	bl	8000eb8 <HAL_GetTick>
 80049be:	0002      	movs	r2, r0
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	4a1b      	ldr	r2, [pc, #108]	@ (8004a34 <HAL_RCC_ClockConfig+0x1e0>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e02c      	b.n	8004a28 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80049ce:	4b18      	ldr	r3, [pc, #96]	@ (8004a30 <HAL_RCC_ClockConfig+0x1dc>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2207      	movs	r2, #7
 80049d4:	4013      	ands	r3, r2
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d1ee      	bne.n	80049ba <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2204      	movs	r2, #4
 80049e2:	4013      	ands	r3, r2
 80049e4:	d009      	beq.n	80049fa <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80049e6:	4b14      	ldr	r3, [pc, #80]	@ (8004a38 <HAL_RCC_ClockConfig+0x1e4>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	4a16      	ldr	r2, [pc, #88]	@ (8004a44 <HAL_RCC_ClockConfig+0x1f0>)
 80049ec:	4013      	ands	r3, r2
 80049ee:	0019      	movs	r1, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691a      	ldr	r2, [r3, #16]
 80049f4:	4b10      	ldr	r3, [pc, #64]	@ (8004a38 <HAL_RCC_ClockConfig+0x1e4>)
 80049f6:	430a      	orrs	r2, r1
 80049f8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80049fa:	f000 f82b 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 80049fe:	0001      	movs	r1, r0
 8004a00:	4b0d      	ldr	r3, [pc, #52]	@ (8004a38 <HAL_RCC_ClockConfig+0x1e4>)
 8004a02:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004a04:	0a1b      	lsrs	r3, r3, #8
 8004a06:	220f      	movs	r2, #15
 8004a08:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8004a48 <HAL_RCC_ClockConfig+0x1f4>)
 8004a0c:	0092      	lsls	r2, r2, #2
 8004a0e:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004a10:	221f      	movs	r2, #31
 8004a12:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004a14:	000a      	movs	r2, r1
 8004a16:	40da      	lsrs	r2, r3
 8004a18:	4b0c      	ldr	r3, [pc, #48]	@ (8004a4c <HAL_RCC_ClockConfig+0x1f8>)
 8004a1a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a50 <HAL_RCC_ClockConfig+0x1fc>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	0018      	movs	r0, r3
 8004a22:	f7fc f9ed 	bl	8000e00 <HAL_InitTick>
 8004a26:	0003      	movs	r3, r0
}
 8004a28:	0018      	movs	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	b004      	add	sp, #16
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	40022000 	.word	0x40022000
 8004a34:	00001388 	.word	0x00001388
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	ffff84ff 	.word	0xffff84ff
 8004a40:	fffff0ff 	.word	0xfffff0ff
 8004a44:	ffff8fff 	.word	0xffff8fff
 8004a48:	080055a8 	.word	0x080055a8
 8004a4c:	20000008 	.word	0x20000008
 8004a50:	20000024 	.word	0x20000024

08004a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8004acc <HAL_RCC_GetSysClockFreq+0x78>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	2238      	movs	r2, #56	@ 0x38
 8004a60:	4013      	ands	r3, r2
 8004a62:	d10f      	bne.n	8004a84 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004a64:	4b19      	ldr	r3, [pc, #100]	@ (8004acc <HAL_RCC_GetSysClockFreq+0x78>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	0adb      	lsrs	r3, r3, #11
 8004a6a:	2207      	movs	r2, #7
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	2201      	movs	r2, #1
 8004a70:	409a      	lsls	r2, r3
 8004a72:	0013      	movs	r3, r2
 8004a74:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004a76:	6839      	ldr	r1, [r7, #0]
 8004a78:	4815      	ldr	r0, [pc, #84]	@ (8004ad0 <HAL_RCC_GetSysClockFreq+0x7c>)
 8004a7a:	f7fb fb45 	bl	8000108 <__udivsi3>
 8004a7e:	0003      	movs	r3, r0
 8004a80:	607b      	str	r3, [r7, #4]
 8004a82:	e01e      	b.n	8004ac2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004a84:	4b11      	ldr	r3, [pc, #68]	@ (8004acc <HAL_RCC_GetSysClockFreq+0x78>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	2238      	movs	r2, #56	@ 0x38
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d102      	bne.n	8004a96 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a90:	4b0f      	ldr	r3, [pc, #60]	@ (8004ad0 <HAL_RCC_GetSysClockFreq+0x7c>)
 8004a92:	607b      	str	r3, [r7, #4]
 8004a94:	e015      	b.n	8004ac2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004a96:	4b0d      	ldr	r3, [pc, #52]	@ (8004acc <HAL_RCC_GetSysClockFreq+0x78>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	2238      	movs	r2, #56	@ 0x38
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	2b20      	cmp	r3, #32
 8004aa0:	d103      	bne.n	8004aaa <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004aa2:	2380      	movs	r3, #128	@ 0x80
 8004aa4:	021b      	lsls	r3, r3, #8
 8004aa6:	607b      	str	r3, [r7, #4]
 8004aa8:	e00b      	b.n	8004ac2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004aaa:	4b08      	ldr	r3, [pc, #32]	@ (8004acc <HAL_RCC_GetSysClockFreq+0x78>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	2238      	movs	r2, #56	@ 0x38
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	2b18      	cmp	r3, #24
 8004ab4:	d103      	bne.n	8004abe <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004ab6:	23fa      	movs	r3, #250	@ 0xfa
 8004ab8:	01db      	lsls	r3, r3, #7
 8004aba:	607b      	str	r3, [r7, #4]
 8004abc:	e001      	b.n	8004ac2 <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8004ac2:	687b      	ldr	r3, [r7, #4]
}
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	b002      	add	sp, #8
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	02dc6c00 	.word	0x02dc6c00

08004ad4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004ad8:	f7ff ffbc 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8004adc:	0001      	movs	r1, r0
 8004ade:	4b09      	ldr	r3, [pc, #36]	@ (8004b04 <HAL_RCC_GetHCLKFreq+0x30>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004ae2:	0a1b      	lsrs	r3, r3, #8
 8004ae4:	220f      	movs	r2, #15
 8004ae6:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004ae8:	4b07      	ldr	r3, [pc, #28]	@ (8004b08 <HAL_RCC_GetHCLKFreq+0x34>)
 8004aea:	0092      	lsls	r2, r2, #2
 8004aec:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004aee:	221f      	movs	r2, #31
 8004af0:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004af2:	000a      	movs	r2, r1
 8004af4:	40da      	lsrs	r2, r3
 8004af6:	4b05      	ldr	r3, [pc, #20]	@ (8004b0c <HAL_RCC_GetHCLKFreq+0x38>)
 8004af8:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8004afa:	4b04      	ldr	r3, [pc, #16]	@ (8004b0c <HAL_RCC_GetHCLKFreq+0x38>)
 8004afc:	681b      	ldr	r3, [r3, #0]
}
 8004afe:	0018      	movs	r0, r3
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40021000 	.word	0x40021000
 8004b08:	080055a8 	.word	0x080055a8
 8004b0c:	20000008 	.word	0x20000008

08004b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8004b14:	f7ff ffde 	bl	8004ad4 <HAL_RCC_GetHCLKFreq>
 8004b18:	0001      	movs	r1, r0
 8004b1a:	4b07      	ldr	r3, [pc, #28]	@ (8004b38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	0b1b      	lsrs	r3, r3, #12
 8004b20:	2207      	movs	r2, #7
 8004b22:	401a      	ands	r2, r3
 8004b24:	4b05      	ldr	r3, [pc, #20]	@ (8004b3c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8004b26:	0092      	lsls	r2, r2, #2
 8004b28:	58d3      	ldr	r3, [r2, r3]
 8004b2a:	221f      	movs	r2, #31
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	40d9      	lsrs	r1, r3
 8004b30:	000b      	movs	r3, r1
}
 8004b32:	0018      	movs	r0, r3
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	40021000 	.word	0x40021000
 8004b3c:	080055e8 	.word	0x080055e8

08004b40 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004b48:	2313      	movs	r3, #19
 8004b4a:	18fb      	adds	r3, r7, r3
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b50:	2312      	movs	r3, #18
 8004b52:	18fb      	adds	r3, r7, r3
 8004b54:	2200      	movs	r2, #0
 8004b56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2240      	movs	r2, #64	@ 0x40
 8004b5e:	4013      	ands	r3, r2
 8004b60:	d100      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8004b62:	e079      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b64:	2011      	movs	r0, #17
 8004b66:	183b      	adds	r3, r7, r0
 8004b68:	2200      	movs	r2, #0
 8004b6a:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b6c:	4b63      	ldr	r3, [pc, #396]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b70:	2380      	movs	r3, #128	@ 0x80
 8004b72:	055b      	lsls	r3, r3, #21
 8004b74:	4013      	ands	r3, r2
 8004b76:	d110      	bne.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b78:	4b60      	ldr	r3, [pc, #384]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b7c:	4b5f      	ldr	r3, [pc, #380]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b7e:	2180      	movs	r1, #128	@ 0x80
 8004b80:	0549      	lsls	r1, r1, #21
 8004b82:	430a      	orrs	r2, r1
 8004b84:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004b86:	4b5d      	ldr	r3, [pc, #372]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b8a:	2380      	movs	r3, #128	@ 0x80
 8004b8c:	055b      	lsls	r3, r3, #21
 8004b8e:	4013      	ands	r3, r2
 8004b90:	60bb      	str	r3, [r7, #8]
 8004b92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b94:	183b      	adds	r3, r7, r0
 8004b96:	2201      	movs	r2, #1
 8004b98:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8004b9a:	4b58      	ldr	r3, [pc, #352]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004b9c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b9e:	23c0      	movs	r3, #192	@ 0xc0
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d019      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d014      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8004bb6:	4b51      	ldr	r3, [pc, #324]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bba:	4a51      	ldr	r2, [pc, #324]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bc0:	4b4e      	ldr	r3, [pc, #312]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bc2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bc4:	4b4d      	ldr	r3, [pc, #308]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bc6:	2180      	movs	r1, #128	@ 0x80
 8004bc8:	0249      	lsls	r1, r1, #9
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bce:	4b4b      	ldr	r3, [pc, #300]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bd0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bd2:	4b4a      	ldr	r3, [pc, #296]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bd4:	494b      	ldr	r1, [pc, #300]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004bd6:	400a      	ands	r2, r1
 8004bd8:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8004bda:	4b48      	ldr	r3, [pc, #288]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	2201      	movs	r2, #1
 8004be4:	4013      	ands	r3, r2
 8004be6:	d016      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be8:	f7fc f966 	bl	8000eb8 <HAL_GetTick>
 8004bec:	0003      	movs	r3, r0
 8004bee:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004bf0:	e00c      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf2:	f7fc f961 	bl	8000eb8 <HAL_GetTick>
 8004bf6:	0002      	movs	r2, r0
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	4a42      	ldr	r2, [pc, #264]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d904      	bls.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8004c02:	2313      	movs	r3, #19
 8004c04:	18fb      	adds	r3, r7, r3
 8004c06:	2203      	movs	r2, #3
 8004c08:	701a      	strb	r2, [r3, #0]
          break;
 8004c0a:	e004      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004c0c:	4b3b      	ldr	r3, [pc, #236]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c10:	2202      	movs	r2, #2
 8004c12:	4013      	ands	r3, r2
 8004c14:	d0ed      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8004c16:	2313      	movs	r3, #19
 8004c18:	18fb      	adds	r3, r7, r3
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10a      	bne.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c20:	4b36      	ldr	r3, [pc, #216]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c24:	4a36      	ldr	r2, [pc, #216]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c26:	4013      	ands	r3, r2
 8004c28:	0019      	movs	r1, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699a      	ldr	r2, [r3, #24]
 8004c2e:	4b33      	ldr	r3, [pc, #204]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c30:	430a      	orrs	r2, r1
 8004c32:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c34:	e005      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c36:	2312      	movs	r3, #18
 8004c38:	18fb      	adds	r3, r7, r3
 8004c3a:	2213      	movs	r2, #19
 8004c3c:	18ba      	adds	r2, r7, r2
 8004c3e:	7812      	ldrb	r2, [r2, #0]
 8004c40:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c42:	2311      	movs	r3, #17
 8004c44:	18fb      	adds	r3, r7, r3
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d105      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c4c:	4b2b      	ldr	r3, [pc, #172]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c50:	4b2a      	ldr	r3, [pc, #168]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c52:	492e      	ldr	r1, [pc, #184]	@ (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c54:	400a      	ands	r2, r1
 8004c56:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	4013      	ands	r3, r2
 8004c60:	d009      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c62:	4b26      	ldr	r3, [pc, #152]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c66:	2203      	movs	r2, #3
 8004c68:	4393      	bics	r3, r2
 8004c6a:	0019      	movs	r1, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	4b22      	ldr	r3, [pc, #136]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c72:	430a      	orrs	r2, r1
 8004c74:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	d009      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c80:	4b1e      	ldr	r3, [pc, #120]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c84:	4a22      	ldr	r2, [pc, #136]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c86:	4013      	ands	r3, r2
 8004c88:	0019      	movs	r1, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c90:	430a      	orrs	r2, r1
 8004c92:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	d008      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c9e:	4b17      	ldr	r3, [pc, #92]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	0899      	lsrs	r1, r3, #2
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	695a      	ldr	r2, [r3, #20]
 8004caa:	4b14      	ldr	r3, [pc, #80]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cac:	430a      	orrs	r2, r1
 8004cae:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2204      	movs	r2, #4
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	d009      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004cba:	4b10      	ldr	r3, [pc, #64]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cbe:	4a15      	ldr	r2, [pc, #84]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	0019      	movs	r1, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691a      	ldr	r2, [r3, #16]
 8004cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2280      	movs	r2, #128	@ 0x80
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	d009      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8004cd8:	4b08      	ldr	r3, [pc, #32]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	22e0      	movs	r2, #224	@ 0xe0
 8004cde:	4393      	bics	r3, r2
 8004ce0:	0019      	movs	r1, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	4b05      	ldr	r3, [pc, #20]	@ (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	601a      	str	r2, [r3, #0]
  }
  return status;
 8004cec:	2312      	movs	r3, #18
 8004cee:	18fb      	adds	r3, r7, r3
 8004cf0:	781b      	ldrb	r3, [r3, #0]
}
 8004cf2:	0018      	movs	r0, r3
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	b006      	add	sp, #24
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	46c0      	nop			@ (mov r8, r8)
 8004cfc:	40021000 	.word	0x40021000
 8004d00:	fffffcff 	.word	0xfffffcff
 8004d04:	fffeffff 	.word	0xfffeffff
 8004d08:	00001388 	.word	0x00001388
 8004d0c:	efffffff 	.word	0xefffffff
 8004d10:	ffffcfff 	.word	0xffffcfff
 8004d14:	ffff3fff 	.word	0xffff3fff

08004d18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e046      	b.n	8004db8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2288      	movs	r2, #136	@ 0x88
 8004d2e:	589b      	ldr	r3, [r3, r2]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d107      	bne.n	8004d44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2284      	movs	r2, #132	@ 0x84
 8004d38:	2100      	movs	r1, #0
 8004d3a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	0018      	movs	r0, r3
 8004d40:	f000 f840 	bl	8004dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2288      	movs	r2, #136	@ 0x88
 8004d48:	2124      	movs	r1, #36	@ 0x24
 8004d4a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2101      	movs	r1, #1
 8004d58:	438a      	bics	r2, r1
 8004d5a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d003      	beq.n	8004d6c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	0018      	movs	r0, r3
 8004d68:	f000 f9b2 	bl	80050d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	0018      	movs	r0, r3
 8004d70:	f000 f830 	bl	8004dd4 <UART_SetConfig>
 8004d74:	0003      	movs	r3, r0
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d101      	bne.n	8004d7e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e01c      	b.n	8004db8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	490d      	ldr	r1, [pc, #52]	@ (8004dc0 <HAL_UART_Init+0xa8>)
 8004d8a:	400a      	ands	r2, r1
 8004d8c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689a      	ldr	r2, [r3, #8]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	212a      	movs	r1, #42	@ 0x2a
 8004d9a:	438a      	bics	r2, r1
 8004d9c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2101      	movs	r1, #1
 8004daa:	430a      	orrs	r2, r1
 8004dac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	0018      	movs	r0, r3
 8004db2:	f000 fa41 	bl	8005238 <UART_CheckIdleState>
 8004db6:	0003      	movs	r3, r0
}
 8004db8:	0018      	movs	r0, r3
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	b002      	add	sp, #8
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	ffffb7ff 	.word	0xffffb7ff

08004dc4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004dcc:	46c0      	nop			@ (mov r8, r8)
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	b002      	add	sp, #8
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b088      	sub	sp, #32
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ddc:	231e      	movs	r3, #30
 8004dde:	18fb      	adds	r3, r7, r3
 8004de0:	2200      	movs	r2, #0
 8004de2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	431a      	orrs	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	69db      	ldr	r3, [r3, #28]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4aab      	ldr	r2, [pc, #684]	@ (80050b0 <UART_SetConfig+0x2dc>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	0019      	movs	r1, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	4aa6      	ldr	r2, [pc, #664]	@ (80050b4 <UART_SetConfig+0x2e0>)
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	0019      	movs	r1, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	4a9d      	ldr	r2, [pc, #628]	@ (80050b8 <UART_SetConfig+0x2e4>)
 8004e42:	4013      	ands	r3, r2
 8004e44:	0019      	movs	r1, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e56:	220f      	movs	r2, #15
 8004e58:	4393      	bics	r3, r2
 8004e5a:	0019      	movs	r1, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a93      	ldr	r2, [pc, #588]	@ (80050bc <UART_SetConfig+0x2e8>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d127      	bne.n	8004ec2 <UART_SetConfig+0xee>
 8004e72:	4b93      	ldr	r3, [pc, #588]	@ (80050c0 <UART_SetConfig+0x2ec>)
 8004e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e76:	2203      	movs	r2, #3
 8004e78:	4013      	ands	r3, r2
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d017      	beq.n	8004eae <UART_SetConfig+0xda>
 8004e7e:	d81b      	bhi.n	8004eb8 <UART_SetConfig+0xe4>
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d00a      	beq.n	8004e9a <UART_SetConfig+0xc6>
 8004e84:	d818      	bhi.n	8004eb8 <UART_SetConfig+0xe4>
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <UART_SetConfig+0xbc>
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d00a      	beq.n	8004ea4 <UART_SetConfig+0xd0>
 8004e8e:	e013      	b.n	8004eb8 <UART_SetConfig+0xe4>
 8004e90:	231f      	movs	r3, #31
 8004e92:	18fb      	adds	r3, r7, r3
 8004e94:	2200      	movs	r2, #0
 8004e96:	701a      	strb	r2, [r3, #0]
 8004e98:	e021      	b.n	8004ede <UART_SetConfig+0x10a>
 8004e9a:	231f      	movs	r3, #31
 8004e9c:	18fb      	adds	r3, r7, r3
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	701a      	strb	r2, [r3, #0]
 8004ea2:	e01c      	b.n	8004ede <UART_SetConfig+0x10a>
 8004ea4:	231f      	movs	r3, #31
 8004ea6:	18fb      	adds	r3, r7, r3
 8004ea8:	2204      	movs	r2, #4
 8004eaa:	701a      	strb	r2, [r3, #0]
 8004eac:	e017      	b.n	8004ede <UART_SetConfig+0x10a>
 8004eae:	231f      	movs	r3, #31
 8004eb0:	18fb      	adds	r3, r7, r3
 8004eb2:	2208      	movs	r2, #8
 8004eb4:	701a      	strb	r2, [r3, #0]
 8004eb6:	e012      	b.n	8004ede <UART_SetConfig+0x10a>
 8004eb8:	231f      	movs	r3, #31
 8004eba:	18fb      	adds	r3, r7, r3
 8004ebc:	2210      	movs	r2, #16
 8004ebe:	701a      	strb	r2, [r3, #0]
 8004ec0:	e00d      	b.n	8004ede <UART_SetConfig+0x10a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a7f      	ldr	r2, [pc, #508]	@ (80050c4 <UART_SetConfig+0x2f0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d104      	bne.n	8004ed6 <UART_SetConfig+0x102>
 8004ecc:	231f      	movs	r3, #31
 8004ece:	18fb      	adds	r3, r7, r3
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	701a      	strb	r2, [r3, #0]
 8004ed4:	e003      	b.n	8004ede <UART_SetConfig+0x10a>
 8004ed6:	231f      	movs	r3, #31
 8004ed8:	18fb      	adds	r3, r7, r3
 8004eda:	2210      	movs	r2, #16
 8004edc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69da      	ldr	r2, [r3, #28]
 8004ee2:	2380      	movs	r3, #128	@ 0x80
 8004ee4:	021b      	lsls	r3, r3, #8
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d000      	beq.n	8004eec <UART_SetConfig+0x118>
 8004eea:	e06f      	b.n	8004fcc <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8004eec:	231f      	movs	r3, #31
 8004eee:	18fb      	adds	r3, r7, r3
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	2b08      	cmp	r3, #8
 8004ef4:	d01f      	beq.n	8004f36 <UART_SetConfig+0x162>
 8004ef6:	dc22      	bgt.n	8004f3e <UART_SetConfig+0x16a>
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	d017      	beq.n	8004f2c <UART_SetConfig+0x158>
 8004efc:	dc1f      	bgt.n	8004f3e <UART_SetConfig+0x16a>
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d002      	beq.n	8004f08 <UART_SetConfig+0x134>
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d005      	beq.n	8004f12 <UART_SetConfig+0x13e>
 8004f06:	e01a      	b.n	8004f3e <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f08:	f7ff fe02 	bl	8004b10 <HAL_RCC_GetPCLK1Freq>
 8004f0c:	0003      	movs	r3, r0
 8004f0e:	61bb      	str	r3, [r7, #24]
        break;
 8004f10:	e01c      	b.n	8004f4c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004f12:	4b6b      	ldr	r3, [pc, #428]	@ (80050c0 <UART_SetConfig+0x2ec>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	095b      	lsrs	r3, r3, #5
 8004f18:	2207      	movs	r2, #7
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	0019      	movs	r1, r3
 8004f20:	4869      	ldr	r0, [pc, #420]	@ (80050c8 <UART_SetConfig+0x2f4>)
 8004f22:	f7fb f8f1 	bl	8000108 <__udivsi3>
 8004f26:	0003      	movs	r3, r0
 8004f28:	61bb      	str	r3, [r7, #24]
        break;
 8004f2a:	e00f      	b.n	8004f4c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f2c:	f7ff fd92 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8004f30:	0003      	movs	r3, r0
 8004f32:	61bb      	str	r3, [r7, #24]
        break;
 8004f34:	e00a      	b.n	8004f4c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f36:	2380      	movs	r3, #128	@ 0x80
 8004f38:	021b      	lsls	r3, r3, #8
 8004f3a:	61bb      	str	r3, [r7, #24]
        break;
 8004f3c:	e006      	b.n	8004f4c <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f42:	231e      	movs	r3, #30
 8004f44:	18fb      	adds	r3, r7, r3
 8004f46:	2201      	movs	r2, #1
 8004f48:	701a      	strb	r2, [r3, #0]
        break;
 8004f4a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d100      	bne.n	8004f54 <UART_SetConfig+0x180>
 8004f52:	e097      	b.n	8005084 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f58:	4b5c      	ldr	r3, [pc, #368]	@ (80050cc <UART_SetConfig+0x2f8>)
 8004f5a:	0052      	lsls	r2, r2, #1
 8004f5c:	5ad3      	ldrh	r3, [r2, r3]
 8004f5e:	0019      	movs	r1, r3
 8004f60:	69b8      	ldr	r0, [r7, #24]
 8004f62:	f7fb f8d1 	bl	8000108 <__udivsi3>
 8004f66:	0003      	movs	r3, r0
 8004f68:	005a      	lsls	r2, r3, #1
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	085b      	lsrs	r3, r3, #1
 8004f70:	18d2      	adds	r2, r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	0019      	movs	r1, r3
 8004f78:	0010      	movs	r0, r2
 8004f7a:	f7fb f8c5 	bl	8000108 <__udivsi3>
 8004f7e:	0003      	movs	r3, r0
 8004f80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	2b0f      	cmp	r3, #15
 8004f86:	d91c      	bls.n	8004fc2 <UART_SetConfig+0x1ee>
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	2380      	movs	r3, #128	@ 0x80
 8004f8c:	025b      	lsls	r3, r3, #9
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d217      	bcs.n	8004fc2 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	200e      	movs	r0, #14
 8004f98:	183b      	adds	r3, r7, r0
 8004f9a:	210f      	movs	r1, #15
 8004f9c:	438a      	bics	r2, r1
 8004f9e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	085b      	lsrs	r3, r3, #1
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	2207      	movs	r2, #7
 8004fa8:	4013      	ands	r3, r2
 8004faa:	b299      	uxth	r1, r3
 8004fac:	183b      	adds	r3, r7, r0
 8004fae:	183a      	adds	r2, r7, r0
 8004fb0:	8812      	ldrh	r2, [r2, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	183a      	adds	r2, r7, r0
 8004fbc:	8812      	ldrh	r2, [r2, #0]
 8004fbe:	60da      	str	r2, [r3, #12]
 8004fc0:	e060      	b.n	8005084 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004fc2:	231e      	movs	r3, #30
 8004fc4:	18fb      	adds	r3, r7, r3
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	701a      	strb	r2, [r3, #0]
 8004fca:	e05b      	b.n	8005084 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fcc:	231f      	movs	r3, #31
 8004fce:	18fb      	adds	r3, r7, r3
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	2b08      	cmp	r3, #8
 8004fd4:	d01f      	beq.n	8005016 <UART_SetConfig+0x242>
 8004fd6:	dc22      	bgt.n	800501e <UART_SetConfig+0x24a>
 8004fd8:	2b04      	cmp	r3, #4
 8004fda:	d017      	beq.n	800500c <UART_SetConfig+0x238>
 8004fdc:	dc1f      	bgt.n	800501e <UART_SetConfig+0x24a>
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <UART_SetConfig+0x214>
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d005      	beq.n	8004ff2 <UART_SetConfig+0x21e>
 8004fe6:	e01a      	b.n	800501e <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fe8:	f7ff fd92 	bl	8004b10 <HAL_RCC_GetPCLK1Freq>
 8004fec:	0003      	movs	r3, r0
 8004fee:	61bb      	str	r3, [r7, #24]
        break;
 8004ff0:	e01c      	b.n	800502c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004ff2:	4b33      	ldr	r3, [pc, #204]	@ (80050c0 <UART_SetConfig+0x2ec>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	2207      	movs	r2, #7
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	0019      	movs	r1, r3
 8005000:	4831      	ldr	r0, [pc, #196]	@ (80050c8 <UART_SetConfig+0x2f4>)
 8005002:	f7fb f881 	bl	8000108 <__udivsi3>
 8005006:	0003      	movs	r3, r0
 8005008:	61bb      	str	r3, [r7, #24]
        break;
 800500a:	e00f      	b.n	800502c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800500c:	f7ff fd22 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8005010:	0003      	movs	r3, r0
 8005012:	61bb      	str	r3, [r7, #24]
        break;
 8005014:	e00a      	b.n	800502c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005016:	2380      	movs	r3, #128	@ 0x80
 8005018:	021b      	lsls	r3, r3, #8
 800501a:	61bb      	str	r3, [r7, #24]
        break;
 800501c:	e006      	b.n	800502c <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 800501e:	2300      	movs	r3, #0
 8005020:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005022:	231e      	movs	r3, #30
 8005024:	18fb      	adds	r3, r7, r3
 8005026:	2201      	movs	r2, #1
 8005028:	701a      	strb	r2, [r3, #0]
        break;
 800502a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d028      	beq.n	8005084 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005036:	4b25      	ldr	r3, [pc, #148]	@ (80050cc <UART_SetConfig+0x2f8>)
 8005038:	0052      	lsls	r2, r2, #1
 800503a:	5ad3      	ldrh	r3, [r2, r3]
 800503c:	0019      	movs	r1, r3
 800503e:	69b8      	ldr	r0, [r7, #24]
 8005040:	f7fb f862 	bl	8000108 <__udivsi3>
 8005044:	0003      	movs	r3, r0
 8005046:	001a      	movs	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	085b      	lsrs	r3, r3, #1
 800504e:	18d2      	adds	r2, r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	0019      	movs	r1, r3
 8005056:	0010      	movs	r0, r2
 8005058:	f7fb f856 	bl	8000108 <__udivsi3>
 800505c:	0003      	movs	r3, r0
 800505e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	2b0f      	cmp	r3, #15
 8005064:	d90a      	bls.n	800507c <UART_SetConfig+0x2a8>
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	2380      	movs	r3, #128	@ 0x80
 800506a:	025b      	lsls	r3, r3, #9
 800506c:	429a      	cmp	r2, r3
 800506e:	d205      	bcs.n	800507c <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	b29a      	uxth	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	60da      	str	r2, [r3, #12]
 800507a:	e003      	b.n	8005084 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800507c:	231e      	movs	r3, #30
 800507e:	18fb      	adds	r3, r7, r3
 8005080:	2201      	movs	r2, #1
 8005082:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	226a      	movs	r2, #106	@ 0x6a
 8005088:	2101      	movs	r1, #1
 800508a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2268      	movs	r2, #104	@ 0x68
 8005090:	2101      	movs	r1, #1
 8005092:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80050a0:	231e      	movs	r3, #30
 80050a2:	18fb      	adds	r3, r7, r3
 80050a4:	781b      	ldrb	r3, [r3, #0]
}
 80050a6:	0018      	movs	r0, r3
 80050a8:	46bd      	mov	sp, r7
 80050aa:	b008      	add	sp, #32
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	46c0      	nop			@ (mov r8, r8)
 80050b0:	cfff69f3 	.word	0xcfff69f3
 80050b4:	ffffcfff 	.word	0xffffcfff
 80050b8:	11fff4ff 	.word	0x11fff4ff
 80050bc:	40013800 	.word	0x40013800
 80050c0:	40021000 	.word	0x40021000
 80050c4:	40004400 	.word	0x40004400
 80050c8:	02dc6c00 	.word	0x02dc6c00
 80050cc:	08005610 	.word	0x08005610

080050d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050dc:	2208      	movs	r2, #8
 80050de:	4013      	ands	r3, r2
 80050e0:	d00b      	beq.n	80050fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	4a4a      	ldr	r2, [pc, #296]	@ (8005214 <UART_AdvFeatureConfig+0x144>)
 80050ea:	4013      	ands	r3, r2
 80050ec:	0019      	movs	r1, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fe:	2201      	movs	r2, #1
 8005100:	4013      	ands	r3, r2
 8005102:	d00b      	beq.n	800511c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	4a43      	ldr	r2, [pc, #268]	@ (8005218 <UART_AdvFeatureConfig+0x148>)
 800510c:	4013      	ands	r3, r2
 800510e:	0019      	movs	r1, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005120:	2202      	movs	r2, #2
 8005122:	4013      	ands	r3, r2
 8005124:	d00b      	beq.n	800513e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	4a3b      	ldr	r2, [pc, #236]	@ (800521c <UART_AdvFeatureConfig+0x14c>)
 800512e:	4013      	ands	r3, r2
 8005130:	0019      	movs	r1, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005142:	2204      	movs	r2, #4
 8005144:	4013      	ands	r3, r2
 8005146:	d00b      	beq.n	8005160 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	4a34      	ldr	r2, [pc, #208]	@ (8005220 <UART_AdvFeatureConfig+0x150>)
 8005150:	4013      	ands	r3, r2
 8005152:	0019      	movs	r1, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	430a      	orrs	r2, r1
 800515e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005164:	2210      	movs	r2, #16
 8005166:	4013      	ands	r3, r2
 8005168:	d00b      	beq.n	8005182 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	4a2c      	ldr	r2, [pc, #176]	@ (8005224 <UART_AdvFeatureConfig+0x154>)
 8005172:	4013      	ands	r3, r2
 8005174:	0019      	movs	r1, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005186:	2220      	movs	r2, #32
 8005188:	4013      	ands	r3, r2
 800518a:	d00b      	beq.n	80051a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	4a25      	ldr	r2, [pc, #148]	@ (8005228 <UART_AdvFeatureConfig+0x158>)
 8005194:	4013      	ands	r3, r2
 8005196:	0019      	movs	r1, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a8:	2240      	movs	r2, #64	@ 0x40
 80051aa:	4013      	ands	r3, r2
 80051ac:	d01d      	beq.n	80051ea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	4a1d      	ldr	r2, [pc, #116]	@ (800522c <UART_AdvFeatureConfig+0x15c>)
 80051b6:	4013      	ands	r3, r2
 80051b8:	0019      	movs	r1, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051ca:	2380      	movs	r3, #128	@ 0x80
 80051cc:	035b      	lsls	r3, r3, #13
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d10b      	bne.n	80051ea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	4a15      	ldr	r2, [pc, #84]	@ (8005230 <UART_AdvFeatureConfig+0x160>)
 80051da:	4013      	ands	r3, r2
 80051dc:	0019      	movs	r1, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ee:	2280      	movs	r2, #128	@ 0x80
 80051f0:	4013      	ands	r3, r2
 80051f2:	d00b      	beq.n	800520c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	4a0e      	ldr	r2, [pc, #56]	@ (8005234 <UART_AdvFeatureConfig+0x164>)
 80051fc:	4013      	ands	r3, r2
 80051fe:	0019      	movs	r1, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	605a      	str	r2, [r3, #4]
  }
}
 800520c:	46c0      	nop			@ (mov r8, r8)
 800520e:	46bd      	mov	sp, r7
 8005210:	b002      	add	sp, #8
 8005212:	bd80      	pop	{r7, pc}
 8005214:	ffff7fff 	.word	0xffff7fff
 8005218:	fffdffff 	.word	0xfffdffff
 800521c:	fffeffff 	.word	0xfffeffff
 8005220:	fffbffff 	.word	0xfffbffff
 8005224:	ffffefff 	.word	0xffffefff
 8005228:	ffffdfff 	.word	0xffffdfff
 800522c:	ffefffff 	.word	0xffefffff
 8005230:	ff9fffff 	.word	0xff9fffff
 8005234:	fff7ffff 	.word	0xfff7ffff

08005238 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b092      	sub	sp, #72	@ 0x48
 800523c:	af02      	add	r7, sp, #8
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2290      	movs	r2, #144	@ 0x90
 8005244:	2100      	movs	r1, #0
 8005246:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005248:	f7fb fe36 	bl	8000eb8 <HAL_GetTick>
 800524c:	0003      	movs	r3, r0
 800524e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2208      	movs	r2, #8
 8005258:	4013      	ands	r3, r2
 800525a:	2b08      	cmp	r3, #8
 800525c:	d12d      	bne.n	80052ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800525e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005260:	2280      	movs	r2, #128	@ 0x80
 8005262:	0391      	lsls	r1, r2, #14
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	4a47      	ldr	r2, [pc, #284]	@ (8005384 <UART_CheckIdleState+0x14c>)
 8005268:	9200      	str	r2, [sp, #0]
 800526a:	2200      	movs	r2, #0
 800526c:	f000 f88e 	bl	800538c <UART_WaitOnFlagUntilTimeout>
 8005270:	1e03      	subs	r3, r0, #0
 8005272:	d022      	beq.n	80052ba <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005274:	f3ef 8310 	mrs	r3, PRIMASK
 8005278:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800527c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800527e:	2301      	movs	r3, #1
 8005280:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005284:	f383 8810 	msr	PRIMASK, r3
}
 8005288:	46c0      	nop			@ (mov r8, r8)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2180      	movs	r1, #128	@ 0x80
 8005296:	438a      	bics	r2, r1
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800529c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800529e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a0:	f383 8810 	msr	PRIMASK, r3
}
 80052a4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2288      	movs	r2, #136	@ 0x88
 80052aa:	2120      	movs	r1, #32
 80052ac:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2284      	movs	r2, #132	@ 0x84
 80052b2:	2100      	movs	r1, #0
 80052b4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e060      	b.n	800537c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2204      	movs	r2, #4
 80052c2:	4013      	ands	r3, r2
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	d146      	bne.n	8005356 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052ca:	2280      	movs	r2, #128	@ 0x80
 80052cc:	03d1      	lsls	r1, r2, #15
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	4a2c      	ldr	r2, [pc, #176]	@ (8005384 <UART_CheckIdleState+0x14c>)
 80052d2:	9200      	str	r2, [sp, #0]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f000 f859 	bl	800538c <UART_WaitOnFlagUntilTimeout>
 80052da:	1e03      	subs	r3, r0, #0
 80052dc:	d03b      	beq.n	8005356 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80052de:	f3ef 8310 	mrs	r3, PRIMASK
 80052e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80052e4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80052e8:	2301      	movs	r3, #1
 80052ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	f383 8810 	msr	PRIMASK, r3
}
 80052f2:	46c0      	nop			@ (mov r8, r8)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4922      	ldr	r1, [pc, #136]	@ (8005388 <UART_CheckIdleState+0x150>)
 8005300:	400a      	ands	r2, r1
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005306:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f383 8810 	msr	PRIMASK, r3
}
 800530e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005310:	f3ef 8310 	mrs	r3, PRIMASK
 8005314:	61bb      	str	r3, [r7, #24]
  return(result);
 8005316:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005318:	633b      	str	r3, [r7, #48]	@ 0x30
 800531a:	2301      	movs	r3, #1
 800531c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	f383 8810 	msr	PRIMASK, r3
}
 8005324:	46c0      	nop			@ (mov r8, r8)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2101      	movs	r1, #1
 8005332:	438a      	bics	r2, r1
 8005334:	609a      	str	r2, [r3, #8]
 8005336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005338:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	f383 8810 	msr	PRIMASK, r3
}
 8005340:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	228c      	movs	r2, #140	@ 0x8c
 8005346:	2120      	movs	r1, #32
 8005348:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2284      	movs	r2, #132	@ 0x84
 800534e:	2100      	movs	r1, #0
 8005350:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e012      	b.n	800537c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2288      	movs	r2, #136	@ 0x88
 800535a:	2120      	movs	r1, #32
 800535c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	228c      	movs	r2, #140	@ 0x8c
 8005362:	2120      	movs	r1, #32
 8005364:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2284      	movs	r2, #132	@ 0x84
 8005376:	2100      	movs	r1, #0
 8005378:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	0018      	movs	r0, r3
 800537e:	46bd      	mov	sp, r7
 8005380:	b010      	add	sp, #64	@ 0x40
 8005382:	bd80      	pop	{r7, pc}
 8005384:	01ffffff 	.word	0x01ffffff
 8005388:	fffffedf 	.word	0xfffffedf

0800538c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	603b      	str	r3, [r7, #0]
 8005398:	1dfb      	adds	r3, r7, #7
 800539a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800539c:	e051      	b.n	8005442 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	3301      	adds	r3, #1
 80053a2:	d04e      	beq.n	8005442 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053a4:	f7fb fd88 	bl	8000eb8 <HAL_GetTick>
 80053a8:	0002      	movs	r2, r0
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d302      	bcc.n	80053ba <UART_WaitOnFlagUntilTimeout+0x2e>
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e051      	b.n	8005462 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2204      	movs	r2, #4
 80053c6:	4013      	ands	r3, r2
 80053c8:	d03b      	beq.n	8005442 <UART_WaitOnFlagUntilTimeout+0xb6>
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	2b80      	cmp	r3, #128	@ 0x80
 80053ce:	d038      	beq.n	8005442 <UART_WaitOnFlagUntilTimeout+0xb6>
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	2b40      	cmp	r3, #64	@ 0x40
 80053d4:	d035      	beq.n	8005442 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	2208      	movs	r2, #8
 80053de:	4013      	ands	r3, r2
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d111      	bne.n	8005408 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2208      	movs	r2, #8
 80053ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	0018      	movs	r0, r3
 80053f0:	f000 f83c 	bl	800546c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2290      	movs	r2, #144	@ 0x90
 80053f8:	2108      	movs	r1, #8
 80053fa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2284      	movs	r2, #132	@ 0x84
 8005400:	2100      	movs	r1, #0
 8005402:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e02c      	b.n	8005462 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	69da      	ldr	r2, [r3, #28]
 800540e:	2380      	movs	r3, #128	@ 0x80
 8005410:	011b      	lsls	r3, r3, #4
 8005412:	401a      	ands	r2, r3
 8005414:	2380      	movs	r3, #128	@ 0x80
 8005416:	011b      	lsls	r3, r3, #4
 8005418:	429a      	cmp	r2, r3
 800541a:	d112      	bne.n	8005442 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2280      	movs	r2, #128	@ 0x80
 8005422:	0112      	lsls	r2, r2, #4
 8005424:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	0018      	movs	r0, r3
 800542a:	f000 f81f 	bl	800546c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2290      	movs	r2, #144	@ 0x90
 8005432:	2120      	movs	r1, #32
 8005434:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2284      	movs	r2, #132	@ 0x84
 800543a:	2100      	movs	r1, #0
 800543c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e00f      	b.n	8005462 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	4013      	ands	r3, r2
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	425a      	negs	r2, r3
 8005452:	4153      	adcs	r3, r2
 8005454:	b2db      	uxtb	r3, r3
 8005456:	001a      	movs	r2, r3
 8005458:	1dfb      	adds	r3, r7, #7
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	429a      	cmp	r2, r3
 800545e:	d09e      	beq.n	800539e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	0018      	movs	r0, r3
 8005464:	46bd      	mov	sp, r7
 8005466:	b004      	add	sp, #16
 8005468:	bd80      	pop	{r7, pc}
	...

0800546c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b08e      	sub	sp, #56	@ 0x38
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005474:	f3ef 8310 	mrs	r3, PRIMASK
 8005478:	617b      	str	r3, [r7, #20]
  return(result);
 800547a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800547c:	637b      	str	r3, [r7, #52]	@ 0x34
 800547e:	2301      	movs	r3, #1
 8005480:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	f383 8810 	msr	PRIMASK, r3
}
 8005488:	46c0      	nop			@ (mov r8, r8)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4926      	ldr	r1, [pc, #152]	@ (8005530 <UART_EndRxTransfer+0xc4>)
 8005496:	400a      	ands	r2, r1
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800549c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	f383 8810 	msr	PRIMASK, r3
}
 80054a4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80054a6:	f3ef 8310 	mrs	r3, PRIMASK
 80054aa:	623b      	str	r3, [r7, #32]
  return(result);
 80054ac:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80054b0:	2301      	movs	r3, #1
 80054b2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b6:	f383 8810 	msr	PRIMASK, r3
}
 80054ba:	46c0      	nop			@ (mov r8, r8)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689a      	ldr	r2, [r3, #8]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	491b      	ldr	r1, [pc, #108]	@ (8005534 <UART_EndRxTransfer+0xc8>)
 80054c8:	400a      	ands	r2, r1
 80054ca:	609a      	str	r2, [r3, #8]
 80054cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d2:	f383 8810 	msr	PRIMASK, r3
}
 80054d6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d118      	bne.n	8005512 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80054e0:	f3ef 8310 	mrs	r3, PRIMASK
 80054e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80054e6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054ea:	2301      	movs	r3, #1
 80054ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f383 8810 	msr	PRIMASK, r3
}
 80054f4:	46c0      	nop			@ (mov r8, r8)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2110      	movs	r1, #16
 8005502:	438a      	bics	r2, r1
 8005504:	601a      	str	r2, [r3, #0]
 8005506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005508:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	f383 8810 	msr	PRIMASK, r3
}
 8005510:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	228c      	movs	r2, #140	@ 0x8c
 8005516:	2120      	movs	r1, #32
 8005518:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005526:	46c0      	nop			@ (mov r8, r8)
 8005528:	46bd      	mov	sp, r7
 800552a:	b00e      	add	sp, #56	@ 0x38
 800552c:	bd80      	pop	{r7, pc}
 800552e:	46c0      	nop			@ (mov r8, r8)
 8005530:	fffffedf 	.word	0xfffffedf
 8005534:	effffffe 	.word	0xeffffffe

08005538 <memset>:
 8005538:	0003      	movs	r3, r0
 800553a:	1882      	adds	r2, r0, r2
 800553c:	4293      	cmp	r3, r2
 800553e:	d100      	bne.n	8005542 <memset+0xa>
 8005540:	4770      	bx	lr
 8005542:	7019      	strb	r1, [r3, #0]
 8005544:	3301      	adds	r3, #1
 8005546:	e7f9      	b.n	800553c <memset+0x4>

08005548 <__libc_init_array>:
 8005548:	b570      	push	{r4, r5, r6, lr}
 800554a:	2600      	movs	r6, #0
 800554c:	4c0c      	ldr	r4, [pc, #48]	@ (8005580 <__libc_init_array+0x38>)
 800554e:	4d0d      	ldr	r5, [pc, #52]	@ (8005584 <__libc_init_array+0x3c>)
 8005550:	1b64      	subs	r4, r4, r5
 8005552:	10a4      	asrs	r4, r4, #2
 8005554:	42a6      	cmp	r6, r4
 8005556:	d109      	bne.n	800556c <__libc_init_array+0x24>
 8005558:	2600      	movs	r6, #0
 800555a:	f000 f819 	bl	8005590 <_init>
 800555e:	4c0a      	ldr	r4, [pc, #40]	@ (8005588 <__libc_init_array+0x40>)
 8005560:	4d0a      	ldr	r5, [pc, #40]	@ (800558c <__libc_init_array+0x44>)
 8005562:	1b64      	subs	r4, r4, r5
 8005564:	10a4      	asrs	r4, r4, #2
 8005566:	42a6      	cmp	r6, r4
 8005568:	d105      	bne.n	8005576 <__libc_init_array+0x2e>
 800556a:	bd70      	pop	{r4, r5, r6, pc}
 800556c:	00b3      	lsls	r3, r6, #2
 800556e:	58eb      	ldr	r3, [r5, r3]
 8005570:	4798      	blx	r3
 8005572:	3601      	adds	r6, #1
 8005574:	e7ee      	b.n	8005554 <__libc_init_array+0xc>
 8005576:	00b3      	lsls	r3, r6, #2
 8005578:	58eb      	ldr	r3, [r5, r3]
 800557a:	4798      	blx	r3
 800557c:	3601      	adds	r6, #1
 800557e:	e7f2      	b.n	8005566 <__libc_init_array+0x1e>
 8005580:	08005628 	.word	0x08005628
 8005584:	08005628 	.word	0x08005628
 8005588:	0800562c 	.word	0x0800562c
 800558c:	08005628 	.word	0x08005628

08005590 <_init>:
 8005590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005592:	46c0      	nop			@ (mov r8, r8)
 8005594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005596:	bc08      	pop	{r3}
 8005598:	469e      	mov	lr, r3
 800559a:	4770      	bx	lr

0800559c <_fini>:
 800559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559e:	46c0      	nop			@ (mov r8, r8)
 80055a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055a2:	bc08      	pop	{r3}
 80055a4:	469e      	mov	lr, r3
 80055a6:	4770      	bx	lr
