
I2C_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000570c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080057cc  080057cc  000067cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800584c  0800584c  0000702c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800584c  0800584c  0000702c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800584c  0800584c  0000702c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800584c  0800584c  0000684c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005850  08005850  00006850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08005854  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  2000002c  08005880  0000702c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08005880  0000727c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000702c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f47  00000000  00000000  00007054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002669  00000000  00000000  00017f9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  0001a608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000afe  00000000  00000000  0001b430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015460  00000000  00000000  0001bf2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120da  00000000  00000000  0003138e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083252  00000000  00000000  00043468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c66ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032b4  00000000  00000000  000c6700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000c99b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000002c 	.word	0x2000002c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080057b4 	.word	0x080057b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000030 	.word	0x20000030
 8000104:	080057b4 	.word	0x080057b4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fdb4 	bl	8000d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f842 	bl	80002b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f98e 	bl	800054c <MX_GPIO_Init>
  MX_DMA_Init();
 8000230:	f000 f966 	bl	8000500 <MX_DMA_Init>
  MX_ADC1_Init();
 8000234:	f000 f884 	bl	8000340 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000238:	f000 f920 	bl	800047c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_Slave_Transmit_DMA(&hi2c1, test_data, 8);
 800023c:	4917      	ldr	r1, [pc, #92]	@ (800029c <main+0x7c>)
 800023e:	4b18      	ldr	r3, [pc, #96]	@ (80002a0 <main+0x80>)
 8000240:	2208      	movs	r2, #8
 8000242:	0018      	movs	r0, r3
 8000244:	f002 fca2 	bl	8002b8c <HAL_I2C_Slave_Transmit_DMA>
  HAL_ADC_Start_DMA(&hadc1, adc_buffer, 4);
 8000248:	4916      	ldr	r1, [pc, #88]	@ (80002a4 <main+0x84>)
 800024a:	4b17      	ldr	r3, [pc, #92]	@ (80002a8 <main+0x88>)
 800024c:	2204      	movs	r2, #4
 800024e:	0018      	movs	r0, r3
 8000250:	f001 f916 	bl	8001480 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000254:	2000      	movs	r0, #0
 8000256:	f000 fbc3 	bl	80009e0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800025a:	2101      	movs	r1, #1
 800025c:	2000      	movs	r0, #0
 800025e:	f000 fc29 	bl	8000ab4 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000262:	4b12      	ldr	r3, [pc, #72]	@ (80002ac <main+0x8c>)
 8000264:	22e1      	movs	r2, #225	@ 0xe1
 8000266:	0252      	lsls	r2, r2, #9
 8000268:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800026a:	4b10      	ldr	r3, [pc, #64]	@ (80002ac <main+0x8c>)
 800026c:	2200      	movs	r2, #0
 800026e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000270:	4b0e      	ldr	r3, [pc, #56]	@ (80002ac <main+0x8c>)
 8000272:	2200      	movs	r2, #0
 8000274:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000276:	4b0d      	ldr	r3, [pc, #52]	@ (80002ac <main+0x8c>)
 8000278:	2200      	movs	r2, #0
 800027a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800027c:	4b0b      	ldr	r3, [pc, #44]	@ (80002ac <main+0x8c>)
 800027e:	2200      	movs	r2, #0
 8000280:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000282:	4b0a      	ldr	r3, [pc, #40]	@ (80002ac <main+0x8c>)
 8000284:	0019      	movs	r1, r3
 8000286:	2000      	movs	r0, #0
 8000288:	f000 fcba 	bl	8000c00 <BSP_COM_Init>
 800028c:	1e03      	subs	r3, r0, #0
 800028e:	d002      	beq.n	8000296 <main+0x76>
  {
    Error_Handler();
 8000290:	f000 f9bc 	bl	800060c <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000294:	46c0      	nop			@ (mov r8, r8)
 8000296:	46c0      	nop			@ (mov r8, r8)
 8000298:	e7fd      	b.n	8000296 <main+0x76>
 800029a:	46c0      	nop			@ (mov r8, r8)
 800029c:	20000000 	.word	0x20000000
 80002a0:	20000118 	.word	0x20000118
 80002a4:	200001c8 	.word	0x200001c8
 80002a8:	20000058 	.word	0x20000058
 80002ac:	20000048 	.word	0x20000048

080002b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b0:	b590      	push	{r4, r7, lr}
 80002b2:	b08d      	sub	sp, #52	@ 0x34
 80002b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b6:	2414      	movs	r4, #20
 80002b8:	193b      	adds	r3, r7, r4
 80002ba:	0018      	movs	r0, r3
 80002bc:	231c      	movs	r3, #28
 80002be:	001a      	movs	r2, r3
 80002c0:	2100      	movs	r1, #0
 80002c2:	f005 fa4b 	bl	800575c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c6:	003b      	movs	r3, r7
 80002c8:	0018      	movs	r0, r3
 80002ca:	2314      	movs	r3, #20
 80002cc:	001a      	movs	r2, r3
 80002ce:	2100      	movs	r1, #0
 80002d0:	f005 fa44 	bl	800575c <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 80002d4:	4b19      	ldr	r3, [pc, #100]	@ (800033c <SystemClock_Config+0x8c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	2207      	movs	r2, #7
 80002da:	4393      	bics	r3, r2
 80002dc:	001a      	movs	r2, r3
 80002de:	4b17      	ldr	r3, [pc, #92]	@ (800033c <SystemClock_Config+0x8c>)
 80002e0:	2101      	movs	r1, #1
 80002e2:	430a      	orrs	r2, r1
 80002e4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002e6:	193b      	adds	r3, r7, r4
 80002e8:	2201      	movs	r2, #1
 80002ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ec:	193b      	adds	r3, r7, r4
 80002ee:	2280      	movs	r2, #128	@ 0x80
 80002f0:	0252      	lsls	r2, r2, #9
 80002f2:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	0018      	movs	r0, r3
 80002f8:	f004 f9da 	bl	80046b0 <HAL_RCC_OscConfig>
 80002fc:	1e03      	subs	r3, r0, #0
 80002fe:	d001      	beq.n	8000304 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000300:	f000 f984 	bl	800060c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000304:	003b      	movs	r3, r7
 8000306:	2207      	movs	r2, #7
 8000308:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800030a:	003b      	movs	r3, r7
 800030c:	2201      	movs	r2, #1
 800030e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000310:	003b      	movs	r3, r7
 8000312:	2200      	movs	r2, #0
 8000314:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000316:	003b      	movs	r3, r7
 8000318:	2200      	movs	r2, #0
 800031a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800031c:	003b      	movs	r3, r7
 800031e:	2200      	movs	r2, #0
 8000320:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000322:	003b      	movs	r3, r7
 8000324:	2101      	movs	r1, #1
 8000326:	0018      	movs	r0, r3
 8000328:	f004 fba6 	bl	8004a78 <HAL_RCC_ClockConfig>
 800032c:	1e03      	subs	r3, r0, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000330:	f000 f96c 	bl	800060c <Error_Handler>
  }
}
 8000334:	46c0      	nop			@ (mov r8, r8)
 8000336:	46bd      	mov	sp, r7
 8000338:	b00d      	add	sp, #52	@ 0x34
 800033a:	bd90      	pop	{r4, r7, pc}
 800033c:	40022000 	.word	0x40022000

08000340 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	0018      	movs	r0, r3
 800034a:	230c      	movs	r3, #12
 800034c:	001a      	movs	r2, r3
 800034e:	2100      	movs	r1, #0
 8000350:	f005 fa04 	bl	800575c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000354:	4b44      	ldr	r3, [pc, #272]	@ (8000468 <MX_ADC1_Init+0x128>)
 8000356:	4a45      	ldr	r2, [pc, #276]	@ (800046c <MX_ADC1_Init+0x12c>)
 8000358:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800035a:	4b43      	ldr	r3, [pc, #268]	@ (8000468 <MX_ADC1_Init+0x128>)
 800035c:	2280      	movs	r2, #128	@ 0x80
 800035e:	05d2      	lsls	r2, r2, #23
 8000360:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000362:	4b41      	ldr	r3, [pc, #260]	@ (8000468 <MX_ADC1_Init+0x128>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000368:	4b3f      	ldr	r3, [pc, #252]	@ (8000468 <MX_ADC1_Init+0x128>)
 800036a:	2200      	movs	r2, #0
 800036c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800036e:	4b3e      	ldr	r3, [pc, #248]	@ (8000468 <MX_ADC1_Init+0x128>)
 8000370:	2280      	movs	r2, #128	@ 0x80
 8000372:	0392      	lsls	r2, r2, #14
 8000374:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000376:	4b3c      	ldr	r3, [pc, #240]	@ (8000468 <MX_ADC1_Init+0x128>)
 8000378:	2204      	movs	r2, #4
 800037a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800037c:	4b3a      	ldr	r3, [pc, #232]	@ (8000468 <MX_ADC1_Init+0x128>)
 800037e:	2200      	movs	r2, #0
 8000380:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000382:	4b39      	ldr	r3, [pc, #228]	@ (8000468 <MX_ADC1_Init+0x128>)
 8000384:	2200      	movs	r2, #0
 8000386:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000388:	4b37      	ldr	r3, [pc, #220]	@ (8000468 <MX_ADC1_Init+0x128>)
 800038a:	2201      	movs	r2, #1
 800038c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 800038e:	4b36      	ldr	r3, [pc, #216]	@ (8000468 <MX_ADC1_Init+0x128>)
 8000390:	2204      	movs	r2, #4
 8000392:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000394:	4b34      	ldr	r3, [pc, #208]	@ (8000468 <MX_ADC1_Init+0x128>)
 8000396:	2200      	movs	r2, #0
 8000398:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800039a:	4b33      	ldr	r3, [pc, #204]	@ (8000468 <MX_ADC1_Init+0x128>)
 800039c:	2200      	movs	r2, #0
 800039e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80003a0:	4b31      	ldr	r3, [pc, #196]	@ (8000468 <MX_ADC1_Init+0x128>)
 80003a2:	222c      	movs	r2, #44	@ 0x2c
 80003a4:	2101      	movs	r1, #1
 80003a6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003a8:	4b2f      	ldr	r3, [pc, #188]	@ (8000468 <MX_ADC1_Init+0x128>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80003ae:	4b2e      	ldr	r3, [pc, #184]	@ (8000468 <MX_ADC1_Init+0x128>)
 80003b0:	2207      	movs	r2, #7
 80003b2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80003b4:	4b2c      	ldr	r3, [pc, #176]	@ (8000468 <MX_ADC1_Init+0x128>)
 80003b6:	2207      	movs	r2, #7
 80003b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80003ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000468 <MX_ADC1_Init+0x128>)
 80003bc:	223c      	movs	r2, #60	@ 0x3c
 80003be:	2100      	movs	r1, #0
 80003c0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80003c2:	4b29      	ldr	r3, [pc, #164]	@ (8000468 <MX_ADC1_Init+0x128>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003c8:	4b27      	ldr	r3, [pc, #156]	@ (8000468 <MX_ADC1_Init+0x128>)
 80003ca:	0018      	movs	r0, r3
 80003cc:	f000 feb2 	bl	8001134 <HAL_ADC_Init>
 80003d0:	1e03      	subs	r3, r0, #0
 80003d2:	d001      	beq.n	80003d8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80003d4:	f000 f91a 	bl	800060c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	2201      	movs	r2, #1
 80003dc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	2200      	movs	r2, #0
 80003e2:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	2200      	movs	r2, #0
 80003e8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003ea:	1d3a      	adds	r2, r7, #4
 80003ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000468 <MX_ADC1_Init+0x128>)
 80003ee:	0011      	movs	r1, r2
 80003f0:	0018      	movs	r0, r3
 80003f2:	f001 fa4d 	bl	8001890 <HAL_ADC_ConfigChannel>
 80003f6:	1e03      	subs	r3, r0, #0
 80003f8:	d001      	beq.n	80003fe <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 80003fa:	f000 f907 	bl	800060c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	4a1b      	ldr	r2, [pc, #108]	@ (8000470 <MX_ADC1_Init+0x130>)
 8000402:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	2204      	movs	r2, #4
 8000408:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800040a:	1d3a      	adds	r2, r7, #4
 800040c:	4b16      	ldr	r3, [pc, #88]	@ (8000468 <MX_ADC1_Init+0x128>)
 800040e:	0011      	movs	r1, r2
 8000410:	0018      	movs	r0, r3
 8000412:	f001 fa3d 	bl	8001890 <HAL_ADC_ConfigChannel>
 8000416:	1e03      	subs	r3, r0, #0
 8000418:	d001      	beq.n	800041e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800041a:	f000 f8f7 	bl	800060c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	4a14      	ldr	r2, [pc, #80]	@ (8000474 <MX_ADC1_Init+0x134>)
 8000422:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	2208      	movs	r2, #8
 8000428:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800042a:	1d3a      	adds	r2, r7, #4
 800042c:	4b0e      	ldr	r3, [pc, #56]	@ (8000468 <MX_ADC1_Init+0x128>)
 800042e:	0011      	movs	r1, r2
 8000430:	0018      	movs	r0, r3
 8000432:	f001 fa2d 	bl	8001890 <HAL_ADC_ConfigChannel>
 8000436:	1e03      	subs	r3, r0, #0
 8000438:	d001      	beq.n	800043e <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800043a:	f000 f8e7 	bl	800060c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	4a0d      	ldr	r2, [pc, #52]	@ (8000478 <MX_ADC1_Init+0x138>)
 8000442:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	220c      	movs	r2, #12
 8000448:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800044a:	1d3a      	adds	r2, r7, #4
 800044c:	4b06      	ldr	r3, [pc, #24]	@ (8000468 <MX_ADC1_Init+0x128>)
 800044e:	0011      	movs	r1, r2
 8000450:	0018      	movs	r0, r3
 8000452:	f001 fa1d 	bl	8001890 <HAL_ADC_ConfigChannel>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d001      	beq.n	800045e <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 800045a:	f000 f8d7 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	46bd      	mov	sp, r7
 8000462:	b004      	add	sp, #16
 8000464:	bd80      	pop	{r7, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)
 8000468:	20000058 	.word	0x20000058
 800046c:	40012400 	.word	0x40012400
 8000470:	04000002 	.word	0x04000002
 8000474:	10000010 	.word	0x10000010
 8000478:	2c000800 	.word	0x2c000800

0800047c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000480:	4b1c      	ldr	r3, [pc, #112]	@ (80004f4 <MX_I2C1_Init+0x78>)
 8000482:	4a1d      	ldr	r2, [pc, #116]	@ (80004f8 <MX_I2C1_Init+0x7c>)
 8000484:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 8000486:	4b1b      	ldr	r3, [pc, #108]	@ (80004f4 <MX_I2C1_Init+0x78>)
 8000488:	4a1c      	ldr	r2, [pc, #112]	@ (80004fc <MX_I2C1_Init+0x80>)
 800048a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 160;
 800048c:	4b19      	ldr	r3, [pc, #100]	@ (80004f4 <MX_I2C1_Init+0x78>)
 800048e:	22a0      	movs	r2, #160	@ 0xa0
 8000490:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000492:	4b18      	ldr	r3, [pc, #96]	@ (80004f4 <MX_I2C1_Init+0x78>)
 8000494:	2201      	movs	r2, #1
 8000496:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000498:	4b16      	ldr	r3, [pc, #88]	@ (80004f4 <MX_I2C1_Init+0x78>)
 800049a:	2200      	movs	r2, #0
 800049c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800049e:	4b15      	ldr	r3, [pc, #84]	@ (80004f4 <MX_I2C1_Init+0x78>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004a4:	4b13      	ldr	r3, [pc, #76]	@ (80004f4 <MX_I2C1_Init+0x78>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004aa:	4b12      	ldr	r3, [pc, #72]	@ (80004f4 <MX_I2C1_Init+0x78>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80004b0:	4b10      	ldr	r3, [pc, #64]	@ (80004f4 <MX_I2C1_Init+0x78>)
 80004b2:	2280      	movs	r2, #128	@ 0x80
 80004b4:	0292      	lsls	r2, r2, #10
 80004b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004b8:	4b0e      	ldr	r3, [pc, #56]	@ (80004f4 <MX_I2C1_Init+0x78>)
 80004ba:	0018      	movs	r0, r3
 80004bc:	f002 fac0 	bl	8002a40 <HAL_I2C_Init>
 80004c0:	1e03      	subs	r3, r0, #0
 80004c2:	d001      	beq.n	80004c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004c4:	f000 f8a2 	bl	800060c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004c8:	4b0a      	ldr	r3, [pc, #40]	@ (80004f4 <MX_I2C1_Init+0x78>)
 80004ca:	2100      	movs	r1, #0
 80004cc:	0018      	movs	r0, r3
 80004ce:	f004 f857 	bl	8004580 <HAL_I2CEx_ConfigAnalogFilter>
 80004d2:	1e03      	subs	r3, r0, #0
 80004d4:	d001      	beq.n	80004da <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80004d6:	f000 f899 	bl	800060c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004da:	4b06      	ldr	r3, [pc, #24]	@ (80004f4 <MX_I2C1_Init+0x78>)
 80004dc:	2100      	movs	r1, #0
 80004de:	0018      	movs	r0, r3
 80004e0:	f004 f89a 	bl	8004618 <HAL_I2CEx_ConfigDigitalFilter>
 80004e4:	1e03      	subs	r3, r0, #0
 80004e6:	d001      	beq.n	80004ec <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80004e8:	f000 f890 	bl	800060c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004ec:	46c0      	nop			@ (mov r8, r8)
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)
 80004f4:	20000118 	.word	0x20000118
 80004f8:	40005400 	.word	0x40005400
 80004fc:	10805d88 	.word	0x10805d88

08000500 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000506:	4b10      	ldr	r3, [pc, #64]	@ (8000548 <MX_DMA_Init+0x48>)
 8000508:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800050a:	4b0f      	ldr	r3, [pc, #60]	@ (8000548 <MX_DMA_Init+0x48>)
 800050c:	2101      	movs	r1, #1
 800050e:	430a      	orrs	r2, r1
 8000510:	639a      	str	r2, [r3, #56]	@ 0x38
 8000512:	4b0d      	ldr	r3, [pc, #52]	@ (8000548 <MX_DMA_Init+0x48>)
 8000514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000516:	2201      	movs	r2, #1
 8000518:	4013      	ands	r3, r2
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	2100      	movs	r1, #0
 8000522:	2009      	movs	r0, #9
 8000524:	f001 fd62 	bl	8001fec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000528:	2009      	movs	r0, #9
 800052a:	f001 fd74 	bl	8002016 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800052e:	2200      	movs	r2, #0
 8000530:	2100      	movs	r1, #0
 8000532:	200a      	movs	r0, #10
 8000534:	f001 fd5a 	bl	8001fec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000538:	200a      	movs	r0, #10
 800053a:	f001 fd6c 	bl	8002016 <HAL_NVIC_EnableIRQ>

}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	b002      	add	sp, #8
 8000544:	bd80      	pop	{r7, pc}
 8000546:	46c0      	nop			@ (mov r8, r8)
 8000548:	40021000 	.word	0x40021000

0800054c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000552:	4b1a      	ldr	r3, [pc, #104]	@ (80005bc <MX_GPIO_Init+0x70>)
 8000554:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000556:	4b19      	ldr	r3, [pc, #100]	@ (80005bc <MX_GPIO_Init+0x70>)
 8000558:	2104      	movs	r1, #4
 800055a:	430a      	orrs	r2, r1
 800055c:	635a      	str	r2, [r3, #52]	@ 0x34
 800055e:	4b17      	ldr	r3, [pc, #92]	@ (80005bc <MX_GPIO_Init+0x70>)
 8000560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000562:	2204      	movs	r2, #4
 8000564:	4013      	ands	r3, r2
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800056a:	4b14      	ldr	r3, [pc, #80]	@ (80005bc <MX_GPIO_Init+0x70>)
 800056c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800056e:	4b13      	ldr	r3, [pc, #76]	@ (80005bc <MX_GPIO_Init+0x70>)
 8000570:	2120      	movs	r1, #32
 8000572:	430a      	orrs	r2, r1
 8000574:	635a      	str	r2, [r3, #52]	@ 0x34
 8000576:	4b11      	ldr	r3, [pc, #68]	@ (80005bc <MX_GPIO_Init+0x70>)
 8000578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800057a:	2220      	movs	r2, #32
 800057c:	4013      	ands	r3, r2
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000582:	4b0e      	ldr	r3, [pc, #56]	@ (80005bc <MX_GPIO_Init+0x70>)
 8000584:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000586:	4b0d      	ldr	r3, [pc, #52]	@ (80005bc <MX_GPIO_Init+0x70>)
 8000588:	2101      	movs	r1, #1
 800058a:	430a      	orrs	r2, r1
 800058c:	635a      	str	r2, [r3, #52]	@ 0x34
 800058e:	4b0b      	ldr	r3, [pc, #44]	@ (80005bc <MX_GPIO_Init+0x70>)
 8000590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000592:	2201      	movs	r2, #1
 8000594:	4013      	ands	r3, r2
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059a:	4b08      	ldr	r3, [pc, #32]	@ (80005bc <MX_GPIO_Init+0x70>)
 800059c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800059e:	4b07      	ldr	r3, [pc, #28]	@ (80005bc <MX_GPIO_Init+0x70>)
 80005a0:	2102      	movs	r1, #2
 80005a2:	430a      	orrs	r2, r1
 80005a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80005a6:	4b05      	ldr	r3, [pc, #20]	@ (80005bc <MX_GPIO_Init+0x70>)
 80005a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005aa:	2202      	movs	r2, #2
 80005ac:	4013      	ands	r3, r2
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005b2:	46c0      	nop			@ (mov r8, r8)
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b004      	add	sp, #16
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	46c0      	nop			@ (mov r8, r8)
 80005bc:	40021000 	.word	0x40021000

080005c0 <HAL_I2C_SlaveTxCpltCallback>:
/* USER CODE BEGIN 4 */


// Callback for listen complete
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
    // Re-arm for next master read
    HAL_I2C_Slave_Transmit_DMA(hi2c, test_data, 8);
 80005c8:	4904      	ldr	r1, [pc, #16]	@ (80005dc <HAL_I2C_SlaveTxCpltCallback+0x1c>)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2208      	movs	r2, #8
 80005ce:	0018      	movs	r0, r3
 80005d0:	f002 fadc 	bl	8002b8c <HAL_I2C_Slave_Transmit_DMA>
}
 80005d4:	46c0      	nop			@ (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	b002      	add	sp, #8
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000000 	.word	0x20000000

080005e0 <HAL_I2C_ErrorCallback>:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	I2C_Code = HAL_I2C_GetError(hi2c);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	0018      	movs	r0, r3
 80005ec:	f002 fc8c 	bl	8002f08 <HAL_I2C_GetError>
 80005f0:	0002      	movs	r2, r0
 80005f2:	4b04      	ldr	r3, [pc, #16]	@ (8000604 <HAL_I2C_ErrorCallback+0x24>)
 80005f4:	601a      	str	r2, [r3, #0]
	I2C_Error = 1;
 80005f6:	4b04      	ldr	r3, [pc, #16]	@ (8000608 <HAL_I2C_ErrorCallback+0x28>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	601a      	str	r2, [r3, #0]
}
 80005fc:	46c0      	nop			@ (mov r8, r8)
 80005fe:	46bd      	mov	sp, r7
 8000600:	b002      	add	sp, #8
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200001d4 	.word	0x200001d4
 8000608:	200001d0 	.word	0x200001d0

0800060c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000610:	b672      	cpsid	i
}
 8000612:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000614:	46c0      	nop			@ (mov r8, r8)
 8000616:	e7fd      	b.n	8000614 <Error_Handler+0x8>

08000618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061e:	4b0f      	ldr	r3, [pc, #60]	@ (800065c <HAL_MspInit+0x44>)
 8000620:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000622:	4b0e      	ldr	r3, [pc, #56]	@ (800065c <HAL_MspInit+0x44>)
 8000624:	2101      	movs	r1, #1
 8000626:	430a      	orrs	r2, r1
 8000628:	641a      	str	r2, [r3, #64]	@ 0x40
 800062a:	4b0c      	ldr	r3, [pc, #48]	@ (800065c <HAL_MspInit+0x44>)
 800062c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062e:	2201      	movs	r2, #1
 8000630:	4013      	ands	r3, r2
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000636:	4b09      	ldr	r3, [pc, #36]	@ (800065c <HAL_MspInit+0x44>)
 8000638:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800063a:	4b08      	ldr	r3, [pc, #32]	@ (800065c <HAL_MspInit+0x44>)
 800063c:	2180      	movs	r1, #128	@ 0x80
 800063e:	0549      	lsls	r1, r1, #21
 8000640:	430a      	orrs	r2, r1
 8000642:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000644:	4b05      	ldr	r3, [pc, #20]	@ (800065c <HAL_MspInit+0x44>)
 8000646:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000648:	2380      	movs	r3, #128	@ 0x80
 800064a:	055b      	lsls	r3, r3, #21
 800064c:	4013      	ands	r3, r2
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000652:	46c0      	nop			@ (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	b002      	add	sp, #8
 8000658:	bd80      	pop	{r7, pc}
 800065a:	46c0      	nop			@ (mov r8, r8)
 800065c:	40021000 	.word	0x40021000

08000660 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b091      	sub	sp, #68	@ 0x44
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	232c      	movs	r3, #44	@ 0x2c
 800066a:	18fb      	adds	r3, r7, r3
 800066c:	0018      	movs	r0, r3
 800066e:	2314      	movs	r3, #20
 8000670:	001a      	movs	r2, r3
 8000672:	2100      	movs	r1, #0
 8000674:	f005 f872 	bl	800575c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000678:	2410      	movs	r4, #16
 800067a:	193b      	adds	r3, r7, r4
 800067c:	0018      	movs	r0, r3
 800067e:	231c      	movs	r3, #28
 8000680:	001a      	movs	r2, r3
 8000682:	2100      	movs	r1, #0
 8000684:	f005 f86a 	bl	800575c <memset>
  if(hadc->Instance==ADC1)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a39      	ldr	r2, [pc, #228]	@ (8000774 <HAL_ADC_MspInit+0x114>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d16b      	bne.n	800076a <HAL_ADC_MspInit+0x10a>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000692:	193b      	adds	r3, r7, r4
 8000694:	2220      	movs	r2, #32
 8000696:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000698:	193b      	adds	r3, r7, r4
 800069a:	2200      	movs	r2, #0
 800069c:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	0018      	movs	r0, r3
 80006a2:	f004 fb5f 	bl	8004d64 <HAL_RCCEx_PeriphCLKConfig>
 80006a6:	1e03      	subs	r3, r0, #0
 80006a8:	d001      	beq.n	80006ae <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 80006aa:	f7ff ffaf 	bl	800060c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006ae:	4b32      	ldr	r3, [pc, #200]	@ (8000778 <HAL_ADC_MspInit+0x118>)
 80006b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006b2:	4b31      	ldr	r3, [pc, #196]	@ (8000778 <HAL_ADC_MspInit+0x118>)
 80006b4:	2180      	movs	r1, #128	@ 0x80
 80006b6:	0349      	lsls	r1, r1, #13
 80006b8:	430a      	orrs	r2, r1
 80006ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80006bc:	4b2e      	ldr	r3, [pc, #184]	@ (8000778 <HAL_ADC_MspInit+0x118>)
 80006be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006c0:	2380      	movs	r3, #128	@ 0x80
 80006c2:	035b      	lsls	r3, r3, #13
 80006c4:	4013      	ands	r3, r2
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	4b2b      	ldr	r3, [pc, #172]	@ (8000778 <HAL_ADC_MspInit+0x118>)
 80006cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000778 <HAL_ADC_MspInit+0x118>)
 80006d0:	2101      	movs	r1, #1
 80006d2:	430a      	orrs	r2, r1
 80006d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80006d6:	4b28      	ldr	r3, [pc, #160]	@ (8000778 <HAL_ADC_MspInit+0x118>)
 80006d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006da:	2201      	movs	r2, #1
 80006dc:	4013      	ands	r3, r2
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA11 [PA9]     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_11;
 80006e2:	212c      	movs	r1, #44	@ 0x2c
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	4a25      	ldr	r2, [pc, #148]	@ (800077c <HAL_ADC_MspInit+0x11c>)
 80006e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2203      	movs	r2, #3
 80006ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	187a      	adds	r2, r7, r1
 80006f8:	23a0      	movs	r3, #160	@ 0xa0
 80006fa:	05db      	lsls	r3, r3, #23
 80006fc:	0011      	movs	r1, r2
 80006fe:	0018      	movs	r0, r3
 8000700:	f002 f80e 	bl	8002720 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8000704:	4b1e      	ldr	r3, [pc, #120]	@ (8000780 <HAL_ADC_MspInit+0x120>)
 8000706:	4a1f      	ldr	r2, [pc, #124]	@ (8000784 <HAL_ADC_MspInit+0x124>)
 8000708:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800070a:	4b1d      	ldr	r3, [pc, #116]	@ (8000780 <HAL_ADC_MspInit+0x120>)
 800070c:	2205      	movs	r2, #5
 800070e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000710:	4b1b      	ldr	r3, [pc, #108]	@ (8000780 <HAL_ADC_MspInit+0x120>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000716:	4b1a      	ldr	r3, [pc, #104]	@ (8000780 <HAL_ADC_MspInit+0x120>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800071c:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <HAL_ADC_MspInit+0x120>)
 800071e:	2280      	movs	r2, #128	@ 0x80
 8000720:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000722:	4b17      	ldr	r3, [pc, #92]	@ (8000780 <HAL_ADC_MspInit+0x120>)
 8000724:	2280      	movs	r2, #128	@ 0x80
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800072a:	4b15      	ldr	r3, [pc, #84]	@ (8000780 <HAL_ADC_MspInit+0x120>)
 800072c:	2280      	movs	r2, #128	@ 0x80
 800072e:	00d2      	lsls	r2, r2, #3
 8000730:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000732:	4b13      	ldr	r3, [pc, #76]	@ (8000780 <HAL_ADC_MspInit+0x120>)
 8000734:	2220      	movs	r2, #32
 8000736:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000738:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <HAL_ADC_MspInit+0x120>)
 800073a:	2200      	movs	r2, #0
 800073c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800073e:	4b10      	ldr	r3, [pc, #64]	@ (8000780 <HAL_ADC_MspInit+0x120>)
 8000740:	0018      	movs	r0, r3
 8000742:	f001 fc85 	bl	8002050 <HAL_DMA_Init>
 8000746:	1e03      	subs	r3, r0, #0
 8000748:	d001      	beq.n	800074e <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 800074a:	f7ff ff5f 	bl	800060c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4a0b      	ldr	r2, [pc, #44]	@ (8000780 <HAL_ADC_MspInit+0x120>)
 8000752:	651a      	str	r2, [r3, #80]	@ 0x50
 8000754:	4b0a      	ldr	r3, [pc, #40]	@ (8000780 <HAL_ADC_MspInit+0x120>)
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	629a      	str	r2, [r3, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2100      	movs	r1, #0
 800075e:	200c      	movs	r0, #12
 8000760:	f001 fc44 	bl	8001fec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000764:	200c      	movs	r0, #12
 8000766:	f001 fc56 	bl	8002016 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800076a:	46c0      	nop			@ (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	b011      	add	sp, #68	@ 0x44
 8000770:	bd90      	pop	{r4, r7, pc}
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	40012400 	.word	0x40012400
 8000778:	40021000 	.word	0x40021000
 800077c:	00000813 	.word	0x00000813
 8000780:	200000bc 	.word	0x200000bc
 8000784:	4002001c 	.word	0x4002001c

08000788 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b091      	sub	sp, #68	@ 0x44
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	232c      	movs	r3, #44	@ 0x2c
 8000792:	18fb      	adds	r3, r7, r3
 8000794:	0018      	movs	r0, r3
 8000796:	2314      	movs	r3, #20
 8000798:	001a      	movs	r2, r3
 800079a:	2100      	movs	r1, #0
 800079c:	f004 ffde 	bl	800575c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007a0:	2410      	movs	r4, #16
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	0018      	movs	r0, r3
 80007a6:	231c      	movs	r3, #28
 80007a8:	001a      	movs	r2, r3
 80007aa:	2100      	movs	r1, #0
 80007ac:	f004 ffd6 	bl	800575c <memset>
  if(hi2c->Instance==I2C1)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a3b      	ldr	r2, [pc, #236]	@ (80008a4 <HAL_I2C_MspInit+0x11c>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d170      	bne.n	800089c <HAL_I2C_MspInit+0x114>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	2202      	movs	r2, #2
 80007be:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007c6:	193b      	adds	r3, r7, r4
 80007c8:	0018      	movs	r0, r3
 80007ca:	f004 facb 	bl	8004d64 <HAL_RCCEx_PeriphCLKConfig>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d001      	beq.n	80007d6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80007d2:	f7ff ff1b 	bl	800060c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	4b34      	ldr	r3, [pc, #208]	@ (80008a8 <HAL_I2C_MspInit+0x120>)
 80007d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007da:	4b33      	ldr	r3, [pc, #204]	@ (80008a8 <HAL_I2C_MspInit+0x120>)
 80007dc:	2102      	movs	r1, #2
 80007de:	430a      	orrs	r2, r1
 80007e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80007e2:	4b31      	ldr	r3, [pc, #196]	@ (80008a8 <HAL_I2C_MspInit+0x120>)
 80007e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007e6:	2202      	movs	r2, #2
 80007e8:	4013      	ands	r3, r2
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007ee:	212c      	movs	r1, #44	@ 0x2c
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	22c0      	movs	r2, #192	@ 0xc0
 80007f4:	0092      	lsls	r2, r2, #2
 80007f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2212      	movs	r2, #18
 80007fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	187b      	adds	r3, r7, r1
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2206      	movs	r2, #6
 800080e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000810:	187b      	adds	r3, r7, r1
 8000812:	4a26      	ldr	r2, [pc, #152]	@ (80008ac <HAL_I2C_MspInit+0x124>)
 8000814:	0019      	movs	r1, r3
 8000816:	0010      	movs	r0, r2
 8000818:	f001 ff82 	bl	8002720 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800081c:	4b22      	ldr	r3, [pc, #136]	@ (80008a8 <HAL_I2C_MspInit+0x120>)
 800081e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000820:	4b21      	ldr	r3, [pc, #132]	@ (80008a8 <HAL_I2C_MspInit+0x120>)
 8000822:	2180      	movs	r1, #128	@ 0x80
 8000824:	0389      	lsls	r1, r1, #14
 8000826:	430a      	orrs	r2, r1
 8000828:	63da      	str	r2, [r3, #60]	@ 0x3c
 800082a:	4b1f      	ldr	r3, [pc, #124]	@ (80008a8 <HAL_I2C_MspInit+0x120>)
 800082c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800082e:	2380      	movs	r3, #128	@ 0x80
 8000830:	039b      	lsls	r3, r3, #14
 8000832:	4013      	ands	r3, r2
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel1;
 8000838:	4b1d      	ldr	r3, [pc, #116]	@ (80008b0 <HAL_I2C_MspInit+0x128>)
 800083a:	4a1e      	ldr	r2, [pc, #120]	@ (80008b4 <HAL_I2C_MspInit+0x12c>)
 800083c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800083e:	4b1c      	ldr	r3, [pc, #112]	@ (80008b0 <HAL_I2C_MspInit+0x128>)
 8000840:	220b      	movs	r2, #11
 8000842:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000844:	4b1a      	ldr	r3, [pc, #104]	@ (80008b0 <HAL_I2C_MspInit+0x128>)
 8000846:	2210      	movs	r2, #16
 8000848:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800084a:	4b19      	ldr	r3, [pc, #100]	@ (80008b0 <HAL_I2C_MspInit+0x128>)
 800084c:	2200      	movs	r2, #0
 800084e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000850:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <HAL_I2C_MspInit+0x128>)
 8000852:	2280      	movs	r2, #128	@ 0x80
 8000854:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000856:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <HAL_I2C_MspInit+0x128>)
 8000858:	2200      	movs	r2, #0
 800085a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800085c:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <HAL_I2C_MspInit+0x128>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000862:	4b13      	ldr	r3, [pc, #76]	@ (80008b0 <HAL_I2C_MspInit+0x128>)
 8000864:	2200      	movs	r2, #0
 8000866:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000868:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <HAL_I2C_MspInit+0x128>)
 800086a:	2280      	movs	r2, #128	@ 0x80
 800086c:	0192      	lsls	r2, r2, #6
 800086e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000870:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <HAL_I2C_MspInit+0x128>)
 8000872:	0018      	movs	r0, r3
 8000874:	f001 fbec 	bl	8002050 <HAL_DMA_Init>
 8000878:	1e03      	subs	r3, r0, #0
 800087a:	d001      	beq.n	8000880 <HAL_I2C_MspInit+0xf8>
    {
      Error_Handler();
 800087c:	f7ff fec6 	bl	800060c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a0b      	ldr	r2, [pc, #44]	@ (80008b0 <HAL_I2C_MspInit+0x128>)
 8000884:	639a      	str	r2, [r3, #56]	@ 0x38
 8000886:	4b0a      	ldr	r3, [pc, #40]	@ (80008b0 <HAL_I2C_MspInit+0x128>)
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800088c:	2200      	movs	r2, #0
 800088e:	2100      	movs	r1, #0
 8000890:	2017      	movs	r0, #23
 8000892:	f001 fbab 	bl	8001fec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000896:	2017      	movs	r0, #23
 8000898:	f001 fbbd 	bl	8002016 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800089c:	46c0      	nop			@ (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b011      	add	sp, #68	@ 0x44
 80008a2:	bd90      	pop	{r4, r7, pc}
 80008a4:	40005400 	.word	0x40005400
 80008a8:	40021000 	.word	0x40021000
 80008ac:	50000400 	.word	0x50000400
 80008b0:	2000016c 	.word	0x2000016c
 80008b4:	40020008 	.word	0x40020008

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008bc:	46c0      	nop			@ (mov r8, r8)
 80008be:	e7fd      	b.n	80008bc <NMI_Handler+0x4>

080008c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c4:	46c0      	nop			@ (mov r8, r8)
 80008c6:	e7fd      	b.n	80008c4 <HardFault_Handler+0x4>

080008c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008cc:	46c0      	nop			@ (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d6:	46c0      	nop			@ (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e0:	f000 fab8 	bl	8000e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e4:	46c0      	nop			@ (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80008ee:	2000      	movs	r0, #0
 80008f0:	f000 f964 	bl	8000bbc <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80008f4:	46c0      	nop			@ (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000900:	4b03      	ldr	r3, [pc, #12]	@ (8000910 <DMA1_Channel1_IRQHandler+0x14>)
 8000902:	0018      	movs	r0, r3
 8000904:	f001 fd30 	bl	8002368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000908:	46c0      	nop			@ (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	2000016c 	.word	0x2000016c

08000914 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000918:	4b03      	ldr	r3, [pc, #12]	@ (8000928 <DMA1_Channel2_3_IRQHandler+0x14>)
 800091a:	0018      	movs	r0, r3
 800091c:	f001 fd24 	bl	8002368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000920:	46c0      	nop			@ (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			@ (mov r8, r8)
 8000928:	200000bc 	.word	0x200000bc

0800092c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000930:	4b03      	ldr	r3, [pc, #12]	@ (8000940 <ADC1_IRQHandler+0x14>)
 8000932:	0018      	movs	r0, r3
 8000934:	f000 fe32 	bl	800159c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000938:	46c0      	nop			@ (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			@ (mov r8, r8)
 8000940:	20000058 	.word	0x20000058

08000944 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 interrupt (combined with EXTI 23).
  */
void I2C1_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8000948:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <I2C1_IRQHandler+0x2c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	699a      	ldr	r2, [r3, #24]
 800094e:	23e0      	movs	r3, #224	@ 0xe0
 8000950:	00db      	lsls	r3, r3, #3
 8000952:	4013      	ands	r3, r2
 8000954:	d004      	beq.n	8000960 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <I2C1_IRQHandler+0x2c>)
 8000958:	0018      	movs	r0, r3
 800095a:	f002 fa2b 	bl	8002db4 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800095e:	e003      	b.n	8000968 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000960:	4b03      	ldr	r3, [pc, #12]	@ (8000970 <I2C1_IRQHandler+0x2c>)
 8000962:	0018      	movs	r0, r3
 8000964:	f002 fa0c 	bl	8002d80 <HAL_I2C_EV_IRQHandler>
}
 8000968:	46c0      	nop			@ (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	46c0      	nop			@ (mov r8, r8)
 8000970:	20000118 	.word	0x20000118

08000974 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000978:	4b03      	ldr	r3, [pc, #12]	@ (8000988 <SystemInit+0x14>)
 800097a:	2280      	movs	r2, #128	@ 0x80
 800097c:	0512      	lsls	r2, r2, #20
 800097e:	609a      	str	r2, [r3, #8]
#endif
}
 8000980:	46c0      	nop			@ (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800098c:	480d      	ldr	r0, [pc, #52]	@ (80009c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800098e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000990:	f7ff fff0 	bl	8000974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000994:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000996:	e003      	b.n	80009a0 <LoopCopyDataInit>

08000998 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000998:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800099a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800099c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800099e:	3104      	adds	r1, #4

080009a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009a0:	480a      	ldr	r0, [pc, #40]	@ (80009cc <LoopForever+0xa>)
  ldr r3, =_edata
 80009a2:	4b0b      	ldr	r3, [pc, #44]	@ (80009d0 <LoopForever+0xe>)
  adds r2, r0, r1
 80009a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009a8:	d3f6      	bcc.n	8000998 <CopyDataInit>
  ldr r2, =_sbss
 80009aa:	4a0a      	ldr	r2, [pc, #40]	@ (80009d4 <LoopForever+0x12>)
  b LoopFillZerobss
 80009ac:	e002      	b.n	80009b4 <LoopFillZerobss>

080009ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  str  r3, [r2]
 80009b0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b2:	3204      	adds	r2, #4

080009b4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80009b4:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <LoopForever+0x16>)
  cmp r2, r3
 80009b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009b8:	d3f9      	bcc.n	80009ae <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80009ba:	f004 fed7 	bl	800576c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009be:	f7ff fc2f 	bl	8000220 <main>

080009c2 <LoopForever>:

LoopForever:
    b LoopForever
 80009c2:	e7fe      	b.n	80009c2 <LoopForever>
  ldr   r0, =_estack
 80009c4:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 80009c8:	08005854 	.word	0x08005854
  ldr r0, =_sdata
 80009cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80009d0:	2000002c 	.word	0x2000002c
  ldr r2, =_sbss
 80009d4:	2000002c 	.word	0x2000002c
  ldr r3, = _ebss
 80009d8:	2000027c 	.word	0x2000027c

080009dc <DMAMUX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009dc:	e7fe      	b.n	80009dc <DMAMUX1_IRQHandler>
	...

080009e0 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	@ 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	0002      	movs	r2, r0
 80009e8:	1dfb      	adds	r3, r7, #7
 80009ea:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

#if defined (USE_NUCLEO_64)
  if ((Led != LED1)
 80009f0:	1dfb      	adds	r3, r7, #7
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d007      	beq.n	8000a08 <BSP_LED_Init+0x28>
      && (Led != LED2))
 80009f8:	1dfb      	adds	r3, r7, #7
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d003      	beq.n	8000a08 <BSP_LED_Init+0x28>
#else
  if (Led != LED4)
#endif /* defined (USE_NUCLEO_64) */
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000a00:	2302      	movs	r3, #2
 8000a02:	425b      	negs	r3, r3
 8000a04:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a06:	e04a      	b.n	8000a9e <BSP_LED_Init+0xbe>
  }
  else
  {
    /* Enable the GPIO LED Clock */
#if defined (USE_NUCLEO_64)
    if (Led == LED1)
 8000a08:	1dfb      	adds	r3, r7, #7
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d10c      	bne.n	8000a2a <BSP_LED_Init+0x4a>
    {
      LED1_GPIO_CLK_ENABLE();
 8000a10:	4b25      	ldr	r3, [pc, #148]	@ (8000aa8 <BSP_LED_Init+0xc8>)
 8000a12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a14:	4b24      	ldr	r3, [pc, #144]	@ (8000aa8 <BSP_LED_Init+0xc8>)
 8000a16:	2101      	movs	r1, #1
 8000a18:	430a      	orrs	r2, r1
 8000a1a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a1c:	4b22      	ldr	r3, [pc, #136]	@ (8000aa8 <BSP_LED_Init+0xc8>)
 8000a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a20:	2201      	movs	r2, #1
 8000a22:	4013      	ands	r3, r2
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	e00b      	b.n	8000a42 <BSP_LED_Init+0x62>
    }
    else
    {
      LED2_GPIO_CLK_ENABLE();
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa8 <BSP_LED_Init+0xc8>)
 8000a2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa8 <BSP_LED_Init+0xc8>)
 8000a30:	2104      	movs	r1, #4
 8000a32:	430a      	orrs	r2, r1
 8000a34:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a36:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa8 <BSP_LED_Init+0xc8>)
 8000a38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a3a:	2204      	movs	r2, #4
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
      LED4_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_64) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000a42:	1dfb      	adds	r3, r7, #7
 8000a44:	781a      	ldrb	r2, [r3, #0]
 8000a46:	4b19      	ldr	r3, [pc, #100]	@ (8000aac <BSP_LED_Init+0xcc>)
 8000a48:	0052      	lsls	r2, r2, #1
 8000a4a:	5ad3      	ldrh	r3, [r2, r3]
 8000a4c:	001a      	movs	r2, r3
 8000a4e:	2110      	movs	r1, #16
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	601a      	str	r2, [r3, #0]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	2201      	movs	r2, #1
 8000a58:	605a      	str	r2, [r3, #4]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000a5a:	187b      	adds	r3, r7, r1
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2203      	movs	r2, #3
 8000a64:	60da      	str	r2, [r3, #12]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	781a      	ldrb	r2, [r3, #0]
 8000a6a:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <BSP_LED_Init+0xd0>)
 8000a6c:	0092      	lsls	r2, r2, #2
 8000a6e:	58d3      	ldr	r3, [r2, r3]
 8000a70:	187a      	adds	r2, r7, r1
 8000a72:	0011      	movs	r1, r2
 8000a74:	0018      	movs	r0, r3
 8000a76:	f001 fe53 	bl	8002720 <HAL_GPIO_Init>
#if defined (USE_NUCLEO_64)
    if (Led == LED2)
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d10d      	bne.n	8000a9e <BSP_LED_Init+0xbe>
    {
     HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	781a      	ldrb	r2, [r3, #0]
 8000a86:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab0 <BSP_LED_Init+0xd0>)
 8000a88:	0092      	lsls	r2, r2, #2
 8000a8a:	58d0      	ldr	r0, [r2, r3]
 8000a8c:	1dfb      	adds	r3, r7, #7
 8000a8e:	781a      	ldrb	r2, [r3, #0]
 8000a90:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <BSP_LED_Init+0xcc>)
 8000a92:	0052      	lsls	r2, r2, #1
 8000a94:	5ad3      	ldrh	r3, [r2, r3]
 8000a96:	2201      	movs	r2, #1
 8000a98:	0019      	movs	r1, r3
 8000a9a:	f001 ffb3 	bl	8002a04 <HAL_GPIO_WritePin>
    }
#endif
  }
  return ret;
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b00a      	add	sp, #40	@ 0x28
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	0800582c 	.word	0x0800582c
 8000ab0:	20000010 	.word	0x20000010

08000ab4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b088      	sub	sp, #32
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	0002      	movs	r2, r0
 8000abc:	1dfb      	adds	r3, r7, #7
 8000abe:	701a      	strb	r2, [r3, #0]
 8000ac0:	1dbb      	adds	r3, r7, #6
 8000ac2:	1c0a      	adds	r2, r1, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000ac6:	4b36      	ldr	r3, [pc, #216]	@ (8000ba0 <BSP_PB_Init+0xec>)
 8000ac8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000aca:	4b35      	ldr	r3, [pc, #212]	@ (8000ba0 <BSP_PB_Init+0xec>)
 8000acc:	2104      	movs	r1, #4
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ad2:	4b33      	ldr	r3, [pc, #204]	@ (8000ba0 <BSP_PB_Init+0xec>)
 8000ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ad6:	2204      	movs	r2, #4
 8000ad8:	4013      	ands	r3, r2
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000ade:	2380      	movs	r3, #128	@ 0x80
 8000ae0:	019b      	lsls	r3, r3, #6
 8000ae2:	001a      	movs	r2, r3
 8000ae4:	210c      	movs	r1, #12
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2201      	movs	r2, #1
 8000aee:	609a      	str	r2, [r3, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2202      	movs	r2, #2
 8000af4:	60da      	str	r2, [r3, #12]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000af6:	1dbb      	adds	r3, r7, #6
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d10d      	bne.n	8000b1a <BSP_PB_Init+0x66>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2200      	movs	r2, #0
 8000b02:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000b04:	1dfb      	adds	r3, r7, #7
 8000b06:	781a      	ldrb	r2, [r3, #0]
 8000b08:	4b26      	ldr	r3, [pc, #152]	@ (8000ba4 <BSP_PB_Init+0xf0>)
 8000b0a:	0092      	lsls	r2, r2, #2
 8000b0c:	58d3      	ldr	r3, [r2, r3]
 8000b0e:	187a      	adds	r2, r7, r1
 8000b10:	0011      	movs	r1, r2
 8000b12:	0018      	movs	r0, r3
 8000b14:	f001 fe04 	bl	8002720 <HAL_GPIO_Init>
 8000b18:	e03c      	b.n	8000b94 <BSP_PB_Init+0xe0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8000b1a:	210c      	movs	r1, #12
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	4a22      	ldr	r2, [pc, #136]	@ (8000ba8 <BSP_PB_Init+0xf4>)
 8000b20:	605a      	str	r2, [r3, #4]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	781a      	ldrb	r2, [r3, #0]
 8000b26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba4 <BSP_PB_Init+0xf0>)
 8000b28:	0092      	lsls	r2, r2, #2
 8000b2a:	58d3      	ldr	r3, [r2, r3]
 8000b2c:	187a      	adds	r2, r7, r1
 8000b2e:	0011      	movs	r1, r2
 8000b30:	0018      	movs	r0, r3
 8000b32:	f001 fdf5 	bl	8002720 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	781a      	ldrb	r2, [r3, #0]
 8000b3a:	0013      	movs	r3, r2
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	189b      	adds	r3, r3, r2
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	4a1a      	ldr	r2, [pc, #104]	@ (8000bac <BSP_PB_Init+0xf8>)
 8000b44:	1898      	adds	r0, r3, r2
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	781a      	ldrb	r2, [r3, #0]
 8000b4a:	4b19      	ldr	r3, [pc, #100]	@ (8000bb0 <BSP_PB_Init+0xfc>)
 8000b4c:	0092      	lsls	r2, r2, #2
 8000b4e:	58d3      	ldr	r3, [r2, r3]
 8000b50:	0019      	movs	r1, r3
 8000b52:	f001 fd89 	bl	8002668 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000b56:	1dfb      	adds	r3, r7, #7
 8000b58:	781a      	ldrb	r2, [r3, #0]
 8000b5a:	0013      	movs	r3, r2
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	189b      	adds	r3, r3, r2
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	4a12      	ldr	r2, [pc, #72]	@ (8000bac <BSP_PB_Init+0xf8>)
 8000b64:	1898      	adds	r0, r3, r2
 8000b66:	1dfb      	adds	r3, r7, #7
 8000b68:	781a      	ldrb	r2, [r3, #0]
 8000b6a:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <BSP_PB_Init+0x100>)
 8000b6c:	0092      	lsls	r2, r2, #2
 8000b6e:	58d3      	ldr	r3, [r2, r3]
 8000b70:	001a      	movs	r2, r3
 8000b72:	2100      	movs	r1, #0
 8000b74:	f001 fd46 	bl	8002604 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000b78:	2007      	movs	r0, #7
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	781a      	ldrb	r2, [r3, #0]
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb8 <BSP_PB_Init+0x104>)
 8000b80:	0092      	lsls	r2, r2, #2
 8000b82:	58d3      	ldr	r3, [r2, r3]
 8000b84:	2200      	movs	r2, #0
 8000b86:	0019      	movs	r1, r3
 8000b88:	f001 fa30 	bl	8001fec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000b8c:	2307      	movs	r3, #7
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f001 fa41 	bl	8002016 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	0018      	movs	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b008      	add	sp, #32
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	46c0      	nop			@ (mov r8, r8)
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	20000018 	.word	0x20000018
 8000ba8:	10210000 	.word	0x10210000
 8000bac:	200001d8 	.word	0x200001d8
 8000bb0:	08005830 	.word	0x08005830
 8000bb4:	2000001c 	.word	0x2000001c
 8000bb8:	20000020 	.word	0x20000020

08000bbc <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	0002      	movs	r2, r0
 8000bc4:	1dfb      	adds	r3, r7, #7
 8000bc6:	701a      	strb	r2, [r3, #0]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000bc8:	1dfb      	adds	r3, r7, #7
 8000bca:	781a      	ldrb	r2, [r3, #0]
 8000bcc:	0013      	movs	r3, r2
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	189b      	adds	r3, r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	4a04      	ldr	r2, [pc, #16]	@ (8000be8 <BSP_PB_IRQHandler+0x2c>)
 8000bd6:	189b      	adds	r3, r3, r2
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f001 fd57 	bl	800268c <HAL_EXTI_IRQHandler>
}
 8000bde:	46c0      	nop			@ (mov r8, r8)
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b002      	add	sp, #8
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			@ (mov r8, r8)
 8000be8:	200001d8 	.word	0x200001d8

08000bec <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	0002      	movs	r2, r0
 8000bf4:	1dfb      	adds	r3, r7, #7
 8000bf6:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000bf8:	46c0      	nop			@ (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b002      	add	sp, #8
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	0002      	movs	r2, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	1dfb      	adds	r3, r7, #7
 8000c0c:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d003      	beq.n	8000c22 <BSP_COM_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	425b      	negs	r3, r3
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	e018      	b.n	8000c54 <BSP_COM_Init+0x54>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2294      	movs	r2, #148	@ 0x94
 8000c28:	435a      	muls	r2, r3
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c60 <BSP_COM_Init+0x60>)
 8000c2c:	18d3      	adds	r3, r2, r3
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f000 f856 	bl	8000ce0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART2_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000c34:	1dfb      	adds	r3, r7, #7
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2294      	movs	r2, #148	@ 0x94
 8000c3a:	435a      	muls	r2, r3
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <BSP_COM_Init+0x60>)
 8000c3e:	18d3      	adds	r3, r2, r3
 8000c40:	683a      	ldr	r2, [r7, #0]
 8000c42:	0011      	movs	r1, r2
 8000c44:	0018      	movs	r0, r3
 8000c46:	f000 f80d 	bl	8000c64 <MX_USART2_Init>
 8000c4a:	1e03      	subs	r3, r0, #0
 8000c4c:	d002      	beq.n	8000c54 <BSP_COM_Init+0x54>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000c4e:	2304      	movs	r3, #4
 8000c50:	425b      	negs	r3, r3
 8000c52:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000c54:	68fb      	ldr	r3, [r7, #12]
}
 8000c56:	0018      	movs	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	b004      	add	sp, #16
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			@ (mov r8, r8)
 8000c60:	200001e4 	.word	0x200001e4

08000c64 <MX_USART2_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART2_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8000c6e:	4b17      	ldr	r3, [pc, #92]	@ (8000ccc <MX_USART2_Init+0x68>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	220c      	movs	r2, #12
 8000c82:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	895b      	ldrh	r3, [r3, #10]
 8000c88:	001a      	movs	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685a      	ldr	r2, [r3, #4]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	891b      	ldrh	r3, [r3, #8]
 8000c9a:	001a      	movs	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	899b      	ldrh	r3, [r3, #12]
 8000ca4:	001a      	movs	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2280      	movs	r2, #128	@ 0x80
 8000cae:	0212      	lsls	r2, r2, #8
 8000cb0:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f004 f93e 	bl	8004f3c <HAL_UART_Init>
 8000cc0:	0003      	movs	r3, r0
}
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b002      	add	sp, #8
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	2000000c 	.word	0x2000000c

08000cd0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f7ff ff89 	bl	8000bec <BSP_PB_Callback>
}
 8000cda:	46c0      	nop			@ (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b08b      	sub	sp, #44	@ 0x2c
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000ce8:	4b28      	ldr	r3, [pc, #160]	@ (8000d8c <COM1_MspInit+0xac>)
 8000cea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cec:	4b27      	ldr	r3, [pc, #156]	@ (8000d8c <COM1_MspInit+0xac>)
 8000cee:	2101      	movs	r1, #1
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cf4:	4b25      	ldr	r3, [pc, #148]	@ (8000d8c <COM1_MspInit+0xac>)
 8000cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000d00:	4b22      	ldr	r3, [pc, #136]	@ (8000d8c <COM1_MspInit+0xac>)
 8000d02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d04:	4b21      	ldr	r3, [pc, #132]	@ (8000d8c <COM1_MspInit+0xac>)
 8000d06:	2101      	movs	r1, #1
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d8c <COM1_MspInit+0xac>)
 8000d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d10:	2201      	movs	r2, #1
 8000d12:	4013      	ands	r3, r2
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000d18:	4b1c      	ldr	r3, [pc, #112]	@ (8000d8c <COM1_MspInit+0xac>)
 8000d1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d8c <COM1_MspInit+0xac>)
 8000d1e:	2180      	movs	r1, #128	@ 0x80
 8000d20:	0289      	lsls	r1, r1, #10
 8000d22:	430a      	orrs	r2, r1
 8000d24:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d26:	4b19      	ldr	r3, [pc, #100]	@ (8000d8c <COM1_MspInit+0xac>)
 8000d28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d2a:	2380      	movs	r3, #128	@ 0x80
 8000d2c:	029b      	lsls	r3, r3, #10
 8000d2e:	4013      	ands	r3, r2
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000d34:	2414      	movs	r4, #20
 8000d36:	193b      	adds	r3, r7, r4
 8000d38:	2204      	movs	r2, #4
 8000d3a:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000d3c:	193b      	adds	r3, r7, r4
 8000d3e:	2202      	movs	r2, #2
 8000d40:	605a      	str	r2, [r3, #4]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000d42:	193b      	adds	r3, r7, r4
 8000d44:	2202      	movs	r2, #2
 8000d46:	60da      	str	r2, [r3, #12]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000d48:	193b      	adds	r3, r7, r4
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	609a      	str	r2, [r3, #8]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000d4e:	193b      	adds	r3, r7, r4
 8000d50:	2201      	movs	r2, #1
 8000d52:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000d54:	193a      	adds	r2, r7, r4
 8000d56:	23a0      	movs	r3, #160	@ 0xa0
 8000d58:	05db      	lsls	r3, r3, #23
 8000d5a:	0011      	movs	r1, r2
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f001 fcdf 	bl	8002720 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8000d62:	193b      	adds	r3, r7, r4
 8000d64:	2208      	movs	r2, #8
 8000d66:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000d68:	193b      	adds	r3, r7, r4
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	605a      	str	r2, [r3, #4]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000d6e:	193b      	adds	r3, r7, r4
 8000d70:	2201      	movs	r2, #1
 8000d72:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000d74:	193a      	adds	r2, r7, r4
 8000d76:	23a0      	movs	r3, #160	@ 0xa0
 8000d78:	05db      	lsls	r3, r3, #23
 8000d7a:	0011      	movs	r1, r2
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f001 fccf 	bl	8002720 <HAL_GPIO_Init>
}
 8000d82:	46c0      	nop			@ (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b00b      	add	sp, #44	@ 0x2c
 8000d88:	bd90      	pop	{r4, r7, pc}
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	40021000 	.word	0x40021000

08000d90 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d96:	1dfb      	adds	r3, r7, #7
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f000 f80f 	bl	8000dc0 <HAL_InitTick>
 8000da2:	1e03      	subs	r3, r0, #0
 8000da4:	d003      	beq.n	8000dae <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000da6:	1dfb      	adds	r3, r7, #7
 8000da8:	2201      	movs	r2, #1
 8000daa:	701a      	strb	r2, [r3, #0]
 8000dac:	e001      	b.n	8000db2 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dae:	f7ff fc33 	bl	8000618 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	781b      	ldrb	r3, [r3, #0]
}
 8000db6:	0018      	movs	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b002      	add	sp, #8
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc8:	230f      	movs	r3, #15
 8000dca:	18fb      	adds	r3, r7, r3
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e48 <HAL_InitTick+0x88>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d02b      	beq.n	8000e30 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e4c <HAL_InitTick+0x8c>)
 8000dda:	681c      	ldr	r4, [r3, #0]
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e48 <HAL_InitTick+0x88>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	0019      	movs	r1, r3
 8000de2:	23fa      	movs	r3, #250	@ 0xfa
 8000de4:	0098      	lsls	r0, r3, #2
 8000de6:	f7ff f98f 	bl	8000108 <__udivsi3>
 8000dea:	0003      	movs	r3, r0
 8000dec:	0019      	movs	r1, r3
 8000dee:	0020      	movs	r0, r4
 8000df0:	f7ff f98a 	bl	8000108 <__udivsi3>
 8000df4:	0003      	movs	r3, r0
 8000df6:	0018      	movs	r0, r3
 8000df8:	f001 f91d 	bl	8002036 <HAL_SYSTICK_Config>
 8000dfc:	1e03      	subs	r3, r0, #0
 8000dfe:	d112      	bne.n	8000e26 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b03      	cmp	r3, #3
 8000e04:	d80a      	bhi.n	8000e1c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	2301      	movs	r3, #1
 8000e0a:	425b      	negs	r3, r3
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f001 f8ec 	bl	8001fec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e14:	4b0e      	ldr	r3, [pc, #56]	@ (8000e50 <HAL_InitTick+0x90>)
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	e00d      	b.n	8000e38 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	18fb      	adds	r3, r7, r3
 8000e20:	2201      	movs	r2, #1
 8000e22:	701a      	strb	r2, [r3, #0]
 8000e24:	e008      	b.n	8000e38 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e26:	230f      	movs	r3, #15
 8000e28:	18fb      	adds	r3, r7, r3
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	701a      	strb	r2, [r3, #0]
 8000e2e:	e003      	b.n	8000e38 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e30:	230f      	movs	r3, #15
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	2201      	movs	r2, #1
 8000e36:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e38:	230f      	movs	r3, #15
 8000e3a:	18fb      	adds	r3, r7, r3
 8000e3c:	781b      	ldrb	r3, [r3, #0]
}
 8000e3e:	0018      	movs	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b005      	add	sp, #20
 8000e44:	bd90      	pop	{r4, r7, pc}
 8000e46:	46c0      	nop			@ (mov r8, r8)
 8000e48:	20000028 	.word	0x20000028
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20000024 	.word	0x20000024

08000e54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e58:	4b05      	ldr	r3, [pc, #20]	@ (8000e70 <HAL_IncTick+0x1c>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	001a      	movs	r2, r3
 8000e5e:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <HAL_IncTick+0x20>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	18d2      	adds	r2, r2, r3
 8000e64:	4b03      	ldr	r3, [pc, #12]	@ (8000e74 <HAL_IncTick+0x20>)
 8000e66:	601a      	str	r2, [r3, #0]
}
 8000e68:	46c0      	nop			@ (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			@ (mov r8, r8)
 8000e70:	20000028 	.word	0x20000028
 8000e74:	20000278 	.word	0x20000278

08000e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e7c:	4b02      	ldr	r3, [pc, #8]	@ (8000e88 <HAL_GetTick+0x10>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	0018      	movs	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	46c0      	nop			@ (mov r8, r8)
 8000e88:	20000278 	.word	0x20000278

08000e8c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a05      	ldr	r2, [pc, #20]	@ (8000eb0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000e9c:	401a      	ands	r2, r3
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	431a      	orrs	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	601a      	str	r2, [r3, #0]
}
 8000ea6:	46c0      	nop			@ (mov r8, r8)
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	b002      	add	sp, #8
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	46c0      	nop			@ (mov r8, r8)
 8000eb0:	ff3fffff 	.word	0xff3fffff

08000eb4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	23c0      	movs	r3, #192	@ 0xc0
 8000ec2:	041b      	lsls	r3, r3, #16
 8000ec4:	4013      	ands	r3, r2
}
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b002      	add	sp, #8
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b084      	sub	sp, #16
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	60f8      	str	r0, [r7, #12]
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	2104      	movs	r1, #4
 8000ee2:	400a      	ands	r2, r1
 8000ee4:	2107      	movs	r1, #7
 8000ee6:	4091      	lsls	r1, r2
 8000ee8:	000a      	movs	r2, r1
 8000eea:	43d2      	mvns	r2, r2
 8000eec:	401a      	ands	r2, r3
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	2104      	movs	r1, #4
 8000ef2:	400b      	ands	r3, r1
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	4099      	lsls	r1, r3
 8000ef8:	000b      	movs	r3, r1
 8000efa:	431a      	orrs	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000f00:	46c0      	nop			@ (mov r8, r8)
 8000f02:	46bd      	mov	sp, r7
 8000f04:	b004      	add	sp, #16
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	683a      	ldr	r2, [r7, #0]
 8000f18:	2104      	movs	r1, #4
 8000f1a:	400a      	ands	r2, r1
 8000f1c:	2107      	movs	r1, #7
 8000f1e:	4091      	lsls	r1, r2
 8000f20:	000a      	movs	r2, r1
 8000f22:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	2104      	movs	r1, #4
 8000f28:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000f2a:	40da      	lsrs	r2, r3
 8000f2c:	0013      	movs	r3, r2
}
 8000f2e:	0018      	movs	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	b002      	add	sp, #8
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	23c0      	movs	r3, #192	@ 0xc0
 8000f44:	011b      	lsls	r3, r3, #4
 8000f46:	4013      	ands	r3, r2
 8000f48:	d101      	bne.n	8000f4e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e000      	b.n	8000f50 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	0018      	movs	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b002      	add	sp, #8
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f68:	68ba      	ldr	r2, [r7, #8]
 8000f6a:	211f      	movs	r1, #31
 8000f6c:	400a      	ands	r2, r1
 8000f6e:	210f      	movs	r1, #15
 8000f70:	4091      	lsls	r1, r2
 8000f72:	000a      	movs	r2, r1
 8000f74:	43d2      	mvns	r2, r2
 8000f76:	401a      	ands	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	0e9b      	lsrs	r3, r3, #26
 8000f7c:	210f      	movs	r1, #15
 8000f7e:	4019      	ands	r1, r3
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	201f      	movs	r0, #31
 8000f84:	4003      	ands	r3, r0
 8000f86:	4099      	lsls	r1, r3
 8000f88:	000b      	movs	r3, r1
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f90:	46c0      	nop			@ (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b004      	add	sp, #16
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	025b      	lsls	r3, r3, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	431a      	orrs	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fb2:	46c0      	nop			@ (mov r8, r8)
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b002      	add	sp, #8
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
 8000fc2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	0252      	lsls	r2, r2, #9
 8000fcc:	0a52      	lsrs	r2, r2, #9
 8000fce:	43d2      	mvns	r2, r2
 8000fd0:	401a      	ands	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fd6:	46c0      	nop			@ (mov r8, r8)
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b002      	add	sp, #8
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	2203      	movs	r2, #3
 8000fec:	4013      	ands	r3, r2
}
 8000fee:	0018      	movs	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	b002      	add	sp, #8
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	68ba      	ldr	r2, [r7, #8]
 800100a:	0212      	lsls	r2, r2, #8
 800100c:	43d2      	mvns	r2, r2
 800100e:	401a      	ands	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	021b      	lsls	r3, r3, #8
 8001014:	6879      	ldr	r1, [r7, #4]
 8001016:	400b      	ands	r3, r1
 8001018:	4904      	ldr	r1, [pc, #16]	@ (800102c <LL_ADC_SetChannelSamplingTime+0x34>)
 800101a:	400b      	ands	r3, r1
 800101c:	431a      	orrs	r2, r3
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001022:	46c0      	nop			@ (mov r8, r8)
 8001024:	46bd      	mov	sp, r7
 8001026:	b004      	add	sp, #16
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			@ (mov r8, r8)
 800102c:	7fffff00 	.word	0x7fffff00

08001030 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	4a05      	ldr	r2, [pc, #20]	@ (8001054 <LL_ADC_EnableInternalRegulator+0x24>)
 800103e:	4013      	ands	r3, r2
 8001040:	2280      	movs	r2, #128	@ 0x80
 8001042:	0552      	lsls	r2, r2, #21
 8001044:	431a      	orrs	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800104a:	46c0      	nop			@ (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b002      	add	sp, #8
 8001050:	bd80      	pop	{r7, pc}
 8001052:	46c0      	nop			@ (mov r8, r8)
 8001054:	6fffffe8 	.word	0x6fffffe8

08001058 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	2380      	movs	r3, #128	@ 0x80
 8001066:	055b      	lsls	r3, r3, #21
 8001068:	401a      	ands	r2, r3
 800106a:	2380      	movs	r3, #128	@ 0x80
 800106c:	055b      	lsls	r3, r3, #21
 800106e:	429a      	cmp	r2, r3
 8001070:	d101      	bne.n	8001076 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001072:	2301      	movs	r3, #1
 8001074:	e000      	b.n	8001078 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001076:	2300      	movs	r3, #0
}
 8001078:	0018      	movs	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	b002      	add	sp, #8
 800107e:	bd80      	pop	{r7, pc}

08001080 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	4a04      	ldr	r2, [pc, #16]	@ (80010a0 <LL_ADC_Enable+0x20>)
 800108e:	4013      	ands	r3, r2
 8001090:	2201      	movs	r2, #1
 8001092:	431a      	orrs	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001098:	46c0      	nop			@ (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	b002      	add	sp, #8
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	7fffffe8 	.word	0x7fffffe8

080010a4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	4a04      	ldr	r2, [pc, #16]	@ (80010c4 <LL_ADC_Disable+0x20>)
 80010b2:	4013      	ands	r3, r2
 80010b4:	2202      	movs	r2, #2
 80010b6:	431a      	orrs	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80010bc:	46c0      	nop			@ (mov r8, r8)
 80010be:	46bd      	mov	sp, r7
 80010c0:	b002      	add	sp, #8
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	7fffffe8 	.word	0x7fffffe8

080010c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	2201      	movs	r2, #1
 80010d6:	4013      	ands	r3, r2
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d101      	bne.n	80010e0 <LL_ADC_IsEnabled+0x18>
 80010dc:	2301      	movs	r3, #1
 80010de:	e000      	b.n	80010e2 <LL_ADC_IsEnabled+0x1a>
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	0018      	movs	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b002      	add	sp, #8
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	4a04      	ldr	r2, [pc, #16]	@ (800110c <LL_ADC_REG_StartConversion+0x20>)
 80010fa:	4013      	ands	r3, r2
 80010fc:	2204      	movs	r2, #4
 80010fe:	431a      	orrs	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001104:	46c0      	nop			@ (mov r8, r8)
 8001106:	46bd      	mov	sp, r7
 8001108:	b002      	add	sp, #8
 800110a:	bd80      	pop	{r7, pc}
 800110c:	7fffffe8 	.word	0x7fffffe8

08001110 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	2204      	movs	r2, #4
 800111e:	4013      	ands	r3, r2
 8001120:	2b04      	cmp	r3, #4
 8001122:	d101      	bne.n	8001128 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001124:	2301      	movs	r3, #1
 8001126:	e000      	b.n	800112a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001128:	2300      	movs	r3, #0
}
 800112a:	0018      	movs	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	b002      	add	sp, #8
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800113c:	231f      	movs	r3, #31
 800113e:	18fb      	adds	r3, r7, r3
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001144:	2300      	movs	r3, #0
 8001146:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e17e      	b.n	8001458 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115e:	2b00      	cmp	r3, #0
 8001160:	d10a      	bne.n	8001178 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	0018      	movs	r0, r3
 8001166:	f7ff fa7b 	bl	8000660 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2254      	movs	r2, #84	@ 0x54
 8001174:	2100      	movs	r1, #0
 8001176:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	0018      	movs	r0, r3
 800117e:	f7ff ff6b 	bl	8001058 <LL_ADC_IsInternalRegulatorEnabled>
 8001182:	1e03      	subs	r3, r0, #0
 8001184:	d114      	bne.n	80011b0 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	0018      	movs	r0, r3
 800118c:	f7ff ff50 	bl	8001030 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001190:	4bb3      	ldr	r3, [pc, #716]	@ (8001460 <HAL_ADC_Init+0x32c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	49b3      	ldr	r1, [pc, #716]	@ (8001464 <HAL_ADC_Init+0x330>)
 8001196:	0018      	movs	r0, r3
 8001198:	f7fe ffb6 	bl	8000108 <__udivsi3>
 800119c:	0003      	movs	r3, r0
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80011a2:	e002      	b.n	80011aa <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1f9      	bne.n	80011a4 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	0018      	movs	r0, r3
 80011b6:	f7ff ff4f 	bl	8001058 <LL_ADC_IsInternalRegulatorEnabled>
 80011ba:	1e03      	subs	r3, r0, #0
 80011bc:	d10f      	bne.n	80011de <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c2:	2210      	movs	r2, #16
 80011c4:	431a      	orrs	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011ce:	2201      	movs	r2, #1
 80011d0:	431a      	orrs	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80011d6:	231f      	movs	r3, #31
 80011d8:	18fb      	adds	r3, r7, r3
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	0018      	movs	r0, r3
 80011e4:	f7ff ff94 	bl	8001110 <LL_ADC_REG_IsConversionOngoing>
 80011e8:	0003      	movs	r3, r0
 80011ea:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f0:	2210      	movs	r2, #16
 80011f2:	4013      	ands	r3, r2
 80011f4:	d000      	beq.n	80011f8 <HAL_ADC_Init+0xc4>
 80011f6:	e122      	b.n	800143e <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d000      	beq.n	8001200 <HAL_ADC_Init+0xcc>
 80011fe:	e11e      	b.n	800143e <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001204:	4a98      	ldr	r2, [pc, #608]	@ (8001468 <HAL_ADC_Init+0x334>)
 8001206:	4013      	ands	r3, r2
 8001208:	2202      	movs	r2, #2
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	0018      	movs	r0, r3
 8001216:	f7ff ff57 	bl	80010c8 <LL_ADC_IsEnabled>
 800121a:	1e03      	subs	r3, r0, #0
 800121c:	d000      	beq.n	8001220 <HAL_ADC_Init+0xec>
 800121e:	e0ad      	b.n	800137c <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	7e1b      	ldrb	r3, [r3, #24]
 8001228:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800122a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7e5b      	ldrb	r3, [r3, #25]
 8001230:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001232:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	7e9b      	ldrb	r3, [r3, #26]
 8001238:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800123a:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001240:	2b00      	cmp	r3, #0
 8001242:	d002      	beq.n	800124a <HAL_ADC_Init+0x116>
 8001244:	2380      	movs	r3, #128	@ 0x80
 8001246:	015b      	lsls	r3, r3, #5
 8001248:	e000      	b.n	800124c <HAL_ADC_Init+0x118>
 800124a:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800124c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001252:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	2b00      	cmp	r3, #0
 800125a:	da04      	bge.n	8001266 <HAL_ADC_Init+0x132>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	085b      	lsrs	r3, r3, #1
 8001264:	e001      	b.n	800126a <HAL_ADC_Init+0x136>
 8001266:	2380      	movs	r3, #128	@ 0x80
 8001268:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 800126a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	212c      	movs	r1, #44	@ 0x2c
 8001270:	5c5b      	ldrb	r3, [r3, r1]
 8001272:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001274:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2220      	movs	r2, #32
 8001280:	5c9b      	ldrb	r3, [r3, r2]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d115      	bne.n	80012b2 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	7e9b      	ldrb	r3, [r3, #26]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d105      	bne.n	800129a <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	2280      	movs	r2, #128	@ 0x80
 8001292:	0252      	lsls	r2, r2, #9
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
 8001298:	e00b      	b.n	80012b2 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800129e:	2220      	movs	r2, #32
 80012a0:	431a      	orrs	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012aa:	2201      	movs	r2, #1
 80012ac:	431a      	orrs	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00a      	beq.n	80012d0 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012be:	23e0      	movs	r3, #224	@ 0xe0
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80012c8:	4313      	orrs	r3, r2
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	4a65      	ldr	r2, [pc, #404]	@ (800146c <HAL_ADC_Init+0x338>)
 80012d8:	4013      	ands	r3, r2
 80012da:	0019      	movs	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	0f9b      	lsrs	r3, r3, #30
 80012ec:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012f2:	4313      	orrs	r3, r2
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	223c      	movs	r2, #60	@ 0x3c
 80012fe:	5c9b      	ldrb	r3, [r3, r2]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d111      	bne.n	8001328 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	0f9b      	lsrs	r3, r3, #30
 800130a:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001310:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001316:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800131c:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	4313      	orrs	r3, r2
 8001322:	2201      	movs	r2, #1
 8001324:	4313      	orrs	r3, r2
 8001326:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	4a50      	ldr	r2, [pc, #320]	@ (8001470 <HAL_ADC_Init+0x33c>)
 8001330:	4013      	ands	r3, r2
 8001332:	0019      	movs	r1, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	697a      	ldr	r2, [r7, #20]
 800133a:	430a      	orrs	r2, r1
 800133c:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	23c0      	movs	r3, #192	@ 0xc0
 8001344:	061b      	lsls	r3, r3, #24
 8001346:	429a      	cmp	r2, r3
 8001348:	d018      	beq.n	800137c <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800134e:	2380      	movs	r3, #128	@ 0x80
 8001350:	05db      	lsls	r3, r3, #23
 8001352:	429a      	cmp	r2, r3
 8001354:	d012      	beq.n	800137c <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800135a:	2380      	movs	r3, #128	@ 0x80
 800135c:	061b      	lsls	r3, r3, #24
 800135e:	429a      	cmp	r2, r3
 8001360:	d00c      	beq.n	800137c <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001362:	4b44      	ldr	r3, [pc, #272]	@ (8001474 <HAL_ADC_Init+0x340>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a44      	ldr	r2, [pc, #272]	@ (8001478 <HAL_ADC_Init+0x344>)
 8001368:	4013      	ands	r3, r2
 800136a:	0019      	movs	r1, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	23f0      	movs	r3, #240	@ 0xf0
 8001372:	039b      	lsls	r3, r3, #14
 8001374:	401a      	ands	r2, r3
 8001376:	4b3f      	ldr	r3, [pc, #252]	@ (8001474 <HAL_ADC_Init+0x340>)
 8001378:	430a      	orrs	r2, r1
 800137a:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001384:	001a      	movs	r2, r3
 8001386:	2100      	movs	r1, #0
 8001388:	f7ff fda1 	bl	8000ece <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6818      	ldr	r0, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001394:	4939      	ldr	r1, [pc, #228]	@ (800147c <HAL_ADC_Init+0x348>)
 8001396:	001a      	movs	r2, r3
 8001398:	f7ff fd99 	bl	8000ece <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d109      	bne.n	80013b8 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2110      	movs	r1, #16
 80013b0:	4249      	negs	r1, r1
 80013b2:	430a      	orrs	r2, r1
 80013b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80013b6:	e018      	b.n	80013ea <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	2380      	movs	r3, #128	@ 0x80
 80013be:	039b      	lsls	r3, r3, #14
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d112      	bne.n	80013ea <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	221c      	movs	r2, #28
 80013d4:	4013      	ands	r3, r2
 80013d6:	2210      	movs	r2, #16
 80013d8:	4252      	negs	r2, r2
 80013da:	409a      	lsls	r2, r3
 80013dc:	0011      	movs	r1, r2
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2100      	movs	r1, #0
 80013f0:	0018      	movs	r0, r3
 80013f2:	f7ff fd89 	bl	8000f08 <LL_ADC_GetSamplingTimeCommonChannels>
 80013f6:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d10b      	bne.n	8001418 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800140a:	2203      	movs	r2, #3
 800140c:	4393      	bics	r3, r2
 800140e:	2201      	movs	r2, #1
 8001410:	431a      	orrs	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001416:	e01c      	b.n	8001452 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141c:	2212      	movs	r2, #18
 800141e:	4393      	bics	r3, r2
 8001420:	2210      	movs	r2, #16
 8001422:	431a      	orrs	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800142c:	2201      	movs	r2, #1
 800142e:	431a      	orrs	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001434:	231f      	movs	r3, #31
 8001436:	18fb      	adds	r3, r7, r3
 8001438:	2201      	movs	r2, #1
 800143a:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800143c:	e009      	b.n	8001452 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001442:	2210      	movs	r2, #16
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800144a:	231f      	movs	r3, #31
 800144c:	18fb      	adds	r3, r7, r3
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001452:	231f      	movs	r3, #31
 8001454:	18fb      	adds	r3, r7, r3
 8001456:	781b      	ldrb	r3, [r3, #0]
}
 8001458:	0018      	movs	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	b008      	add	sp, #32
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000008 	.word	0x20000008
 8001464:	00030d40 	.word	0x00030d40
 8001468:	fffffefd 	.word	0xfffffefd
 800146c:	ffde0201 	.word	0xffde0201
 8001470:	1ffffc02 	.word	0x1ffffc02
 8001474:	40012708 	.word	0x40012708
 8001478:	ffc3ffff 	.word	0xffc3ffff
 800147c:	7fffff04 	.word	0x7fffff04

08001480 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001480:	b5b0      	push	{r4, r5, r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	0018      	movs	r0, r3
 8001492:	f7ff fe3d 	bl	8001110 <LL_ADC_REG_IsConversionOngoing>
 8001496:	1e03      	subs	r3, r0, #0
 8001498:	d16c      	bne.n	8001574 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2254      	movs	r2, #84	@ 0x54
 800149e:	5c9b      	ldrb	r3, [r3, r2]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d101      	bne.n	80014a8 <HAL_ADC_Start_DMA+0x28>
 80014a4:	2302      	movs	r3, #2
 80014a6:	e06c      	b.n	8001582 <HAL_ADC_Start_DMA+0x102>
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2254      	movs	r2, #84	@ 0x54
 80014ac:	2101      	movs	r1, #1
 80014ae:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	2201      	movs	r2, #1
 80014b8:	4013      	ands	r3, r2
 80014ba:	d113      	bne.n	80014e4 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	0018      	movs	r0, r3
 80014c2:	f7ff fe01 	bl	80010c8 <LL_ADC_IsEnabled>
 80014c6:	1e03      	subs	r3, r0, #0
 80014c8:	d004      	beq.n	80014d4 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	0018      	movs	r0, r3
 80014d0:	f7ff fde8 	bl	80010a4 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68da      	ldr	r2, [r3, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2101      	movs	r1, #1
 80014e0:	430a      	orrs	r2, r1
 80014e2:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014e4:	2517      	movs	r5, #23
 80014e6:	197c      	adds	r4, r7, r5
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	0018      	movs	r0, r3
 80014ec:	f000 fba6 	bl	8001c3c <ADC_Enable>
 80014f0:	0003      	movs	r3, r0
 80014f2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014f4:	002c      	movs	r4, r5
 80014f6:	193b      	adds	r3, r7, r4
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d13e      	bne.n	800157c <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001502:	4a22      	ldr	r2, [pc, #136]	@ (800158c <HAL_ADC_Start_DMA+0x10c>)
 8001504:	4013      	ands	r3, r2
 8001506:	2280      	movs	r2, #128	@ 0x80
 8001508:	0052      	lsls	r2, r2, #1
 800150a:	431a      	orrs	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2200      	movs	r2, #0
 8001514:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800151a:	4a1d      	ldr	r2, [pc, #116]	@ (8001590 <HAL_ADC_Start_DMA+0x110>)
 800151c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001522:	4a1c      	ldr	r2, [pc, #112]	@ (8001594 <HAL_ADC_Start_DMA+0x114>)
 8001524:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800152a:	4a1b      	ldr	r2, [pc, #108]	@ (8001598 <HAL_ADC_Start_DMA+0x118>)
 800152c:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	221c      	movs	r2, #28
 8001534:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2254      	movs	r2, #84	@ 0x54
 800153a:	2100      	movs	r1, #0
 800153c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2110      	movs	r1, #16
 800154a:	430a      	orrs	r2, r1
 800154c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	3340      	adds	r3, #64	@ 0x40
 8001558:	0019      	movs	r1, r3
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	193c      	adds	r4, r7, r4
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f000 fe00 	bl	8002164 <HAL_DMA_Start_IT>
 8001564:	0003      	movs	r3, r0
 8001566:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	0018      	movs	r0, r3
 800156e:	f7ff fdbd 	bl	80010ec <LL_ADC_REG_StartConversion>
 8001572:	e003      	b.n	800157c <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001574:	2317      	movs	r3, #23
 8001576:	18fb      	adds	r3, r7, r3
 8001578:	2202      	movs	r2, #2
 800157a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800157c:	2317      	movs	r3, #23
 800157e:	18fb      	adds	r3, r7, r3
 8001580:	781b      	ldrb	r3, [r3, #0]
}
 8001582:	0018      	movs	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	b006      	add	sp, #24
 8001588:	bdb0      	pop	{r4, r5, r7, pc}
 800158a:	46c0      	nop			@ (mov r8, r8)
 800158c:	fffff0fe 	.word	0xfffff0fe
 8001590:	08001d39 	.word	0x08001d39
 8001594:	08001e01 	.word	0x08001e01
 8001598:	08001e1f 	.word	0x08001e1f

0800159c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	2202      	movs	r2, #2
 80015bc:	4013      	ands	r3, r2
 80015be:	d017      	beq.n	80015f0 <HAL_ADC_IRQHandler+0x54>
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2202      	movs	r2, #2
 80015c4:	4013      	ands	r3, r2
 80015c6:	d013      	beq.n	80015f0 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015cc:	2210      	movs	r2, #16
 80015ce:	4013      	ands	r3, r2
 80015d0:	d106      	bne.n	80015e0 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d6:	2280      	movs	r2, #128	@ 0x80
 80015d8:	0112      	lsls	r2, r2, #4
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	0018      	movs	r0, r3
 80015e4:	f000 fc46 	bl	8001e74 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2202      	movs	r2, #2
 80015ee:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	2204      	movs	r2, #4
 80015f4:	4013      	ands	r3, r2
 80015f6:	d003      	beq.n	8001600 <HAL_ADC_IRQHandler+0x64>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2204      	movs	r2, #4
 80015fc:	4013      	ands	r3, r2
 80015fe:	d107      	bne.n	8001610 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	2208      	movs	r2, #8
 8001604:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001606:	d04d      	beq.n	80016a4 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2208      	movs	r2, #8
 800160c:	4013      	ands	r3, r2
 800160e:	d049      	beq.n	80016a4 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001614:	2210      	movs	r2, #16
 8001616:	4013      	ands	r3, r2
 8001618:	d106      	bne.n	8001628 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161e:	2280      	movs	r2, #128	@ 0x80
 8001620:	0092      	lsls	r2, r2, #2
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	0018      	movs	r0, r3
 800162e:	f7ff fc82 	bl	8000f36 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001632:	1e03      	subs	r3, r0, #0
 8001634:	d02e      	beq.n	8001694 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	7e9b      	ldrb	r3, [r3, #26]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d12a      	bne.n	8001694 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2208      	movs	r2, #8
 8001646:	4013      	ands	r3, r2
 8001648:	2b08      	cmp	r3, #8
 800164a:	d123      	bne.n	8001694 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	0018      	movs	r0, r3
 8001652:	f7ff fd5d 	bl	8001110 <LL_ADC_REG_IsConversionOngoing>
 8001656:	1e03      	subs	r3, r0, #0
 8001658:	d110      	bne.n	800167c <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	210c      	movs	r1, #12
 8001666:	438a      	bics	r2, r1
 8001668:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166e:	4a6f      	ldr	r2, [pc, #444]	@ (800182c <HAL_ADC_IRQHandler+0x290>)
 8001670:	4013      	ands	r3, r2
 8001672:	2201      	movs	r2, #1
 8001674:	431a      	orrs	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	659a      	str	r2, [r3, #88]	@ 0x58
 800167a:	e00b      	b.n	8001694 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001680:	2220      	movs	r2, #32
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800168c:	2201      	movs	r2, #1
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	0018      	movs	r0, r3
 8001698:	f000 f8ca 	bl	8001830 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	220c      	movs	r2, #12
 80016a2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	2280      	movs	r2, #128	@ 0x80
 80016a8:	4013      	ands	r3, r2
 80016aa:	d012      	beq.n	80016d2 <HAL_ADC_IRQHandler+0x136>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2280      	movs	r2, #128	@ 0x80
 80016b0:	4013      	ands	r3, r2
 80016b2:	d00e      	beq.n	80016d2 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016b8:	2280      	movs	r2, #128	@ 0x80
 80016ba:	0252      	lsls	r2, r2, #9
 80016bc:	431a      	orrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	0018      	movs	r0, r3
 80016c6:	f000 f8c3 	bl	8001850 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2280      	movs	r2, #128	@ 0x80
 80016d0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	2380      	movs	r3, #128	@ 0x80
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	4013      	ands	r3, r2
 80016da:	d014      	beq.n	8001706 <HAL_ADC_IRQHandler+0x16a>
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	2380      	movs	r3, #128	@ 0x80
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	4013      	ands	r3, r2
 80016e4:	d00f      	beq.n	8001706 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ea:	2280      	movs	r2, #128	@ 0x80
 80016ec:	0292      	lsls	r2, r2, #10
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	0018      	movs	r0, r3
 80016f8:	f000 fbac 	bl	8001e54 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2280      	movs	r2, #128	@ 0x80
 8001702:	0052      	lsls	r2, r2, #1
 8001704:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	2380      	movs	r3, #128	@ 0x80
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4013      	ands	r3, r2
 800170e:	d014      	beq.n	800173a <HAL_ADC_IRQHandler+0x19e>
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	2380      	movs	r3, #128	@ 0x80
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4013      	ands	r3, r2
 8001718:	d00f      	beq.n	800173a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800171e:	2280      	movs	r2, #128	@ 0x80
 8001720:	02d2      	lsls	r2, r2, #11
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	0018      	movs	r0, r3
 800172c:	f000 fb9a 	bl	8001e64 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2280      	movs	r2, #128	@ 0x80
 8001736:	0092      	lsls	r2, r2, #2
 8001738:	601a      	str	r2, [r3, #0]
  }
  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	2210      	movs	r2, #16
 800173e:	4013      	ands	r3, r2
 8001740:	d02b      	beq.n	800179a <HAL_ADC_IRQHandler+0x1fe>
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2210      	movs	r2, #16
 8001746:	4013      	ands	r3, r2
 8001748:	d027      	beq.n	800179a <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	2b00      	cmp	r3, #0
 8001750:	d102      	bne.n	8001758 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8001752:	2301      	movs	r3, #1
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	e008      	b.n	800176a <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	0018      	movs	r0, r3
 800175e:	f7ff fc3e 	bl	8000fde <LL_ADC_REG_GetDMATransfer>
 8001762:	1e03      	subs	r3, r0, #0
 8001764:	d001      	beq.n	800176a <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8001766:	2301      	movs	r3, #1
 8001768:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d110      	bne.n	8001792 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001774:	2280      	movs	r2, #128	@ 0x80
 8001776:	00d2      	lsls	r2, r2, #3
 8001778:	431a      	orrs	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001782:	2202      	movs	r2, #2
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	0018      	movs	r0, r3
 800178e:	f000 f867 	bl	8001860 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2210      	movs	r2, #16
 8001798:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check ADC Ready flag ========== */
  if (((tmp_isr & ADC_FLAG_RDY) == ADC_FLAG_RDY) && ((tmp_ier & ADC_IT_RDY) == ADC_IT_RDY))
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	2201      	movs	r2, #1
 800179e:	4013      	ands	r3, r2
 80017a0:	d01a      	beq.n	80017d8 <HAL_ADC_IRQHandler+0x23c>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2201      	movs	r2, #1
 80017a6:	4013      	ands	r3, r2
 80017a8:	d016      	beq.n	80017d8 <HAL_ADC_IRQHandler+0x23c>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ae:	2210      	movs	r2, #16
 80017b0:	4013      	ands	r3, r2
 80017b2:	d105      	bne.n	80017c0 <HAL_ADC_IRQHandler+0x224>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b8:	2201      	movs	r2, #1
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	659a      	str	r2, [r3, #88]	@ 0x58

    /* ADC Ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ADCReadyCallback(hadc);
#else
    HAL_ADC_ADCReadyCallback(hadc);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	0018      	movs	r0, r3
 80017c4:	f000 f85c 	bl	8001880 <HAL_ADC_ADCReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Leave ADRDY flag up (used by HAL), disable interrupt source instead */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_RDY);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2101      	movs	r1, #1
 80017d4:	438a      	bics	r2, r1
 80017d6:	605a      	str	r2, [r3, #4]
  }

  /* ========== Check End of Calibration flag ========== */
  if (((tmp_isr & ADC_FLAG_EOCAL) == ADC_FLAG_EOCAL) && ((tmp_ier & ADC_IT_EOCAL) == ADC_IT_EOCAL))
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	2380      	movs	r3, #128	@ 0x80
 80017dc:	011b      	lsls	r3, r3, #4
 80017de:	4013      	ands	r3, r2
 80017e0:	d00d      	beq.n	80017fe <HAL_ADC_IRQHandler+0x262>
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	2380      	movs	r3, #128	@ 0x80
 80017e6:	011b      	lsls	r3, r3, #4
 80017e8:	4013      	ands	r3, r2
 80017ea:	d008      	beq.n	80017fe <HAL_ADC_IRQHandler+0x262>
  {
    /* End Of Calibration callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->CalibrationCpltCallback(hadc);
#else
    HAL_ADC_CalibrationCpltCallback(hadc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	0018      	movs	r0, r3
 80017f0:	f000 f83e 	bl	8001870 <HAL_ADC_CalibrationCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear end of calibration flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOCAL);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2280      	movs	r2, #128	@ 0x80
 80017fa:	0112      	lsls	r2, r2, #4
 80017fc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	2380      	movs	r3, #128	@ 0x80
 8001802:	019b      	lsls	r3, r3, #6
 8001804:	4013      	ands	r3, r2
 8001806:	d00d      	beq.n	8001824 <HAL_ADC_IRQHandler+0x288>
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	2380      	movs	r3, #128	@ 0x80
 800180c:	019b      	lsls	r3, r3, #6
 800180e:	4013      	ands	r3, r2
 8001810:	d008      	beq.n	8001824 <HAL_ADC_IRQHandler+0x288>
  {
    /* Channel configuration ready callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ChannelConfigReadyCallback(hadc);
#else
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	0018      	movs	r0, r3
 8001816:	f000 fb35 	bl	8001e84 <HAL_ADCEx_ChannelConfigReadyCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2280      	movs	r2, #128	@ 0x80
 8001820:	0192      	lsls	r2, r2, #6
 8001822:	601a      	str	r2, [r3, #0]
  }
}
 8001824:	46c0      	nop			@ (mov r8, r8)
 8001826:	46bd      	mov	sp, r7
 8001828:	b006      	add	sp, #24
 800182a:	bd80      	pop	{r7, pc}
 800182c:	fffffefe 	.word	0xfffffefe

08001830 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001838:	46c0      	nop			@ (mov r8, r8)
 800183a:	46bd      	mov	sp, r7
 800183c:	b002      	add	sp, #8
 800183e:	bd80      	pop	{r7, pc}

08001840 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001848:	46c0      	nop			@ (mov r8, r8)
 800184a:	46bd      	mov	sp, r7
 800184c:	b002      	add	sp, #8
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001858:	46c0      	nop			@ (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	b002      	add	sp, #8
 800185e:	bd80      	pop	{r7, pc}

08001860 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001868:	46c0      	nop			@ (mov r8, r8)
 800186a:	46bd      	mov	sp, r7
 800186c:	b002      	add	sp, #8
 800186e:	bd80      	pop	{r7, pc}

08001870 <HAL_ADC_CalibrationCpltCallback>:
  * @brief  Calibration complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_CalibrationCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_CalibrationCpltCallback must be implemented in the user file.
   */
}
 8001878:	46c0      	nop			@ (mov r8, r8)
 800187a:	46bd      	mov	sp, r7
 800187c:	b002      	add	sp, #8
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_ADC_ADCReadyCallback>:
  * @brief ADC Ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ADCReadyCallback(ADC_HandleTypeDef *hadc)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ADCReadyCallback must be implemented in the user file.
   */
}
 8001888:	46c0      	nop			@ (mov r8, r8)
 800188a:	46bd      	mov	sp, r7
 800188c:	b002      	add	sp, #8
 800188e:	bd80      	pop	{r7, pc}

08001890 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800189a:	2317      	movs	r3, #23
 800189c:	18fb      	adds	r3, r7, r3
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2254      	movs	r2, #84	@ 0x54
 80018aa:	5c9b      	ldrb	r3, [r3, r2]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d101      	bne.n	80018b4 <HAL_ADC_ConfigChannel+0x24>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e1be      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x3a2>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2254      	movs	r2, #84	@ 0x54
 80018b8:	2101      	movs	r1, #1
 80018ba:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	0018      	movs	r0, r3
 80018c2:	f7ff fc25 	bl	8001110 <LL_ADC_REG_IsConversionOngoing>
 80018c6:	1e03      	subs	r3, r0, #0
 80018c8:	d000      	beq.n	80018cc <HAL_ADC_ConfigChannel+0x3c>
 80018ca:	e1a1      	b.n	8001c10 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d100      	bne.n	80018d6 <HAL_ADC_ConfigChannel+0x46>
 80018d4:	e152      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691a      	ldr	r2, [r3, #16]
 80018da:	2380      	movs	r3, #128	@ 0x80
 80018dc:	061b      	lsls	r3, r3, #24
 80018de:	429a      	cmp	r2, r3
 80018e0:	d004      	beq.n	80018ec <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80018e6:	4ac2      	ldr	r2, [pc, #776]	@ (8001bf0 <HAL_ADC_ConfigChannel+0x360>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d108      	bne.n	80018fe <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	0019      	movs	r1, r3
 80018f6:	0010      	movs	r0, r2
 80018f8:	f7ff fb4e 	bl	8000f98 <LL_ADC_REG_SetSequencerChAdd>
 80018fc:	e0ed      	b.n	8001ada <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	211f      	movs	r1, #31
 8001908:	400b      	ands	r3, r1
 800190a:	210f      	movs	r1, #15
 800190c:	4099      	lsls	r1, r3
 800190e:	000b      	movs	r3, r1
 8001910:	43db      	mvns	r3, r3
 8001912:	4013      	ands	r3, r2
 8001914:	0019      	movs	r1, r3
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	025b      	lsls	r3, r3, #9
 800191c:	0a5b      	lsrs	r3, r3, #9
 800191e:	d105      	bne.n	800192c <HAL_ADC_ConfigChannel+0x9c>
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	0e9b      	lsrs	r3, r3, #26
 8001926:	221f      	movs	r2, #31
 8001928:	4013      	ands	r3, r2
 800192a:	e0bc      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x216>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2201      	movs	r2, #1
 8001932:	4013      	ands	r3, r2
 8001934:	d000      	beq.n	8001938 <HAL_ADC_ConfigChannel+0xa8>
 8001936:	e0b5      	b.n	8001aa4 <HAL_ADC_ConfigChannel+0x214>
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2202      	movs	r2, #2
 800193e:	4013      	ands	r3, r2
 8001940:	d000      	beq.n	8001944 <HAL_ADC_ConfigChannel+0xb4>
 8001942:	e0ad      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x210>
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2204      	movs	r2, #4
 800194a:	4013      	ands	r3, r2
 800194c:	d000      	beq.n	8001950 <HAL_ADC_ConfigChannel+0xc0>
 800194e:	e0a5      	b.n	8001a9c <HAL_ADC_ConfigChannel+0x20c>
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2208      	movs	r2, #8
 8001956:	4013      	ands	r3, r2
 8001958:	d000      	beq.n	800195c <HAL_ADC_ConfigChannel+0xcc>
 800195a:	e09d      	b.n	8001a98 <HAL_ADC_ConfigChannel+0x208>
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2210      	movs	r2, #16
 8001962:	4013      	ands	r3, r2
 8001964:	d000      	beq.n	8001968 <HAL_ADC_ConfigChannel+0xd8>
 8001966:	e095      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x204>
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2220      	movs	r2, #32
 800196e:	4013      	ands	r3, r2
 8001970:	d000      	beq.n	8001974 <HAL_ADC_ConfigChannel+0xe4>
 8001972:	e08d      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x200>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2240      	movs	r2, #64	@ 0x40
 800197a:	4013      	ands	r3, r2
 800197c:	d000      	beq.n	8001980 <HAL_ADC_ConfigChannel+0xf0>
 800197e:	e085      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x1fc>
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2280      	movs	r2, #128	@ 0x80
 8001986:	4013      	ands	r3, r2
 8001988:	d000      	beq.n	800198c <HAL_ADC_ConfigChannel+0xfc>
 800198a:	e07d      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x1f8>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	2380      	movs	r3, #128	@ 0x80
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4013      	ands	r3, r2
 8001996:	d000      	beq.n	800199a <HAL_ADC_ConfigChannel+0x10a>
 8001998:	e074      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x1f4>
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	2380      	movs	r3, #128	@ 0x80
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4013      	ands	r3, r2
 80019a4:	d000      	beq.n	80019a8 <HAL_ADC_ConfigChannel+0x118>
 80019a6:	e06b      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x1f0>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	2380      	movs	r3, #128	@ 0x80
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	4013      	ands	r3, r2
 80019b2:	d000      	beq.n	80019b6 <HAL_ADC_ConfigChannel+0x126>
 80019b4:	e062      	b.n	8001a7c <HAL_ADC_ConfigChannel+0x1ec>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	2380      	movs	r3, #128	@ 0x80
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	4013      	ands	r3, r2
 80019c0:	d000      	beq.n	80019c4 <HAL_ADC_ConfigChannel+0x134>
 80019c2:	e059      	b.n	8001a78 <HAL_ADC_ConfigChannel+0x1e8>
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	2380      	movs	r3, #128	@ 0x80
 80019ca:	015b      	lsls	r3, r3, #5
 80019cc:	4013      	ands	r3, r2
 80019ce:	d151      	bne.n	8001a74 <HAL_ADC_ConfigChannel+0x1e4>
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	2380      	movs	r3, #128	@ 0x80
 80019d6:	019b      	lsls	r3, r3, #6
 80019d8:	4013      	ands	r3, r2
 80019da:	d149      	bne.n	8001a70 <HAL_ADC_ConfigChannel+0x1e0>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	2380      	movs	r3, #128	@ 0x80
 80019e2:	01db      	lsls	r3, r3, #7
 80019e4:	4013      	ands	r3, r2
 80019e6:	d141      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x1dc>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	2380      	movs	r3, #128	@ 0x80
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	4013      	ands	r3, r2
 80019f2:	d139      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x1d8>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2380      	movs	r3, #128	@ 0x80
 80019fa:	025b      	lsls	r3, r3, #9
 80019fc:	4013      	ands	r3, r2
 80019fe:	d131      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x1d4>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2380      	movs	r3, #128	@ 0x80
 8001a06:	029b      	lsls	r3, r3, #10
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d129      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x1d0>
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	2380      	movs	r3, #128	@ 0x80
 8001a12:	02db      	lsls	r3, r3, #11
 8001a14:	4013      	ands	r3, r2
 8001a16:	d121      	bne.n	8001a5c <HAL_ADC_ConfigChannel+0x1cc>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	2380      	movs	r3, #128	@ 0x80
 8001a1e:	031b      	lsls	r3, r3, #12
 8001a20:	4013      	ands	r3, r2
 8001a22:	d119      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x1c8>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	2380      	movs	r3, #128	@ 0x80
 8001a2a:	035b      	lsls	r3, r3, #13
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d111      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x1c4>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	2380      	movs	r3, #128	@ 0x80
 8001a36:	039b      	lsls	r3, r3, #14
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d109      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x1c0>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	2380      	movs	r3, #128	@ 0x80
 8001a42:	03db      	lsls	r3, r3, #15
 8001a44:	4013      	ands	r3, r2
 8001a46:	d001      	beq.n	8001a4c <HAL_ADC_ConfigChannel+0x1bc>
 8001a48:	2316      	movs	r3, #22
 8001a4a:	e02c      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x216>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	e02a      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x216>
 8001a50:	2315      	movs	r3, #21
 8001a52:	e028      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x216>
 8001a54:	2314      	movs	r3, #20
 8001a56:	e026      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x216>
 8001a58:	2313      	movs	r3, #19
 8001a5a:	e024      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x216>
 8001a5c:	2312      	movs	r3, #18
 8001a5e:	e022      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x216>
 8001a60:	2311      	movs	r3, #17
 8001a62:	e020      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x216>
 8001a64:	2310      	movs	r3, #16
 8001a66:	e01e      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x216>
 8001a68:	230f      	movs	r3, #15
 8001a6a:	e01c      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x216>
 8001a6c:	230e      	movs	r3, #14
 8001a6e:	e01a      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x216>
 8001a70:	230d      	movs	r3, #13
 8001a72:	e018      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x216>
 8001a74:	230c      	movs	r3, #12
 8001a76:	e016      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x216>
 8001a78:	230b      	movs	r3, #11
 8001a7a:	e014      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x216>
 8001a7c:	230a      	movs	r3, #10
 8001a7e:	e012      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x216>
 8001a80:	2309      	movs	r3, #9
 8001a82:	e010      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x216>
 8001a84:	2308      	movs	r3, #8
 8001a86:	e00e      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x216>
 8001a88:	2307      	movs	r3, #7
 8001a8a:	e00c      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x216>
 8001a8c:	2306      	movs	r3, #6
 8001a8e:	e00a      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x216>
 8001a90:	2305      	movs	r3, #5
 8001a92:	e008      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x216>
 8001a94:	2304      	movs	r3, #4
 8001a96:	e006      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x216>
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e004      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x216>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e002      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x216>
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x216>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	6852      	ldr	r2, [r2, #4]
 8001aaa:	201f      	movs	r0, #31
 8001aac:	4002      	ands	r2, r0
 8001aae:	4093      	lsls	r3, r2
 8001ab0:	000a      	movs	r2, r1
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	089b      	lsrs	r3, r3, #2
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d808      	bhi.n	8001ada <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6818      	ldr	r0, [r3, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	6859      	ldr	r1, [r3, #4]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	001a      	movs	r2, r3
 8001ad6:	f7ff fa3f 	bl	8000f58 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6818      	ldr	r0, [r3, #0]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	6819      	ldr	r1, [r3, #0]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	001a      	movs	r2, r3
 8001ae8:	f7ff fa86 	bl	8000ff8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	db00      	blt.n	8001af6 <HAL_ADC_ConfigChannel+0x266>
 8001af4:	e096      	b.n	8001c24 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001af6:	4b3f      	ldr	r3, [pc, #252]	@ (8001bf4 <HAL_ADC_ConfigChannel+0x364>)
 8001af8:	0018      	movs	r0, r3
 8001afa:	f7ff f9db 	bl	8000eb4 <LL_ADC_GetCommonPathInternalCh>
 8001afe:	0003      	movs	r3, r0
 8001b00:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a3c      	ldr	r2, [pc, #240]	@ (8001bf8 <HAL_ADC_ConfigChannel+0x368>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d123      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	2380      	movs	r3, #128	@ 0x80
 8001b10:	041b      	lsls	r3, r3, #16
 8001b12:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b14:	d11e      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	2280      	movs	r2, #128	@ 0x80
 8001b1a:	0412      	lsls	r2, r2, #16
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	4a35      	ldr	r2, [pc, #212]	@ (8001bf4 <HAL_ADC_ConfigChannel+0x364>)
 8001b20:	0019      	movs	r1, r3
 8001b22:	0010      	movs	r0, r2
 8001b24:	f7ff f9b2 	bl	8000e8c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001b28:	4b34      	ldr	r3, [pc, #208]	@ (8001bfc <HAL_ADC_ConfigChannel+0x36c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4934      	ldr	r1, [pc, #208]	@ (8001c00 <HAL_ADC_ConfigChannel+0x370>)
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f7fe faea 	bl	8000108 <__udivsi3>
 8001b34:	0003      	movs	r3, r0
 8001b36:	001a      	movs	r2, r3
 8001b38:	0013      	movs	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	189b      	adds	r3, r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	3301      	adds	r3, #1
 8001b42:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b44:	e002      	b.n	8001b4c <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f9      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b52:	e067      	b.n	8001c24 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a2a      	ldr	r2, [pc, #168]	@ (8001c04 <HAL_ADC_ConfigChannel+0x374>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d162      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	2380      	movs	r3, #128	@ 0x80
 8001b62:	03db      	lsls	r3, r3, #15
 8001b64:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001b66:	d15d      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	2280      	movs	r2, #128	@ 0x80
 8001b6c:	03d2      	lsls	r2, r2, #15
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	4a20      	ldr	r2, [pc, #128]	@ (8001bf4 <HAL_ADC_ConfigChannel+0x364>)
 8001b72:	0019      	movs	r1, r3
 8001b74:	0010      	movs	r0, r2
 8001b76:	f7ff f989 	bl	8000e8c <LL_ADC_SetCommonPathInternalCh>
 8001b7a:	e053      	b.n	8001c24 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	2380      	movs	r3, #128	@ 0x80
 8001b82:	061b      	lsls	r3, r3, #24
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d004      	beq.n	8001b92 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b8c:	4a18      	ldr	r2, [pc, #96]	@ (8001bf0 <HAL_ADC_ConfigChannel+0x360>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d107      	bne.n	8001ba2 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	0019      	movs	r1, r3
 8001b9c:	0010      	movs	r0, r2
 8001b9e:	f7ff fa0c 	bl	8000fba <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	da3c      	bge.n	8001c24 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001baa:	4b12      	ldr	r3, [pc, #72]	@ (8001bf4 <HAL_ADC_ConfigChannel+0x364>)
 8001bac:	0018      	movs	r0, r3
 8001bae:	f7ff f981 	bl	8000eb4 <LL_ADC_GetCommonPathInternalCh>
 8001bb2:	0003      	movs	r3, r0
 8001bb4:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a0f      	ldr	r2, [pc, #60]	@ (8001bf8 <HAL_ADC_ConfigChannel+0x368>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d108      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	4a11      	ldr	r2, [pc, #68]	@ (8001c08 <HAL_ADC_ConfigChannel+0x378>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf4 <HAL_ADC_ConfigChannel+0x364>)
 8001bc8:	0019      	movs	r1, r3
 8001bca:	0010      	movs	r0, r2
 8001bcc:	f7ff f95e 	bl	8000e8c <LL_ADC_SetCommonPathInternalCh>
 8001bd0:	e028      	b.n	8001c24 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a0b      	ldr	r2, [pc, #44]	@ (8001c04 <HAL_ADC_ConfigChannel+0x374>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d123      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	4a0b      	ldr	r2, [pc, #44]	@ (8001c0c <HAL_ADC_ConfigChannel+0x37c>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	4a04      	ldr	r2, [pc, #16]	@ (8001bf4 <HAL_ADC_ConfigChannel+0x364>)
 8001be4:	0019      	movs	r1, r3
 8001be6:	0010      	movs	r0, r2
 8001be8:	f7ff f950 	bl	8000e8c <LL_ADC_SetCommonPathInternalCh>
 8001bec:	e01a      	b.n	8001c24 <HAL_ADC_ConfigChannel+0x394>
 8001bee:	46c0      	nop			@ (mov r8, r8)
 8001bf0:	80000004 	.word	0x80000004
 8001bf4:	40012708 	.word	0x40012708
 8001bf8:	a4000200 	.word	0xa4000200
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	00030d40 	.word	0x00030d40
 8001c04:	a8000400 	.word	0xa8000400
 8001c08:	ff7fffff 	.word	0xff7fffff
 8001c0c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c14:	2220      	movs	r2, #32
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001c1c:	2317      	movs	r3, #23
 8001c1e:	18fb      	adds	r3, r7, r3
 8001c20:	2201      	movs	r2, #1
 8001c22:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2254      	movs	r2, #84	@ 0x54
 8001c28:	2100      	movs	r1, #0
 8001c2a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001c2c:	2317      	movs	r3, #23
 8001c2e:	18fb      	adds	r3, r7, r3
 8001c30:	781b      	ldrb	r3, [r3, #0]
}
 8001c32:	0018      	movs	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	b006      	add	sp, #24
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	46c0      	nop			@ (mov r8, r8)

08001c3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f7ff fa3b 	bl	80010c8 <LL_ADC_IsEnabled>
 8001c52:	1e03      	subs	r3, r0, #0
 8001c54:	d162      	bne.n	8001d1c <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	4a32      	ldr	r2, [pc, #200]	@ (8001d28 <ADC_Enable+0xec>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d00d      	beq.n	8001c7e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c66:	2210      	movs	r2, #16
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c72:	2201      	movs	r2, #1
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e04f      	b.n	8001d1e <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	0018      	movs	r0, r3
 8001c84:	f7ff f9fc 	bl	8001080 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001c88:	4b28      	ldr	r3, [pc, #160]	@ (8001d2c <ADC_Enable+0xf0>)
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f7ff f912 	bl	8000eb4 <LL_ADC_GetCommonPathInternalCh>
 8001c90:	0002      	movs	r2, r0
 8001c92:	2380      	movs	r3, #128	@ 0x80
 8001c94:	041b      	lsls	r3, r3, #16
 8001c96:	4013      	ands	r3, r2
 8001c98:	d00f      	beq.n	8001cba <ADC_Enable+0x7e>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c9a:	4b25      	ldr	r3, [pc, #148]	@ (8001d30 <ADC_Enable+0xf4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4925      	ldr	r1, [pc, #148]	@ (8001d34 <ADC_Enable+0xf8>)
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f7fe fa31 	bl	8000108 <__udivsi3>
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001caa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001cac:	e002      	b.n	8001cb4 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f9      	bne.n	8001cae <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	7e5b      	ldrb	r3, [r3, #25]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d02c      	beq.n	8001d1c <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001cc2:	f7ff f8d9 	bl	8000e78 <HAL_GetTick>
 8001cc6:	0003      	movs	r3, r0
 8001cc8:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001cca:	e020      	b.n	8001d0e <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f7ff f9f9 	bl	80010c8 <LL_ADC_IsEnabled>
 8001cd6:	1e03      	subs	r3, r0, #0
 8001cd8:	d104      	bne.n	8001ce4 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	0018      	movs	r0, r3
 8001ce0:	f7ff f9ce 	bl	8001080 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ce4:	f7ff f8c8 	bl	8000e78 <HAL_GetTick>
 8001ce8:	0002      	movs	r2, r0
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d90d      	bls.n	8001d0e <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf6:	2210      	movs	r2, #16
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d02:	2201      	movs	r2, #1
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e007      	b.n	8001d1e <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2201      	movs	r2, #1
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d1d7      	bne.n	8001ccc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	0018      	movs	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	b004      	add	sp, #16
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	46c0      	nop			@ (mov r8, r8)
 8001d28:	80000017 	.word	0x80000017
 8001d2c:	40012708 	.word	0x40012708
 8001d30:	20000008 	.word	0x20000008
 8001d34:	00030d40 	.word	0x00030d40

08001d38 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d44:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d4a:	2250      	movs	r2, #80	@ 0x50
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d141      	bne.n	8001dd4 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d54:	2280      	movs	r2, #128	@ 0x80
 8001d56:	0092      	lsls	r2, r2, #2
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	0018      	movs	r0, r3
 8001d64:	f7ff f8e7 	bl	8000f36 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d68:	1e03      	subs	r3, r0, #0
 8001d6a:	d02e      	beq.n	8001dca <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	7e9b      	ldrb	r3, [r3, #26]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d12a      	bne.n	8001dca <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2208      	movs	r2, #8
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d123      	bne.n	8001dca <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	0018      	movs	r0, r3
 8001d88:	f7ff f9c2 	bl	8001110 <LL_ADC_REG_IsConversionOngoing>
 8001d8c:	1e03      	subs	r3, r0, #0
 8001d8e:	d110      	bne.n	8001db2 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	210c      	movs	r1, #12
 8001d9c:	438a      	bics	r2, r1
 8001d9e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da4:	4a15      	ldr	r2, [pc, #84]	@ (8001dfc <ADC_DMAConvCplt+0xc4>)
 8001da6:	4013      	ands	r3, r2
 8001da8:	2201      	movs	r2, #1
 8001daa:	431a      	orrs	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	659a      	str	r2, [r3, #88]	@ 0x58
 8001db0:	e00b      	b.n	8001dca <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db6:	2220      	movs	r2, #32
 8001db8:	431a      	orrs	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f7ff fd2f 	bl	8001830 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001dd2:	e00f      	b.n	8001df4 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd8:	2210      	movs	r2, #16
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d004      	beq.n	8001de8 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	0018      	movs	r0, r3
 8001de2:	f7ff fd3d 	bl	8001860 <HAL_ADC_ErrorCallback>
}
 8001de6:	e005      	b.n	8001df4 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	0010      	movs	r0, r2
 8001df2:	4798      	blx	r3
}
 8001df4:	46c0      	nop			@ (mov r8, r8)
 8001df6:	46bd      	mov	sp, r7
 8001df8:	b004      	add	sp, #16
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	fffffefe 	.word	0xfffffefe

08001e00 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e0c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	0018      	movs	r0, r3
 8001e12:	f7ff fd15 	bl	8001840 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e16:	46c0      	nop			@ (mov r8, r8)
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	b004      	add	sp, #16
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b084      	sub	sp, #16
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e30:	2240      	movs	r2, #64	@ 0x40
 8001e32:	431a      	orrs	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e3c:	2204      	movs	r2, #4
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	0018      	movs	r0, r3
 8001e48:	f7ff fd0a 	bl	8001860 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e4c:	46c0      	nop			@ (mov r8, r8)
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	b004      	add	sp, #16
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001e5c:	46c0      	nop			@ (mov r8, r8)
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	b002      	add	sp, #8
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001e6c:	46c0      	nop			@ (mov r8, r8)
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b002      	add	sp, #8
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001e7c:	46c0      	nop			@ (mov r8, r8)
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b002      	add	sp, #8
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8001e8c:	46c0      	nop			@ (mov r8, r8)
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	b002      	add	sp, #8
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	0002      	movs	r2, r0
 8001e9c:	1dfb      	adds	r3, r7, #7
 8001e9e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ea0:	1dfb      	adds	r3, r7, #7
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ea6:	d809      	bhi.n	8001ebc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ea8:	1dfb      	adds	r3, r7, #7
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	001a      	movs	r2, r3
 8001eae:	231f      	movs	r3, #31
 8001eb0:	401a      	ands	r2, r3
 8001eb2:	4b04      	ldr	r3, [pc, #16]	@ (8001ec4 <__NVIC_EnableIRQ+0x30>)
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	4091      	lsls	r1, r2
 8001eb8:	000a      	movs	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001ebc:	46c0      	nop			@ (mov r8, r8)
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	b002      	add	sp, #8
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	e000e100 	.word	0xe000e100

08001ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec8:	b590      	push	{r4, r7, lr}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	0002      	movs	r2, r0
 8001ed0:	6039      	str	r1, [r7, #0]
 8001ed2:	1dfb      	adds	r3, r7, #7
 8001ed4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ed6:	1dfb      	adds	r3, r7, #7
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b7f      	cmp	r3, #127	@ 0x7f
 8001edc:	d828      	bhi.n	8001f30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ede:	4a2f      	ldr	r2, [pc, #188]	@ (8001f9c <__NVIC_SetPriority+0xd4>)
 8001ee0:	1dfb      	adds	r3, r7, #7
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	b25b      	sxtb	r3, r3
 8001ee6:	089b      	lsrs	r3, r3, #2
 8001ee8:	33c0      	adds	r3, #192	@ 0xc0
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	589b      	ldr	r3, [r3, r2]
 8001eee:	1dfa      	adds	r2, r7, #7
 8001ef0:	7812      	ldrb	r2, [r2, #0]
 8001ef2:	0011      	movs	r1, r2
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	400a      	ands	r2, r1
 8001ef8:	00d2      	lsls	r2, r2, #3
 8001efa:	21ff      	movs	r1, #255	@ 0xff
 8001efc:	4091      	lsls	r1, r2
 8001efe:	000a      	movs	r2, r1
 8001f00:	43d2      	mvns	r2, r2
 8001f02:	401a      	ands	r2, r3
 8001f04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	019b      	lsls	r3, r3, #6
 8001f0a:	22ff      	movs	r2, #255	@ 0xff
 8001f0c:	401a      	ands	r2, r3
 8001f0e:	1dfb      	adds	r3, r7, #7
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	0018      	movs	r0, r3
 8001f14:	2303      	movs	r3, #3
 8001f16:	4003      	ands	r3, r0
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f1c:	481f      	ldr	r0, [pc, #124]	@ (8001f9c <__NVIC_SetPriority+0xd4>)
 8001f1e:	1dfb      	adds	r3, r7, #7
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	b25b      	sxtb	r3, r3
 8001f24:	089b      	lsrs	r3, r3, #2
 8001f26:	430a      	orrs	r2, r1
 8001f28:	33c0      	adds	r3, #192	@ 0xc0
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f2e:	e031      	b.n	8001f94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f30:	4a1b      	ldr	r2, [pc, #108]	@ (8001fa0 <__NVIC_SetPriority+0xd8>)
 8001f32:	1dfb      	adds	r3, r7, #7
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	0019      	movs	r1, r3
 8001f38:	230f      	movs	r3, #15
 8001f3a:	400b      	ands	r3, r1
 8001f3c:	3b08      	subs	r3, #8
 8001f3e:	089b      	lsrs	r3, r3, #2
 8001f40:	3306      	adds	r3, #6
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	18d3      	adds	r3, r2, r3
 8001f46:	3304      	adds	r3, #4
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	1dfa      	adds	r2, r7, #7
 8001f4c:	7812      	ldrb	r2, [r2, #0]
 8001f4e:	0011      	movs	r1, r2
 8001f50:	2203      	movs	r2, #3
 8001f52:	400a      	ands	r2, r1
 8001f54:	00d2      	lsls	r2, r2, #3
 8001f56:	21ff      	movs	r1, #255	@ 0xff
 8001f58:	4091      	lsls	r1, r2
 8001f5a:	000a      	movs	r2, r1
 8001f5c:	43d2      	mvns	r2, r2
 8001f5e:	401a      	ands	r2, r3
 8001f60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	019b      	lsls	r3, r3, #6
 8001f66:	22ff      	movs	r2, #255	@ 0xff
 8001f68:	401a      	ands	r2, r3
 8001f6a:	1dfb      	adds	r3, r7, #7
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	0018      	movs	r0, r3
 8001f70:	2303      	movs	r3, #3
 8001f72:	4003      	ands	r3, r0
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f78:	4809      	ldr	r0, [pc, #36]	@ (8001fa0 <__NVIC_SetPriority+0xd8>)
 8001f7a:	1dfb      	adds	r3, r7, #7
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	001c      	movs	r4, r3
 8001f80:	230f      	movs	r3, #15
 8001f82:	4023      	ands	r3, r4
 8001f84:	3b08      	subs	r3, #8
 8001f86:	089b      	lsrs	r3, r3, #2
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	3306      	adds	r3, #6
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	18c3      	adds	r3, r0, r3
 8001f90:	3304      	adds	r3, #4
 8001f92:	601a      	str	r2, [r3, #0]
}
 8001f94:	46c0      	nop			@ (mov r8, r8)
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b003      	add	sp, #12
 8001f9a:	bd90      	pop	{r4, r7, pc}
 8001f9c:	e000e100 	.word	0xe000e100
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	1e5a      	subs	r2, r3, #1
 8001fb0:	2380      	movs	r3, #128	@ 0x80
 8001fb2:	045b      	lsls	r3, r3, #17
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d301      	bcc.n	8001fbc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e010      	b.n	8001fde <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe8 <SysTick_Config+0x44>)
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	3a01      	subs	r2, #1
 8001fc2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	425b      	negs	r3, r3
 8001fc8:	2103      	movs	r1, #3
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f7ff ff7c 	bl	8001ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd0:	4b05      	ldr	r3, [pc, #20]	@ (8001fe8 <SysTick_Config+0x44>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fd6:	4b04      	ldr	r3, [pc, #16]	@ (8001fe8 <SysTick_Config+0x44>)
 8001fd8:	2207      	movs	r2, #7
 8001fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	0018      	movs	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b002      	add	sp, #8
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	46c0      	nop			@ (mov r8, r8)
 8001fe8:	e000e010 	.word	0xe000e010

08001fec <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	210f      	movs	r1, #15
 8001ff8:	187b      	adds	r3, r7, r1
 8001ffa:	1c02      	adds	r2, r0, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	187b      	adds	r3, r7, r1
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	b25b      	sxtb	r3, r3
 8002006:	0011      	movs	r1, r2
 8002008:	0018      	movs	r0, r3
 800200a:	f7ff ff5d 	bl	8001ec8 <__NVIC_SetPriority>
}
 800200e:	46c0      	nop			@ (mov r8, r8)
 8002010:	46bd      	mov	sp, r7
 8002012:	b004      	add	sp, #16
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	0002      	movs	r2, r0
 800201e:	1dfb      	adds	r3, r7, #7
 8002020:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002022:	1dfb      	adds	r3, r7, #7
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	b25b      	sxtb	r3, r3
 8002028:	0018      	movs	r0, r3
 800202a:	f7ff ff33 	bl	8001e94 <__NVIC_EnableIRQ>
}
 800202e:	46c0      	nop			@ (mov r8, r8)
 8002030:	46bd      	mov	sp, r7
 8002032:	b002      	add	sp, #8
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	0018      	movs	r0, r3
 8002042:	f7ff ffaf 	bl	8001fa4 <SysTick_Config>
 8002046:	0003      	movs	r3, r0
}
 8002048:	0018      	movs	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	b002      	add	sp, #8
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e077      	b.n	8002152 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a3d      	ldr	r2, [pc, #244]	@ (800215c <HAL_DMA_Init+0x10c>)
 8002068:	4694      	mov	ip, r2
 800206a:	4463      	add	r3, ip
 800206c:	2114      	movs	r1, #20
 800206e:	0018      	movs	r0, r3
 8002070:	f7fe f84a 	bl	8000108 <__udivsi3>
 8002074:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8002076:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2225      	movs	r2, #37	@ 0x25
 8002080:	2102      	movs	r1, #2
 8002082:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4934      	ldr	r1, [pc, #208]	@ (8002160 <HAL_DMA_Init+0x110>)
 8002090:	400a      	ands	r2, r1
 8002092:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6819      	ldr	r1, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	431a      	orrs	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	431a      	orrs	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	0018      	movs	r0, r3
 80020ce:	f000 fa49 	bl	8002564 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	2380      	movs	r3, #128	@ 0x80
 80020d8:	01db      	lsls	r3, r3, #7
 80020da:	429a      	cmp	r2, r3
 80020dc:	d102      	bne.n	80020e4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ec:	21ff      	movs	r1, #255	@ 0xff
 80020ee:	400a      	ands	r2, r1
 80020f0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80020fa:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d011      	beq.n	8002128 <HAL_DMA_Init+0xd8>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b04      	cmp	r3, #4
 800210a:	d80d      	bhi.n	8002128 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	0018      	movs	r0, r3
 8002110:	f000 fa54 	bl	80025bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	e008      	b.n	800213a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2225      	movs	r2, #37	@ 0x25
 8002144:	2101      	movs	r1, #1
 8002146:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2224      	movs	r2, #36	@ 0x24
 800214c:	2100      	movs	r1, #0
 800214e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	0018      	movs	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	b002      	add	sp, #8
 8002158:	bd80      	pop	{r7, pc}
 800215a:	46c0      	nop			@ (mov r8, r8)
 800215c:	bffdfff8 	.word	0xbffdfff8
 8002160:	ffff800f 	.word	0xffff800f

08002164 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002172:	2317      	movs	r3, #23
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2224      	movs	r2, #36	@ 0x24
 800217e:	5c9b      	ldrb	r3, [r3, r2]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <HAL_DMA_Start_IT+0x24>
 8002184:	2302      	movs	r3, #2
 8002186:	e070      	b.n	800226a <HAL_DMA_Start_IT+0x106>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2224      	movs	r2, #36	@ 0x24
 800218c:	2101      	movs	r1, #1
 800218e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2225      	movs	r2, #37	@ 0x25
 8002194:	5c9b      	ldrb	r3, [r3, r2]
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d157      	bne.n	800224c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2225      	movs	r2, #37	@ 0x25
 80021a0:	2102      	movs	r1, #2
 80021a2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2101      	movs	r1, #1
 80021b6:	438a      	bics	r2, r1
 80021b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	68b9      	ldr	r1, [r7, #8]
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 f98f 	bl	80024e4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d008      	beq.n	80021e0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	210e      	movs	r1, #14
 80021da:	430a      	orrs	r2, r1
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	e00f      	b.n	8002200 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2104      	movs	r1, #4
 80021ec:	438a      	bics	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	210a      	movs	r1, #10
 80021fc:	430a      	orrs	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	2380      	movs	r3, #128	@ 0x80
 8002208:	025b      	lsls	r3, r3, #9
 800220a:	4013      	ands	r3, r2
 800220c:	d008      	beq.n	8002220 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002218:	2180      	movs	r1, #128	@ 0x80
 800221a:	0049      	lsls	r1, r1, #1
 800221c:	430a      	orrs	r2, r1
 800221e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002224:	2b00      	cmp	r3, #0
 8002226:	d008      	beq.n	800223a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002232:	2180      	movs	r1, #128	@ 0x80
 8002234:	0049      	lsls	r1, r1, #1
 8002236:	430a      	orrs	r2, r1
 8002238:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2101      	movs	r1, #1
 8002246:	430a      	orrs	r2, r1
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	e007      	b.n	800225c <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2224      	movs	r2, #36	@ 0x24
 8002250:	2100      	movs	r1, #0
 8002252:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002254:	2317      	movs	r3, #23
 8002256:	18fb      	adds	r3, r7, r3
 8002258:	2202      	movs	r2, #2
 800225a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2224      	movs	r2, #36	@ 0x24
 8002260:	2100      	movs	r1, #0
 8002262:	5499      	strb	r1, [r3, r2]

  return status;
 8002264:	2317      	movs	r3, #23
 8002266:	18fb      	adds	r3, r7, r3
 8002268:	781b      	ldrb	r3, [r3, #0]
}
 800226a:	0018      	movs	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	b006      	add	sp, #24
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800227c:	230f      	movs	r3, #15
 800227e:	18fb      	adds	r3, r7, r3
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2224      	movs	r2, #36	@ 0x24
 8002288:	2100      	movs	r1, #0
 800228a:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2224      	movs	r2, #36	@ 0x24
 8002290:	5c9b      	ldrb	r3, [r3, r2]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d101      	bne.n	800229a <HAL_DMA_Abort_IT+0x26>
 8002296:	2302      	movs	r3, #2
 8002298:	e05e      	b.n	8002358 <HAL_DMA_Abort_IT+0xe4>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2224      	movs	r2, #36	@ 0x24
 800229e:	2101      	movs	r1, #1
 80022a0:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2225      	movs	r2, #37	@ 0x25
 80022a6:	5c9b      	ldrb	r3, [r3, r2]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d007      	beq.n	80022be <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2204      	movs	r2, #4
 80022b2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80022b4:	230f      	movs	r3, #15
 80022b6:	18fb      	adds	r3, r7, r3
 80022b8:	2201      	movs	r2, #1
 80022ba:	701a      	strb	r2, [r3, #0]
 80022bc:	e049      	b.n	8002352 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	210e      	movs	r1, #14
 80022ca:	438a      	bics	r2, r1
 80022cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2101      	movs	r1, #1
 80022da:	438a      	bics	r2, r1
 80022dc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e8:	491d      	ldr	r1, [pc, #116]	@ (8002360 <HAL_DMA_Abort_IT+0xec>)
 80022ea:	400a      	ands	r2, r1
 80022ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80022ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002364 <HAL_DMA_Abort_IT+0xf0>)
 80022f0:	6859      	ldr	r1, [r3, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f6:	221c      	movs	r2, #28
 80022f8:	4013      	ands	r3, r2
 80022fa:	2201      	movs	r2, #1
 80022fc:	409a      	lsls	r2, r3
 80022fe:	4b19      	ldr	r3, [pc, #100]	@ (8002364 <HAL_DMA_Abort_IT+0xf0>)
 8002300:	430a      	orrs	r2, r1
 8002302:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800230c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00c      	beq.n	8002330 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002320:	490f      	ldr	r1, [pc, #60]	@ (8002360 <HAL_DMA_Abort_IT+0xec>)
 8002322:	400a      	ands	r2, r1
 8002324:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800232e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2225      	movs	r2, #37	@ 0x25
 8002334:	2101      	movs	r1, #1
 8002336:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2224      	movs	r2, #36	@ 0x24
 800233c:	2100      	movs	r1, #0
 800233e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002344:	2b00      	cmp	r3, #0
 8002346:	d004      	beq.n	8002352 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	0010      	movs	r0, r2
 8002350:	4798      	blx	r3
    }
  }
  return status;
 8002352:	230f      	movs	r3, #15
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	781b      	ldrb	r3, [r3, #0]
}
 8002358:	0018      	movs	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	b004      	add	sp, #16
 800235e:	bd80      	pop	{r7, pc}
 8002360:	fffffeff 	.word	0xfffffeff
 8002364:	40020000 	.word	0x40020000

08002368 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8002370:	4b55      	ldr	r3, [pc, #340]	@ (80024c8 <HAL_DMA_IRQHandler+0x160>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	221c      	movs	r2, #28
 8002384:	4013      	ands	r3, r2
 8002386:	2204      	movs	r2, #4
 8002388:	409a      	lsls	r2, r3
 800238a:	0013      	movs	r3, r2
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	4013      	ands	r3, r2
 8002390:	d027      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x7a>
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2204      	movs	r2, #4
 8002396:	4013      	ands	r3, r2
 8002398:	d023      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2220      	movs	r2, #32
 80023a2:	4013      	ands	r3, r2
 80023a4:	d107      	bne.n	80023b6 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2104      	movs	r1, #4
 80023b2:	438a      	bics	r2, r1
 80023b4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 80023b6:	4b44      	ldr	r3, [pc, #272]	@ (80024c8 <HAL_DMA_IRQHandler+0x160>)
 80023b8:	6859      	ldr	r1, [r3, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023be:	221c      	movs	r2, #28
 80023c0:	4013      	ands	r3, r2
 80023c2:	2204      	movs	r2, #4
 80023c4:	409a      	lsls	r2, r3
 80023c6:	4b40      	ldr	r3, [pc, #256]	@ (80024c8 <HAL_DMA_IRQHandler+0x160>)
 80023c8:	430a      	orrs	r2, r1
 80023ca:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d100      	bne.n	80023d6 <HAL_DMA_IRQHandler+0x6e>
 80023d4:	e073      	b.n	80024be <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	0010      	movs	r0, r2
 80023de:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80023e0:	e06d      	b.n	80024be <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e6:	221c      	movs	r2, #28
 80023e8:	4013      	ands	r3, r2
 80023ea:	2202      	movs	r2, #2
 80023ec:	409a      	lsls	r2, r3
 80023ee:	0013      	movs	r3, r2
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	4013      	ands	r3, r2
 80023f4:	d02e      	beq.n	8002454 <HAL_DMA_IRQHandler+0xec>
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2202      	movs	r2, #2
 80023fa:	4013      	ands	r3, r2
 80023fc:	d02a      	beq.n	8002454 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2220      	movs	r2, #32
 8002406:	4013      	ands	r3, r2
 8002408:	d10b      	bne.n	8002422 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	210a      	movs	r1, #10
 8002416:	438a      	bics	r2, r1
 8002418:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2225      	movs	r2, #37	@ 0x25
 800241e:	2101      	movs	r1, #1
 8002420:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8002422:	4b29      	ldr	r3, [pc, #164]	@ (80024c8 <HAL_DMA_IRQHandler+0x160>)
 8002424:	6859      	ldr	r1, [r3, #4]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	221c      	movs	r2, #28
 800242c:	4013      	ands	r3, r2
 800242e:	2202      	movs	r2, #2
 8002430:	409a      	lsls	r2, r3
 8002432:	4b25      	ldr	r3, [pc, #148]	@ (80024c8 <HAL_DMA_IRQHandler+0x160>)
 8002434:	430a      	orrs	r2, r1
 8002436:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2224      	movs	r2, #36	@ 0x24
 800243c:	2100      	movs	r1, #0
 800243e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002444:	2b00      	cmp	r3, #0
 8002446:	d03a      	beq.n	80024be <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	0010      	movs	r0, r2
 8002450:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002452:	e034      	b.n	80024be <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002458:	221c      	movs	r2, #28
 800245a:	4013      	ands	r3, r2
 800245c:	2208      	movs	r2, #8
 800245e:	409a      	lsls	r2, r3
 8002460:	0013      	movs	r3, r2
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	4013      	ands	r3, r2
 8002466:	d02b      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x158>
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2208      	movs	r2, #8
 800246c:	4013      	ands	r3, r2
 800246e:	d027      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	210e      	movs	r1, #14
 800247c:	438a      	bics	r2, r1
 800247e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002480:	4b11      	ldr	r3, [pc, #68]	@ (80024c8 <HAL_DMA_IRQHandler+0x160>)
 8002482:	6859      	ldr	r1, [r3, #4]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002488:	221c      	movs	r2, #28
 800248a:	4013      	ands	r3, r2
 800248c:	2201      	movs	r2, #1
 800248e:	409a      	lsls	r2, r3
 8002490:	4b0d      	ldr	r3, [pc, #52]	@ (80024c8 <HAL_DMA_IRQHandler+0x160>)
 8002492:	430a      	orrs	r2, r1
 8002494:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2225      	movs	r2, #37	@ 0x25
 80024a0:	2101      	movs	r1, #1
 80024a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2224      	movs	r2, #36	@ 0x24
 80024a8:	2100      	movs	r1, #0
 80024aa:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	0010      	movs	r0, r2
 80024bc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80024be:	46c0      	nop			@ (mov r8, r8)
 80024c0:	46c0      	nop			@ (mov r8, r8)
}
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b004      	add	sp, #16
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40020000 	.word	0x40020000

080024cc <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2225      	movs	r2, #37	@ 0x25
 80024d8:	5c9b      	ldrb	r3, [r3, r2]
 80024da:	b2db      	uxtb	r3, r3
}
 80024dc:	0018      	movs	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	b002      	add	sp, #8
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80024fa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002500:	2b00      	cmp	r3, #0
 8002502:	d004      	beq.n	800250e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800250c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800250e:	4b14      	ldr	r3, [pc, #80]	@ (8002560 <DMA_SetConfig+0x7c>)
 8002510:	6859      	ldr	r1, [r3, #4]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	221c      	movs	r2, #28
 8002518:	4013      	ands	r3, r2
 800251a:	2201      	movs	r2, #1
 800251c:	409a      	lsls	r2, r3
 800251e:	4b10      	ldr	r3, [pc, #64]	@ (8002560 <DMA_SetConfig+0x7c>)
 8002520:	430a      	orrs	r2, r1
 8002522:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b10      	cmp	r3, #16
 8002532:	d108      	bne.n	8002546 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002544:	e007      	b.n	8002556 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	60da      	str	r2, [r3, #12]
}
 8002556:	46c0      	nop			@ (mov r8, r8)
 8002558:	46bd      	mov	sp, r7
 800255a:	b004      	add	sp, #16
 800255c:	bd80      	pop	{r7, pc}
 800255e:	46c0      	nop			@ (mov r8, r8)
 8002560:	40020000 	.word	0x40020000

08002564 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	001a      	movs	r2, r3
 8002572:	23ff      	movs	r3, #255	@ 0xff
 8002574:	4013      	ands	r3, r2
 8002576:	3b08      	subs	r3, #8
 8002578:	2114      	movs	r1, #20
 800257a:	0018      	movs	r0, r3
 800257c:	f7fd fdc4 	bl	8000108 <__udivsi3>
 8002580:	0003      	movs	r3, r0
 8002582:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002588:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 800258a:	4a0a      	ldr	r2, [pc, #40]	@ (80025b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800258c:	4694      	mov	ip, r2
 800258e:	4463      	add	r3, ip
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	001a      	movs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a07      	ldr	r2, [pc, #28]	@ (80025b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800259c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	221c      	movs	r2, #28
 80025a2:	4013      	ands	r3, r2
 80025a4:	2201      	movs	r2, #1
 80025a6:	409a      	lsls	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80025ac:	46c0      	nop			@ (mov r8, r8)
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b004      	add	sp, #16
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	10008200 	.word	0x10008200
 80025b8:	40020880 	.word	0x40020880

080025bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	22ff      	movs	r2, #255	@ 0xff
 80025ca:	4013      	ands	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4a0a      	ldr	r2, [pc, #40]	@ (80025fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80025d2:	4694      	mov	ip, r2
 80025d4:	4463      	add	r3, ip
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	001a      	movs	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a07      	ldr	r2, [pc, #28]	@ (8002600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80025e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	2203      	movs	r2, #3
 80025ea:	4013      	ands	r3, r2
 80025ec:	2201      	movs	r2, #1
 80025ee:	409a      	lsls	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80025f4:	46c0      	nop			@ (mov r8, r8)
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b004      	add	sp, #16
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	1000823f 	.word	0x1000823f
 8002600:	40020940 	.word	0x40020940

08002604 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	607a      	str	r2, [r7, #4]
 800260e:	200b      	movs	r0, #11
 8002610:	183b      	adds	r3, r7, r0
 8002612:	1c0a      	adds	r2, r1, #0
 8002614:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002616:	2317      	movs	r3, #23
 8002618:	18fb      	adds	r3, r7, r3
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 800261e:	183b      	adds	r3, r7, r0
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d010      	beq.n	8002648 <HAL_EXTI_RegisterCallback+0x44>
 8002626:	dc13      	bgt.n	8002650 <HAL_EXTI_RegisterCallback+0x4c>
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <HAL_EXTI_RegisterCallback+0x2e>
 800262c:	2b01      	cmp	r3, #1
 800262e:	d007      	beq.n	8002640 <HAL_EXTI_RegisterCallback+0x3c>
 8002630:	e00e      	b.n	8002650 <HAL_EXTI_RegisterCallback+0x4c>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	609a      	str	r2, [r3, #8]
      break;
 800263e:	e00c      	b.n	800265a <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	605a      	str	r2, [r3, #4]
      break;
 8002646:	e008      	b.n	800265a <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	609a      	str	r2, [r3, #8]
      break;
 800264e:	e004      	b.n	800265a <HAL_EXTI_RegisterCallback+0x56>

    default:
      status = HAL_ERROR;
 8002650:	2317      	movs	r3, #23
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	2201      	movs	r2, #1
 8002656:	701a      	strb	r2, [r3, #0]
      break;
 8002658:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 800265a:	2317      	movs	r3, #23
 800265c:	18fb      	adds	r3, r7, r3
 800265e:	781b      	ldrb	r3, [r3, #0]
}
 8002660:	0018      	movs	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	b006      	add	sp, #24
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e003      	b.n	8002684 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002682:	2300      	movs	r3, #0
  }
}
 8002684:	0018      	movs	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	b002      	add	sp, #8
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	0c1b      	lsrs	r3, r3, #16
 800269a:	2201      	movs	r2, #1
 800269c:	4013      	ands	r3, r2
 800269e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	221f      	movs	r2, #31
 80026a6:	4013      	ands	r3, r2
 80026a8:	2201      	movs	r2, #1
 80026aa:	409a      	lsls	r2, r3
 80026ac:	0013      	movs	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	015b      	lsls	r3, r3, #5
 80026b4:	4a18      	ldr	r2, [pc, #96]	@ (8002718 <HAL_EXTI_IRQHandler+0x8c>)
 80026b6:	4694      	mov	ip, r2
 80026b8:	4463      	add	r3, ip
 80026ba:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4013      	ands	r3, r2
 80026c4:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d009      	beq.n	80026e0 <HAL_EXTI_IRQHandler+0x54>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <HAL_EXTI_IRQHandler+0x54>
    {
      hexti->RisingCallback();
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	015b      	lsls	r3, r3, #5
 80026e4:	4a0d      	ldr	r2, [pc, #52]	@ (800271c <HAL_EXTI_IRQHandler+0x90>)
 80026e6:	4694      	mov	ip, r2
 80026e8:	4463      	add	r3, ip
 80026ea:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4013      	ands	r3, r2
 80026f4:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d009      	beq.n	8002710 <HAL_EXTI_IRQHandler+0x84>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <HAL_EXTI_IRQHandler+0x84>
    {
      hexti->FallingCallback();
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	4798      	blx	r3
    }
  }
}
 8002710:	46c0      	nop			@ (mov r8, r8)
 8002712:	46bd      	mov	sp, r7
 8002714:	b006      	add	sp, #24
 8002716:	bd80      	pop	{r7, pc}
 8002718:	4002180c 	.word	0x4002180c
 800271c:	40021810 	.word	0x40021810

08002720 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800272e:	e153      	b.n	80029d8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2101      	movs	r1, #1
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	4091      	lsls	r1, r2
 800273a:	000a      	movs	r2, r1
 800273c:	4013      	ands	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d100      	bne.n	8002748 <HAL_GPIO_Init+0x28>
 8002746:	e144      	b.n	80029d2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b02      	cmp	r3, #2
 800274e:	d003      	beq.n	8002758 <HAL_GPIO_Init+0x38>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b12      	cmp	r3, #18
 8002756:	d125      	bne.n	80027a4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	08da      	lsrs	r2, r3, #3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3208      	adds	r2, #8
 8002760:	0092      	lsls	r2, r2, #2
 8002762:	58d3      	ldr	r3, [r2, r3]
 8002764:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	2207      	movs	r2, #7
 800276a:	4013      	ands	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	220f      	movs	r2, #15
 8002770:	409a      	lsls	r2, r3
 8002772:	0013      	movs	r3, r2
 8002774:	43da      	mvns	r2, r3
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	4013      	ands	r3, r2
 800277a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	220f      	movs	r2, #15
 8002782:	401a      	ands	r2, r3
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	2107      	movs	r1, #7
 8002788:	400b      	ands	r3, r1
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	409a      	lsls	r2, r3
 800278e:	0013      	movs	r3, r2
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	4313      	orrs	r3, r2
 8002794:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	08da      	lsrs	r2, r3, #3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3208      	adds	r2, #8
 800279e:	0092      	lsls	r2, r2, #2
 80027a0:	6979      	ldr	r1, [r7, #20]
 80027a2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	2203      	movs	r2, #3
 80027b0:	409a      	lsls	r2, r3
 80027b2:	0013      	movs	r3, r2
 80027b4:	43da      	mvns	r2, r3
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	4013      	ands	r3, r2
 80027ba:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2203      	movs	r2, #3
 80027c2:	401a      	ands	r2, r3
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	409a      	lsls	r2, r3
 80027ca:	0013      	movs	r3, r2
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d00b      	beq.n	80027f8 <HAL_GPIO_Init+0xd8>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d007      	beq.n	80027f8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027ec:	2b11      	cmp	r3, #17
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b12      	cmp	r3, #18
 80027f6:	d130      	bne.n	800285a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	2203      	movs	r2, #3
 8002804:	409a      	lsls	r2, r3
 8002806:	0013      	movs	r3, r2
 8002808:	43da      	mvns	r2, r3
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	4013      	ands	r3, r2
 800280e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	409a      	lsls	r2, r3
 800281a:	0013      	movs	r3, r2
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	4313      	orrs	r3, r2
 8002820:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800282e:	2201      	movs	r2, #1
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	409a      	lsls	r2, r3
 8002834:	0013      	movs	r3, r2
 8002836:	43da      	mvns	r2, r3
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	4013      	ands	r3, r2
 800283c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	091b      	lsrs	r3, r3, #4
 8002844:	2201      	movs	r2, #1
 8002846:	401a      	ands	r2, r3
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	409a      	lsls	r2, r3
 800284c:	0013      	movs	r3, r2
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	4313      	orrs	r3, r2
 8002852:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b03      	cmp	r3, #3
 8002860:	d017      	beq.n	8002892 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	2203      	movs	r2, #3
 800286e:	409a      	lsls	r2, r3
 8002870:	0013      	movs	r3, r2
 8002872:	43da      	mvns	r2, r3
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	4013      	ands	r3, r2
 8002878:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	409a      	lsls	r2, r3
 8002884:	0013      	movs	r3, r2
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	4313      	orrs	r3, r2
 800288a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	2380      	movs	r3, #128	@ 0x80
 8002898:	055b      	lsls	r3, r3, #21
 800289a:	4013      	ands	r3, r2
 800289c:	d100      	bne.n	80028a0 <HAL_GPIO_Init+0x180>
 800289e:	e098      	b.n	80029d2 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80028a0:	4a53      	ldr	r2, [pc, #332]	@ (80029f0 <HAL_GPIO_Init+0x2d0>)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	089b      	lsrs	r3, r3, #2
 80028a6:	3318      	adds	r3, #24
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	589b      	ldr	r3, [r3, r2]
 80028ac:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	2203      	movs	r2, #3
 80028b2:	4013      	ands	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	220f      	movs	r2, #15
 80028b8:	409a      	lsls	r2, r3
 80028ba:	0013      	movs	r3, r2
 80028bc:	43da      	mvns	r2, r3
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	4013      	ands	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	23a0      	movs	r3, #160	@ 0xa0
 80028c8:	05db      	lsls	r3, r3, #23
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d019      	beq.n	8002902 <HAL_GPIO_Init+0x1e2>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a48      	ldr	r2, [pc, #288]	@ (80029f4 <HAL_GPIO_Init+0x2d4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d013      	beq.n	80028fe <HAL_GPIO_Init+0x1de>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a47      	ldr	r2, [pc, #284]	@ (80029f8 <HAL_GPIO_Init+0x2d8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d00d      	beq.n	80028fa <HAL_GPIO_Init+0x1da>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a46      	ldr	r2, [pc, #280]	@ (80029fc <HAL_GPIO_Init+0x2dc>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d007      	beq.n	80028f6 <HAL_GPIO_Init+0x1d6>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a45      	ldr	r2, [pc, #276]	@ (8002a00 <HAL_GPIO_Init+0x2e0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d101      	bne.n	80028f2 <HAL_GPIO_Init+0x1d2>
 80028ee:	2305      	movs	r3, #5
 80028f0:	e008      	b.n	8002904 <HAL_GPIO_Init+0x1e4>
 80028f2:	2306      	movs	r3, #6
 80028f4:	e006      	b.n	8002904 <HAL_GPIO_Init+0x1e4>
 80028f6:	2303      	movs	r3, #3
 80028f8:	e004      	b.n	8002904 <HAL_GPIO_Init+0x1e4>
 80028fa:	2302      	movs	r3, #2
 80028fc:	e002      	b.n	8002904 <HAL_GPIO_Init+0x1e4>
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <HAL_GPIO_Init+0x1e4>
 8002902:	2300      	movs	r3, #0
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	2103      	movs	r1, #3
 8002908:	400a      	ands	r2, r1
 800290a:	00d2      	lsls	r2, r2, #3
 800290c:	4093      	lsls	r3, r2
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	4313      	orrs	r3, r2
 8002912:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002914:	4936      	ldr	r1, [pc, #216]	@ (80029f0 <HAL_GPIO_Init+0x2d0>)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	089b      	lsrs	r3, r3, #2
 800291a:	3318      	adds	r3, #24
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8002922:	4a33      	ldr	r2, [pc, #204]	@ (80029f0 <HAL_GPIO_Init+0x2d0>)
 8002924:	2380      	movs	r3, #128	@ 0x80
 8002926:	58d3      	ldr	r3, [r2, r3]
 8002928:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	43da      	mvns	r2, r3
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	4013      	ands	r3, r2
 8002932:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	2380      	movs	r3, #128	@ 0x80
 800293a:	025b      	lsls	r3, r3, #9
 800293c:	4013      	ands	r3, r2
 800293e:	d003      	beq.n	8002948 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	4313      	orrs	r3, r2
 8002946:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002948:	4929      	ldr	r1, [pc, #164]	@ (80029f0 <HAL_GPIO_Init+0x2d0>)
 800294a:	2280      	movs	r2, #128	@ 0x80
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8002950:	4a27      	ldr	r2, [pc, #156]	@ (80029f0 <HAL_GPIO_Init+0x2d0>)
 8002952:	2384      	movs	r3, #132	@ 0x84
 8002954:	58d3      	ldr	r3, [r2, r3]
 8002956:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	43da      	mvns	r2, r3
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	4013      	ands	r3, r2
 8002960:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	2380      	movs	r3, #128	@ 0x80
 8002968:	029b      	lsls	r3, r3, #10
 800296a:	4013      	ands	r3, r2
 800296c:	d003      	beq.n	8002976 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4313      	orrs	r3, r2
 8002974:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002976:	491e      	ldr	r1, [pc, #120]	@ (80029f0 <HAL_GPIO_Init+0x2d0>)
 8002978:	2284      	movs	r2, #132	@ 0x84
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800297e:	4b1c      	ldr	r3, [pc, #112]	@ (80029f0 <HAL_GPIO_Init+0x2d0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	43da      	mvns	r2, r3
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	4013      	ands	r3, r2
 800298c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	2380      	movs	r3, #128	@ 0x80
 8002994:	035b      	lsls	r3, r3, #13
 8002996:	4013      	ands	r3, r2
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4313      	orrs	r3, r2
 80029a0:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80029a2:	4b13      	ldr	r3, [pc, #76]	@ (80029f0 <HAL_GPIO_Init+0x2d0>)
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80029a8:	4b11      	ldr	r3, [pc, #68]	@ (80029f0 <HAL_GPIO_Init+0x2d0>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	43da      	mvns	r2, r3
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	4013      	ands	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	2380      	movs	r3, #128	@ 0x80
 80029be:	039b      	lsls	r3, r3, #14
 80029c0:	4013      	ands	r3, r2
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80029cc:	4b08      	ldr	r3, [pc, #32]	@ (80029f0 <HAL_GPIO_Init+0x2d0>)
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	3301      	adds	r3, #1
 80029d6:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	40da      	lsrs	r2, r3
 80029e0:	1e13      	subs	r3, r2, #0
 80029e2:	d000      	beq.n	80029e6 <HAL_GPIO_Init+0x2c6>
 80029e4:	e6a4      	b.n	8002730 <HAL_GPIO_Init+0x10>
  }
}
 80029e6:	46c0      	nop			@ (mov r8, r8)
 80029e8:	46c0      	nop			@ (mov r8, r8)
 80029ea:	46bd      	mov	sp, r7
 80029ec:	b006      	add	sp, #24
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40021800 	.word	0x40021800
 80029f4:	50000400 	.word	0x50000400
 80029f8:	50000800 	.word	0x50000800
 80029fc:	50000c00 	.word	0x50000c00
 8002a00:	50001400 	.word	0x50001400

08002a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	0008      	movs	r0, r1
 8002a0e:	0011      	movs	r1, r2
 8002a10:	1cbb      	adds	r3, r7, #2
 8002a12:	1c02      	adds	r2, r0, #0
 8002a14:	801a      	strh	r2, [r3, #0]
 8002a16:	1c7b      	adds	r3, r7, #1
 8002a18:	1c0a      	adds	r2, r1, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a1c:	1c7b      	adds	r3, r7, #1
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d004      	beq.n	8002a2e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a24:	1cbb      	adds	r3, r7, #2
 8002a26:	881a      	ldrh	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a2c:	e003      	b.n	8002a36 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a2e:	1cbb      	adds	r3, r7, #2
 8002a30:	881a      	ldrh	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a36:	46c0      	nop			@ (mov r8, r8)
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	b002      	add	sp, #8
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e08f      	b.n	8002b72 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2241      	movs	r2, #65	@ 0x41
 8002a56:	5c9b      	ldrb	r3, [r3, r2]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d107      	bne.n	8002a6e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2240      	movs	r2, #64	@ 0x40
 8002a62:	2100      	movs	r1, #0
 8002a64:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f7fd fe8d 	bl	8000788 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2241      	movs	r2, #65	@ 0x41
 8002a72:	2124      	movs	r1, #36	@ 0x24
 8002a74:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2101      	movs	r1, #1
 8002a82:	438a      	bics	r2, r1
 8002a84:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	493b      	ldr	r1, [pc, #236]	@ (8002b7c <HAL_I2C_Init+0x13c>)
 8002a90:	400a      	ands	r2, r1
 8002a92:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4938      	ldr	r1, [pc, #224]	@ (8002b80 <HAL_I2C_Init+0x140>)
 8002aa0:	400a      	ands	r2, r1
 8002aa2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d108      	bne.n	8002abe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2180      	movs	r1, #128	@ 0x80
 8002ab6:	0209      	lsls	r1, r1, #8
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	e007      	b.n	8002ace <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2184      	movs	r1, #132	@ 0x84
 8002ac8:	0209      	lsls	r1, r1, #8
 8002aca:	430a      	orrs	r2, r1
 8002acc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d109      	bne.n	8002aea <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2180      	movs	r1, #128	@ 0x80
 8002ae2:	0109      	lsls	r1, r1, #4
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	605a      	str	r2, [r3, #4]
 8002ae8:	e007      	b.n	8002afa <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4923      	ldr	r1, [pc, #140]	@ (8002b84 <HAL_I2C_Init+0x144>)
 8002af6:	400a      	ands	r2, r1
 8002af8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4920      	ldr	r1, [pc, #128]	@ (8002b88 <HAL_I2C_Init+0x148>)
 8002b06:	430a      	orrs	r2, r1
 8002b08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	491a      	ldr	r1, [pc, #104]	@ (8002b80 <HAL_I2C_Init+0x140>)
 8002b16:	400a      	ands	r2, r1
 8002b18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691a      	ldr	r2, [r3, #16]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	431a      	orrs	r2, r3
 8002b24:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69d9      	ldr	r1, [r3, #28]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1a      	ldr	r2, [r3, #32]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2101      	movs	r1, #1
 8002b50:	430a      	orrs	r2, r1
 8002b52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2241      	movs	r2, #65	@ 0x41
 8002b5e:	2120      	movs	r1, #32
 8002b60:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2242      	movs	r2, #66	@ 0x42
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	0018      	movs	r0, r3
 8002b74:	46bd      	mov	sp, r7
 8002b76:	b002      	add	sp, #8
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	46c0      	nop			@ (mov r8, r8)
 8002b7c:	f0ffffff 	.word	0xf0ffffff
 8002b80:	ffff7fff 	.word	0xffff7fff
 8002b84:	fffff7ff 	.word	0xfffff7ff
 8002b88:	02008000 	.word	0x02008000

08002b8c <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8002b8c:	b5b0      	push	{r4, r5, r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	1dbb      	adds	r3, r7, #6
 8002b98:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2241      	movs	r2, #65	@ 0x41
 8002b9e:	5c9b      	ldrb	r3, [r3, r2]
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b20      	cmp	r3, #32
 8002ba4:	d000      	beq.n	8002ba8 <HAL_I2C_Slave_Transmit_DMA+0x1c>
 8002ba6:	e0db      	b.n	8002d60 <HAL_I2C_Slave_Transmit_DMA+0x1d4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_I2C_Slave_Transmit_DMA+0x2a>
 8002bae:	1dbb      	adds	r3, r7, #6
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d105      	bne.n	8002bc2 <HAL_I2C_Slave_Transmit_DMA+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2280      	movs	r2, #128	@ 0x80
 8002bba:	0092      	lsls	r2, r2, #2
 8002bbc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e0cf      	b.n	8002d62 <HAL_I2C_Slave_Transmit_DMA+0x1d6>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2240      	movs	r2, #64	@ 0x40
 8002bc6:	5c9b      	ldrb	r3, [r3, r2]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <HAL_I2C_Slave_Transmit_DMA+0x44>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e0c8      	b.n	8002d62 <HAL_I2C_Slave_Transmit_DMA+0x1d6>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2240      	movs	r2, #64	@ 0x40
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2241      	movs	r2, #65	@ 0x41
 8002bdc:	2121      	movs	r1, #33	@ 0x21
 8002bde:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2242      	movs	r2, #66	@ 0x42
 8002be4:	2120      	movs	r1, #32
 8002be6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	1dba      	adds	r2, r7, #6
 8002bf8:	8812      	ldrh	r2, [r2, #0]
 8002bfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	4a58      	ldr	r2, [pc, #352]	@ (8002d6c <HAL_I2C_Slave_Transmit_DMA+0x1e0>)
 8002c0a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4a58      	ldr	r2, [pc, #352]	@ (8002d70 <HAL_I2C_Slave_Transmit_DMA+0x1e4>)
 8002c10:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a1a      	ldr	r2, [r3, #32]
 8002c16:	2380      	movs	r3, #128	@ 0x80
 8002c18:	029b      	lsls	r3, r3, #10
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d117      	bne.n	8002c4e <HAL_I2C_Slave_Transmit_DMA+0xc2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c22:	781a      	ldrb	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferCount != 0U)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d06e      	beq.n	8002d36 <HAL_I2C_Slave_Transmit_DMA+0x1aa>
    {
      if (hi2c->hdmatx != NULL)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d025      	beq.n	8002cac <HAL_I2C_Slave_Transmit_DMA+0x120>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c64:	4a43      	ldr	r2, [pc, #268]	@ (8002d74 <HAL_I2C_Slave_Transmit_DMA+0x1e8>)
 8002c66:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c6c:	4a42      	ldr	r2, [pc, #264]	@ (8002d78 <HAL_I2C_Slave_Transmit_DMA+0x1ec>)
 8002c6e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c74:	2200      	movs	r2, #0
 8002c76:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8002c88:	0019      	movs	r1, r3
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8002c90:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8002c96:	2517      	movs	r5, #23
 8002c98:	197c      	adds	r4, r7, r5
 8002c9a:	f7ff fa63 	bl	8002164 <HAL_DMA_Start_IT>
 8002c9e:	0003      	movs	r3, r0
 8002ca0:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002ca2:	197b      	adds	r3, r7, r5
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d131      	bne.n	8002d0e <HAL_I2C_Slave_Transmit_DMA+0x182>
 8002caa:	e013      	b.n	8002cd4 <HAL_I2C_Slave_Transmit_DMA+0x148>
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2241      	movs	r2, #65	@ 0x41
 8002cb0:	2128      	movs	r1, #40	@ 0x28
 8002cb2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2242      	movs	r2, #66	@ 0x42
 8002cb8:	2100      	movs	r1, #0
 8002cba:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc0:	2280      	movs	r2, #128	@ 0x80
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2240      	movs	r2, #64	@ 0x40
 8002ccc:	2100      	movs	r1, #0
 8002cce:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e046      	b.n	8002d62 <HAL_I2C_Slave_Transmit_DMA+0x1d6>
      {
        /* Enable Address Acknowledge */
        hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4927      	ldr	r1, [pc, #156]	@ (8002d7c <HAL_I2C_Slave_Transmit_DMA+0x1f0>)
 8002ce0:	400a      	ands	r2, r1
 8002ce2:	605a      	str	r2, [r3, #4]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2240      	movs	r2, #64	@ 0x40
 8002ce8:	2100      	movs	r1, #0
 8002cea:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR, STOP, NACK, ADDR interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002cec:	2380      	movs	r3, #128	@ 0x80
 8002cee:	021a      	lsls	r2, r3, #8
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	0011      	movs	r1, r2
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f001 fb55 	bl	80043a4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2180      	movs	r1, #128	@ 0x80
 8002d06:	01c9      	lsls	r1, r1, #7
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	e026      	b.n	8002d5c <HAL_I2C_Slave_Transmit_DMA+0x1d0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2241      	movs	r2, #65	@ 0x41
 8002d12:	2128      	movs	r1, #40	@ 0x28
 8002d14:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2242      	movs	r2, #66	@ 0x42
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d22:	2210      	movs	r2, #16
 8002d24:	431a      	orrs	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2240      	movs	r2, #64	@ 0x40
 8002d2e:	2100      	movs	r1, #0
 8002d30:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e015      	b.n	8002d62 <HAL_I2C_Slave_Transmit_DMA+0x1d6>
      }
    }
    else
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	490e      	ldr	r1, [pc, #56]	@ (8002d7c <HAL_I2C_Slave_Transmit_DMA+0x1f0>)
 8002d42:	400a      	ands	r2, r1
 8002d44:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2240      	movs	r2, #64	@ 0x40
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	5499      	strb	r1, [r3, r2]

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d4e:	2380      	movs	r3, #128	@ 0x80
 8002d50:	021a      	lsls	r2, r3, #8
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	0011      	movs	r1, r2
 8002d56:	0018      	movs	r0, r3
 8002d58:	f001 fb24 	bl	80043a4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	e000      	b.n	8002d62 <HAL_I2C_Slave_Transmit_DMA+0x1d6>
  }
  else
  {
    return HAL_BUSY;
 8002d60:	2302      	movs	r3, #2
  }
}
 8002d62:	0018      	movs	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b006      	add	sp, #24
 8002d68:	bdb0      	pop	{r4, r5, r7, pc}
 8002d6a:	46c0      	nop			@ (mov r8, r8)
 8002d6c:	ffff0000 	.word	0xffff0000
 8002d70:	080035dd 	.word	0x080035dd
 8002d74:	08004279 	.word	0x08004279
 8002d78:	080042c1 	.word	0x080042c1
 8002d7c:	ffff7fff 	.word	0xffff7fff

08002d80 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	68f9      	ldr	r1, [r7, #12]
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	4798      	blx	r3
  }
}
 8002dac:	46c0      	nop			@ (mov r8, r8)
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b004      	add	sp, #16
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	0a1b      	lsrs	r3, r3, #8
 8002dd0:	001a      	movs	r2, r3
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d010      	beq.n	8002dfa <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	09db      	lsrs	r3, r3, #7
 8002ddc:	001a      	movs	r2, r3
 8002dde:	2301      	movs	r3, #1
 8002de0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002de2:	d00a      	beq.n	8002dfa <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de8:	2201      	movs	r2, #1
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2280      	movs	r2, #128	@ 0x80
 8002df6:	0052      	lsls	r2, r2, #1
 8002df8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	0a9b      	lsrs	r3, r3, #10
 8002dfe:	001a      	movs	r2, r3
 8002e00:	2301      	movs	r3, #1
 8002e02:	4013      	ands	r3, r2
 8002e04:	d010      	beq.n	8002e28 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	09db      	lsrs	r3, r3, #7
 8002e0a:	001a      	movs	r2, r3
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002e10:	d00a      	beq.n	8002e28 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e16:	2208      	movs	r2, #8
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2280      	movs	r2, #128	@ 0x80
 8002e24:	00d2      	lsls	r2, r2, #3
 8002e26:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	0a5b      	lsrs	r3, r3, #9
 8002e2c:	001a      	movs	r2, r3
 8002e2e:	2301      	movs	r3, #1
 8002e30:	4013      	ands	r3, r2
 8002e32:	d010      	beq.n	8002e56 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	09db      	lsrs	r3, r3, #7
 8002e38:	001a      	movs	r2, r3
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002e3e:	d00a      	beq.n	8002e56 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e44:	2202      	movs	r2, #2
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2280      	movs	r2, #128	@ 0x80
 8002e52:	0092      	lsls	r2, r2, #2
 8002e54:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	220b      	movs	r2, #11
 8002e60:	4013      	ands	r3, r2
 8002e62:	d005      	beq.n	8002e70 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	0011      	movs	r1, r2
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f001 f8b6 	bl	8003fdc <I2C_ITError>
  }
}
 8002e70:	46c0      	nop			@ (mov r8, r8)
 8002e72:	46bd      	mov	sp, r7
 8002e74:	b006      	add	sp, #24
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002e80:	46c0      	nop			@ (mov r8, r8)
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b002      	add	sp, #8
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002e90:	46c0      	nop			@ (mov r8, r8)
 8002e92:	46bd      	mov	sp, r7
 8002e94:	b002      	add	sp, #8
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002ea0:	46c0      	nop			@ (mov r8, r8)
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b002      	add	sp, #8
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	0008      	movs	r0, r1
 8002eb2:	0011      	movs	r1, r2
 8002eb4:	1cfb      	adds	r3, r7, #3
 8002eb6:	1c02      	adds	r2, r0, #0
 8002eb8:	701a      	strb	r2, [r3, #0]
 8002eba:	003b      	movs	r3, r7
 8002ebc:	1c0a      	adds	r2, r1, #0
 8002ebe:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002ec0:	46c0      	nop			@ (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b002      	add	sp, #8
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002ed0:	46c0      	nop			@ (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	b002      	add	sp, #8
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002ee0:	46c0      	nop			@ (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b002      	add	sp, #8
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002ef0:	46c0      	nop			@ (mov r8, r8)
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b002      	add	sp, #8
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002f00:	46c0      	nop			@ (mov r8, r8)
 8002f02:	46bd      	mov	sp, r7
 8002f04:	b002      	add	sp, #8
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8002f14:	0018      	movs	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b002      	add	sp, #8
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2240      	movs	r2, #64	@ 0x40
 8002f36:	5c9b      	ldrb	r3, [r3, r2]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <I2C_Slave_ISR_IT+0x24>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e0fb      	b.n	8003138 <I2C_Slave_ISR_IT+0x21c>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2240      	movs	r2, #64	@ 0x40
 8002f44:	2101      	movs	r1, #1
 8002f46:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	001a      	movs	r2, r3
 8002f4e:	2301      	movs	r3, #1
 8002f50:	4013      	ands	r3, r2
 8002f52:	d00c      	beq.n	8002f6e <I2C_Slave_ISR_IT+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	095b      	lsrs	r3, r3, #5
 8002f58:	001a      	movs	r2, r3
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002f5e:	d006      	beq.n	8002f6e <I2C_Slave_ISR_IT+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	0011      	movs	r1, r2
 8002f66:	0018      	movs	r0, r3
 8002f68:	f000 fe4e 	bl	8003c08 <I2C_ITSlaveCplt>
 8002f6c:	e0df      	b.n	800312e <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	091b      	lsrs	r3, r3, #4
 8002f72:	001a      	movs	r2, r3
 8002f74:	2301      	movs	r3, #1
 8002f76:	4013      	ands	r3, r2
 8002f78:	d054      	beq.n	8003024 <I2C_Slave_ISR_IT+0x108>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	091b      	lsrs	r3, r3, #4
 8002f7e:	001a      	movs	r2, r3
 8002f80:	2301      	movs	r3, #1
 8002f82:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002f84:	d04e      	beq.n	8003024 <I2C_Slave_ISR_IT+0x108>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d12d      	bne.n	8002fec <I2C_Slave_ISR_IT+0xd0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2241      	movs	r2, #65	@ 0x41
 8002f94:	5c9b      	ldrb	r3, [r3, r2]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b28      	cmp	r3, #40	@ 0x28
 8002f9a:	d10b      	bne.n	8002fb4 <I2C_Slave_ISR_IT+0x98>
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	2380      	movs	r3, #128	@ 0x80
 8002fa0:	049b      	lsls	r3, r3, #18
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d106      	bne.n	8002fb4 <I2C_Slave_ISR_IT+0x98>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	0011      	movs	r1, r2
 8002fac:	0018      	movs	r0, r3
 8002fae:	f000 ffbb 	bl	8003f28 <I2C_ITListenCplt>
 8002fb2:	e036      	b.n	8003022 <I2C_Slave_ISR_IT+0x106>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2241      	movs	r2, #65	@ 0x41
 8002fb8:	5c9b      	ldrb	r3, [r3, r2]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b29      	cmp	r3, #41	@ 0x29
 8002fbe:	d110      	bne.n	8002fe2 <I2C_Slave_ISR_IT+0xc6>
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	4a5f      	ldr	r2, [pc, #380]	@ (8003140 <I2C_Slave_ISR_IT+0x224>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d00c      	beq.n	8002fe2 <I2C_Slave_ISR_IT+0xc6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2210      	movs	r2, #16
 8002fce:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f001 f92d 	bl	8004232 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f000 fcdc 	bl	8003998 <I2C_ITSlaveSeqCplt>
 8002fe0:	e01f      	b.n	8003022 <I2C_Slave_ISR_IT+0x106>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2210      	movs	r2, #16
 8002fe8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002fea:	e09d      	b.n	8003128 <I2C_Slave_ISR_IT+0x20c>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2210      	movs	r2, #16
 8002ff2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d005      	beq.n	8003012 <I2C_Slave_ISR_IT+0xf6>
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	2380      	movs	r3, #128	@ 0x80
 800300a:	045b      	lsls	r3, r3, #17
 800300c:	429a      	cmp	r2, r3
 800300e:	d000      	beq.n	8003012 <I2C_Slave_ISR_IT+0xf6>
 8003010:	e08a      	b.n	8003128 <I2C_Slave_ISR_IT+0x20c>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	0011      	movs	r1, r2
 800301a:	0018      	movs	r0, r3
 800301c:	f000 ffde 	bl	8003fdc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003020:	e082      	b.n	8003128 <I2C_Slave_ISR_IT+0x20c>
 8003022:	e081      	b.n	8003128 <I2C_Slave_ISR_IT+0x20c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	089b      	lsrs	r3, r3, #2
 8003028:	001a      	movs	r2, r3
 800302a:	2301      	movs	r3, #1
 800302c:	4013      	ands	r3, r2
 800302e:	d031      	beq.n	8003094 <I2C_Slave_ISR_IT+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	089b      	lsrs	r3, r3, #2
 8003034:	001a      	movs	r2, r3
 8003036:	2301      	movs	r3, #1
 8003038:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800303a:	d02b      	beq.n	8003094 <I2C_Slave_ISR_IT+0x178>
  {
    if (hi2c->XferCount > 0U)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003040:	b29b      	uxth	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d018      	beq.n	8003078 <I2C_Slave_ISR_IT+0x15c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800306e:	b29b      	uxth	r3, r3
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800307c:	b29b      	uxth	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d154      	bne.n	800312c <I2C_Slave_ISR_IT+0x210>
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	4a2e      	ldr	r2, [pc, #184]	@ (8003140 <I2C_Slave_ISR_IT+0x224>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d050      	beq.n	800312c <I2C_Slave_ISR_IT+0x210>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	0018      	movs	r0, r3
 800308e:	f000 fc83 	bl	8003998 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003092:	e04b      	b.n	800312c <I2C_Slave_ISR_IT+0x210>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	08db      	lsrs	r3, r3, #3
 8003098:	001a      	movs	r2, r3
 800309a:	2301      	movs	r3, #1
 800309c:	4013      	ands	r3, r2
 800309e:	d00c      	beq.n	80030ba <I2C_Slave_ISR_IT+0x19e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	08db      	lsrs	r3, r3, #3
 80030a4:	001a      	movs	r2, r3
 80030a6:	2301      	movs	r3, #1
 80030a8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80030aa:	d006      	beq.n	80030ba <I2C_Slave_ISR_IT+0x19e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	0011      	movs	r1, r2
 80030b2:	0018      	movs	r0, r3
 80030b4:	f000 fb8a 	bl	80037cc <I2C_ITAddrCplt>
 80030b8:	e039      	b.n	800312e <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	085b      	lsrs	r3, r3, #1
 80030be:	001a      	movs	r2, r3
 80030c0:	2301      	movs	r3, #1
 80030c2:	4013      	ands	r3, r2
 80030c4:	d033      	beq.n	800312e <I2C_Slave_ISR_IT+0x212>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	085b      	lsrs	r3, r3, #1
 80030ca:	001a      	movs	r2, r3
 80030cc:	2301      	movs	r3, #1
 80030ce:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80030d0:	d02d      	beq.n	800312e <I2C_Slave_ISR_IT+0x212>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d018      	beq.n	800310e <I2C_Slave_ISR_IT+0x1f2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e0:	781a      	ldrb	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ec:	1c5a      	adds	r2, r3, #1
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800310c:	e00f      	b.n	800312e <I2C_Slave_ISR_IT+0x212>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	2380      	movs	r3, #128	@ 0x80
 8003112:	045b      	lsls	r3, r3, #17
 8003114:	429a      	cmp	r2, r3
 8003116:	d002      	beq.n	800311e <I2C_Slave_ISR_IT+0x202>
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d107      	bne.n	800312e <I2C_Slave_ISR_IT+0x212>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	0018      	movs	r0, r3
 8003122:	f000 fc39 	bl	8003998 <I2C_ITSlaveSeqCplt>
 8003126:	e002      	b.n	800312e <I2C_Slave_ISR_IT+0x212>
    if (hi2c->XferCount == 0U)
 8003128:	46c0      	nop			@ (mov r8, r8)
 800312a:	e000      	b.n	800312e <I2C_Slave_ISR_IT+0x212>
    if ((hi2c->XferCount == 0U) && \
 800312c:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2240      	movs	r2, #64	@ 0x40
 8003132:	2100      	movs	r1, #0
 8003134:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	0018      	movs	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	b006      	add	sp, #24
 800313e:	bd80      	pop	{r7, pc}
 8003140:	ffff0000 	.word	0xffff0000

08003144 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003144:	b590      	push	{r4, r7, lr}
 8003146:	b089      	sub	sp, #36	@ 0x24
 8003148:	af02      	add	r7, sp, #8
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2240      	movs	r2, #64	@ 0x40
 8003154:	5c9b      	ldrb	r3, [r3, r2]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d101      	bne.n	800315e <I2C_Master_ISR_DMA+0x1a>
 800315a:	2302      	movs	r3, #2
 800315c:	e0f7      	b.n	800334e <I2C_Master_ISR_DMA+0x20a>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2240      	movs	r2, #64	@ 0x40
 8003162:	2101      	movs	r1, #1
 8003164:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	091b      	lsrs	r3, r3, #4
 800316a:	001a      	movs	r2, r3
 800316c:	2301      	movs	r3, #1
 800316e:	4013      	ands	r3, r2
 8003170:	d019      	beq.n	80031a6 <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	091b      	lsrs	r3, r3, #4
 8003176:	001a      	movs	r2, r3
 8003178:	2301      	movs	r3, #1
 800317a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800317c:	d013      	beq.n	80031a6 <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2210      	movs	r2, #16
 8003184:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318a:	2204      	movs	r2, #4
 800318c:	431a      	orrs	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2120      	movs	r1, #32
 8003196:	0018      	movs	r0, r3
 8003198:	f001 f904 	bl	80043a4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	0018      	movs	r0, r3
 80031a0:	f001 f847 	bl	8004232 <I2C_Flush_TXDR>
 80031a4:	e0ce      	b.n	8003344 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	09db      	lsrs	r3, r3, #7
 80031aa:	001a      	movs	r2, r3
 80031ac:	2301      	movs	r3, #1
 80031ae:	4013      	ands	r3, r2
 80031b0:	d100      	bne.n	80031b4 <I2C_Master_ISR_DMA+0x70>
 80031b2:	e07e      	b.n	80032b2 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	099b      	lsrs	r3, r3, #6
 80031b8:	001a      	movs	r2, r3
 80031ba:	2301      	movs	r3, #1
 80031bc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80031be:	d100      	bne.n	80031c2 <I2C_Master_ISR_DMA+0x7e>
 80031c0:	e077      	b.n	80032b2 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2140      	movs	r1, #64	@ 0x40
 80031ce:	438a      	bics	r2, r1
 80031d0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d055      	beq.n	8003288 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	2312      	movs	r3, #18
 80031e6:	18fb      	adds	r3, r7, r3
 80031e8:	0592      	lsls	r2, r2, #22
 80031ea:	0d92      	lsrs	r2, r2, #22
 80031ec:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	2bff      	cmp	r3, #255	@ 0xff
 80031f6:	d906      	bls.n	8003206 <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	22ff      	movs	r2, #255	@ 0xff
 80031fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80031fe:	2380      	movs	r3, #128	@ 0x80
 8003200:	045b      	lsls	r3, r3, #17
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	e010      	b.n	8003228 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003214:	4a50      	ldr	r2, [pc, #320]	@ (8003358 <I2C_Master_ISR_DMA+0x214>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d003      	beq.n	8003222 <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	e002      	b.n	8003228 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003222:	2380      	movs	r3, #128	@ 0x80
 8003224:	049b      	lsls	r3, r3, #18
 8003226:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322c:	b2da      	uxtb	r2, r3
 800322e:	697c      	ldr	r4, [r7, #20]
 8003230:	2312      	movs	r3, #18
 8003232:	18fb      	adds	r3, r7, r3
 8003234:	8819      	ldrh	r1, [r3, #0]
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	2300      	movs	r3, #0
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	0023      	movs	r3, r4
 800323e:	f001 f877 	bl	8004330 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2241      	movs	r2, #65	@ 0x41
 8003258:	5c9b      	ldrb	r3, [r3, r2]
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b22      	cmp	r3, #34	@ 0x22
 800325e:	d109      	bne.n	8003274 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2180      	movs	r1, #128	@ 0x80
 800326c:	0209      	lsls	r1, r1, #8
 800326e:	430a      	orrs	r2, r1
 8003270:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003272:	e067      	b.n	8003344 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2180      	movs	r1, #128	@ 0x80
 8003280:	01c9      	lsls	r1, r1, #7
 8003282:	430a      	orrs	r2, r1
 8003284:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003286:	e05d      	b.n	8003344 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	2380      	movs	r3, #128	@ 0x80
 8003290:	049b      	lsls	r3, r3, #18
 8003292:	401a      	ands	r2, r3
 8003294:	2380      	movs	r3, #128	@ 0x80
 8003296:	049b      	lsls	r3, r3, #18
 8003298:	429a      	cmp	r2, r3
 800329a:	d004      	beq.n	80032a6 <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	0018      	movs	r0, r3
 80032a0:	f000 fb38 	bl	8003914 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80032a4:	e04e      	b.n	8003344 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2140      	movs	r1, #64	@ 0x40
 80032aa:	0018      	movs	r0, r3
 80032ac:	f000 fe96 	bl	8003fdc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80032b0:	e048      	b.n	8003344 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	099b      	lsrs	r3, r3, #6
 80032b6:	001a      	movs	r2, r3
 80032b8:	2301      	movs	r3, #1
 80032ba:	4013      	ands	r3, r2
 80032bc:	d02e      	beq.n	800331c <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	099b      	lsrs	r3, r3, #6
 80032c2:	001a      	movs	r2, r3
 80032c4:	2301      	movs	r3, #1
 80032c6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80032c8:	d028      	beq.n	800331c <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d11d      	bne.n	8003310 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	2380      	movs	r3, #128	@ 0x80
 80032dc:	049b      	lsls	r3, r3, #18
 80032de:	401a      	ands	r2, r3
 80032e0:	2380      	movs	r3, #128	@ 0x80
 80032e2:	049b      	lsls	r3, r3, #18
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d02c      	beq.n	8003342 <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003358 <I2C_Master_ISR_DMA+0x214>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d109      	bne.n	8003306 <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2180      	movs	r1, #128	@ 0x80
 80032fe:	01c9      	lsls	r1, r1, #7
 8003300:	430a      	orrs	r2, r1
 8003302:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003304:	e01d      	b.n	8003342 <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	0018      	movs	r0, r3
 800330a:	f000 fb03 	bl	8003914 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800330e:	e018      	b.n	8003342 <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2140      	movs	r1, #64	@ 0x40
 8003314:	0018      	movs	r0, r3
 8003316:	f000 fe61 	bl	8003fdc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800331a:	e012      	b.n	8003342 <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	001a      	movs	r2, r3
 8003322:	2301      	movs	r3, #1
 8003324:	4013      	ands	r3, r2
 8003326:	d00d      	beq.n	8003344 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	095b      	lsrs	r3, r3, #5
 800332c:	001a      	movs	r2, r3
 800332e:	2301      	movs	r3, #1
 8003330:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003332:	d007      	beq.n	8003344 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	0011      	movs	r1, r2
 800333a:	0018      	movs	r0, r3
 800333c:	f000 fb92 	bl	8003a64 <I2C_ITMasterCplt>
 8003340:	e000      	b.n	8003344 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 8003342:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2240      	movs	r2, #64	@ 0x40
 8003348:	2100      	movs	r1, #0
 800334a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	0018      	movs	r0, r3
 8003350:	46bd      	mov	sp, r7
 8003352:	b007      	add	sp, #28
 8003354:	bd90      	pop	{r4, r7, pc}
 8003356:	46c0      	nop			@ (mov r8, r8)
 8003358:	ffff0000 	.word	0xffff0000

0800335c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800335c:	b590      	push	{r4, r7, lr}
 800335e:	b089      	sub	sp, #36	@ 0x24
 8003360:	af02      	add	r7, sp, #8
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003368:	4b9a      	ldr	r3, [pc, #616]	@ (80035d4 <I2C_Mem_ISR_DMA+0x278>)
 800336a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2240      	movs	r2, #64	@ 0x40
 8003370:	5c9b      	ldrb	r3, [r3, r2]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <I2C_Mem_ISR_DMA+0x1e>
 8003376:	2302      	movs	r3, #2
 8003378:	e127      	b.n	80035ca <I2C_Mem_ISR_DMA+0x26e>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2240      	movs	r2, #64	@ 0x40
 800337e:	2101      	movs	r1, #1
 8003380:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	091b      	lsrs	r3, r3, #4
 8003386:	001a      	movs	r2, r3
 8003388:	2301      	movs	r3, #1
 800338a:	4013      	ands	r3, r2
 800338c:	d019      	beq.n	80033c2 <I2C_Mem_ISR_DMA+0x66>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	091b      	lsrs	r3, r3, #4
 8003392:	001a      	movs	r2, r3
 8003394:	2301      	movs	r3, #1
 8003396:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003398:	d013      	beq.n	80033c2 <I2C_Mem_ISR_DMA+0x66>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2210      	movs	r2, #16
 80033a0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a6:	2204      	movs	r2, #4
 80033a8:	431a      	orrs	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2120      	movs	r1, #32
 80033b2:	0018      	movs	r0, r3
 80033b4:	f000 fff6 	bl	80043a4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	0018      	movs	r0, r3
 80033bc:	f000 ff39 	bl	8004232 <I2C_Flush_TXDR>
 80033c0:	e0fe      	b.n	80035c0 <I2C_Mem_ISR_DMA+0x264>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	085b      	lsrs	r3, r3, #1
 80033c6:	001a      	movs	r2, r3
 80033c8:	2301      	movs	r3, #1
 80033ca:	4013      	ands	r3, r2
 80033cc:	d00f      	beq.n	80033ee <I2C_Mem_ISR_DMA+0x92>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	085b      	lsrs	r3, r3, #1
 80033d2:	001a      	movs	r2, r3
 80033d4:	2301      	movs	r3, #1
 80033d6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80033d8:	d009      	beq.n	80033ee <I2C_Mem_ISR_DMA+0x92>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80033e2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2201      	movs	r2, #1
 80033e8:	4252      	negs	r2, r2
 80033ea:	651a      	str	r2, [r3, #80]	@ 0x50
 80033ec:	e0e8      	b.n	80035c0 <I2C_Mem_ISR_DMA+0x264>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	09db      	lsrs	r3, r3, #7
 80033f2:	001a      	movs	r2, r3
 80033f4:	2301      	movs	r3, #1
 80033f6:	4013      	ands	r3, r2
 80033f8:	d065      	beq.n	80034c6 <I2C_Mem_ISR_DMA+0x16a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	099b      	lsrs	r3, r3, #6
 80033fe:	001a      	movs	r2, r3
 8003400:	2301      	movs	r3, #1
 8003402:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003404:	d05f      	beq.n	80034c6 <I2C_Mem_ISR_DMA+0x16a>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2101      	movs	r1, #1
 800340a:	0018      	movs	r0, r3
 800340c:	f001 f854 	bl	80044b8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2110      	movs	r1, #16
 8003414:	0018      	movs	r0, r3
 8003416:	f000 ffc5 	bl	80043a4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	d04a      	beq.n	80034ba <I2C_Mem_ISR_DMA+0x15e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003428:	b29b      	uxth	r3, r3
 800342a:	2bff      	cmp	r3, #255	@ 0xff
 800342c:	d910      	bls.n	8003450 <I2C_Mem_ISR_DMA+0xf4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	22ff      	movs	r2, #255	@ 0xff
 8003432:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003438:	b299      	uxth	r1, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800343e:	b2da      	uxtb	r2, r3
 8003440:	2380      	movs	r3, #128	@ 0x80
 8003442:	045b      	lsls	r3, r3, #17
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	2400      	movs	r4, #0
 8003448:	9400      	str	r4, [sp, #0]
 800344a:	f000 ff71 	bl	8004330 <I2C_TransferConfig>
 800344e:	e011      	b.n	8003474 <I2C_Mem_ISR_DMA+0x118>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800345e:	b299      	uxth	r1, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003464:	b2da      	uxtb	r2, r3
 8003466:	2380      	movs	r3, #128	@ 0x80
 8003468:	049b      	lsls	r3, r3, #18
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	2400      	movs	r4, #0
 800346e:	9400      	str	r4, [sp, #0]
 8003470:	f000 ff5e 	bl	8004330 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2241      	movs	r2, #65	@ 0x41
 800348a:	5c9b      	ldrb	r3, [r3, r2]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b22      	cmp	r3, #34	@ 0x22
 8003490:	d109      	bne.n	80034a6 <I2C_Mem_ISR_DMA+0x14a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2180      	movs	r1, #128	@ 0x80
 800349e:	0209      	lsls	r1, r1, #8
 80034a0:	430a      	orrs	r2, r1
 80034a2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80034a4:	e08c      	b.n	80035c0 <I2C_Mem_ISR_DMA+0x264>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2180      	movs	r1, #128	@ 0x80
 80034b2:	01c9      	lsls	r1, r1, #7
 80034b4:	430a      	orrs	r2, r1
 80034b6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80034b8:	e082      	b.n	80035c0 <I2C_Mem_ISR_DMA+0x264>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2140      	movs	r1, #64	@ 0x40
 80034be:	0018      	movs	r0, r3
 80034c0:	f000 fd8c 	bl	8003fdc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80034c4:	e07c      	b.n	80035c0 <I2C_Mem_ISR_DMA+0x264>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	099b      	lsrs	r3, r3, #6
 80034ca:	001a      	movs	r2, r3
 80034cc:	2301      	movs	r3, #1
 80034ce:	4013      	ands	r3, r2
 80034d0:	d064      	beq.n	800359c <I2C_Mem_ISR_DMA+0x240>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	099b      	lsrs	r3, r3, #6
 80034d6:	001a      	movs	r2, r3
 80034d8:	2301      	movs	r3, #1
 80034da:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80034dc:	d05e      	beq.n	800359c <I2C_Mem_ISR_DMA+0x240>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2101      	movs	r1, #1
 80034e2:	0018      	movs	r0, r3
 80034e4:	f000 ffe8 	bl	80044b8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2110      	movs	r1, #16
 80034ec:	0018      	movs	r0, r3
 80034ee:	f000 ff59 	bl	80043a4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2241      	movs	r2, #65	@ 0x41
 80034f6:	5c9b      	ldrb	r3, [r3, r2]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b22      	cmp	r3, #34	@ 0x22
 80034fc:	d101      	bne.n	8003502 <I2C_Mem_ISR_DMA+0x1a6>
    {
      direction = I2C_GENERATE_START_READ;
 80034fe:	4b36      	ldr	r3, [pc, #216]	@ (80035d8 <I2C_Mem_ISR_DMA+0x27c>)
 8003500:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003506:	b29b      	uxth	r3, r3
 8003508:	2bff      	cmp	r3, #255	@ 0xff
 800350a:	d911      	bls.n	8003530 <I2C_Mem_ISR_DMA+0x1d4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	22ff      	movs	r2, #255	@ 0xff
 8003510:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003516:	b299      	uxth	r1, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800351c:	b2da      	uxtb	r2, r3
 800351e:	2380      	movs	r3, #128	@ 0x80
 8003520:	045c      	lsls	r4, r3, #17
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	0023      	movs	r3, r4
 800352a:	f000 ff01 	bl	8004330 <I2C_TransferConfig>
 800352e:	e012      	b.n	8003556 <I2C_Mem_ISR_DMA+0x1fa>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003534:	b29a      	uxth	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800353e:	b299      	uxth	r1, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003544:	b2da      	uxtb	r2, r3
 8003546:	2380      	movs	r3, #128	@ 0x80
 8003548:	049c      	lsls	r4, r3, #18
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	0023      	movs	r3, r4
 8003552:	f000 feed 	bl	8004330 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	b29a      	uxth	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2241      	movs	r2, #65	@ 0x41
 800356c:	5c9b      	ldrb	r3, [r3, r2]
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b22      	cmp	r3, #34	@ 0x22
 8003572:	d109      	bne.n	8003588 <I2C_Mem_ISR_DMA+0x22c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2180      	movs	r1, #128	@ 0x80
 8003580:	0209      	lsls	r1, r1, #8
 8003582:	430a      	orrs	r2, r1
 8003584:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003586:	e01b      	b.n	80035c0 <I2C_Mem_ISR_DMA+0x264>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2180      	movs	r1, #128	@ 0x80
 8003594:	01c9      	lsls	r1, r1, #7
 8003596:	430a      	orrs	r2, r1
 8003598:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800359a:	e011      	b.n	80035c0 <I2C_Mem_ISR_DMA+0x264>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	001a      	movs	r2, r3
 80035a2:	2301      	movs	r3, #1
 80035a4:	4013      	ands	r3, r2
 80035a6:	d00b      	beq.n	80035c0 <I2C_Mem_ISR_DMA+0x264>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	095b      	lsrs	r3, r3, #5
 80035ac:	001a      	movs	r2, r3
 80035ae:	2301      	movs	r3, #1
 80035b0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80035b2:	d005      	beq.n	80035c0 <I2C_Mem_ISR_DMA+0x264>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	0011      	movs	r1, r2
 80035ba:	0018      	movs	r0, r3
 80035bc:	f000 fa52 	bl	8003a64 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2240      	movs	r2, #64	@ 0x40
 80035c4:	2100      	movs	r1, #0
 80035c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	0018      	movs	r0, r3
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b007      	add	sp, #28
 80035d0:	bd90      	pop	{r4, r7, pc}
 80035d2:	46c0      	nop			@ (mov r8, r8)
 80035d4:	80002000 	.word	0x80002000
 80035d8:	80002400 	.word	0x80002400

080035dc <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ec:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2240      	movs	r2, #64	@ 0x40
 80035f6:	5c9b      	ldrb	r3, [r3, r2]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <I2C_Slave_ISR_DMA+0x24>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e0de      	b.n	80037be <I2C_Slave_ISR_DMA+0x1e2>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2240      	movs	r2, #64	@ 0x40
 8003604:	2101      	movs	r1, #1
 8003606:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	095b      	lsrs	r3, r3, #5
 800360c:	001a      	movs	r2, r3
 800360e:	2301      	movs	r3, #1
 8003610:	4013      	ands	r3, r2
 8003612:	d00c      	beq.n	800362e <I2C_Slave_ISR_DMA+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	095b      	lsrs	r3, r3, #5
 8003618:	001a      	movs	r2, r3
 800361a:	2301      	movs	r3, #1
 800361c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800361e:	d006      	beq.n	800362e <I2C_Slave_ISR_DMA+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	0011      	movs	r1, r2
 8003626:	0018      	movs	r0, r3
 8003628:	f000 faee 	bl	8003c08 <I2C_ITSlaveCplt>
 800362c:	e0c2      	b.n	80037b4 <I2C_Slave_ISR_DMA+0x1d8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	091b      	lsrs	r3, r3, #4
 8003632:	001a      	movs	r2, r3
 8003634:	2301      	movs	r3, #1
 8003636:	4013      	ands	r3, r2
 8003638:	d100      	bne.n	800363c <I2C_Slave_ISR_DMA+0x60>
 800363a:	e0a9      	b.n	8003790 <I2C_Slave_ISR_DMA+0x1b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	091b      	lsrs	r3, r3, #4
 8003640:	001a      	movs	r2, r3
 8003642:	2301      	movs	r3, #1
 8003644:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003646:	d100      	bne.n	800364a <I2C_Slave_ISR_DMA+0x6e>
 8003648:	e0a2      	b.n	8003790 <I2C_Slave_ISR_DMA+0x1b4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	0b9b      	lsrs	r3, r3, #14
 800364e:	001a      	movs	r2, r3
 8003650:	2301      	movs	r3, #1
 8003652:	4013      	ands	r3, r2
 8003654:	d106      	bne.n	8003664 <I2C_Slave_ISR_DMA+0x88>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	0bdb      	lsrs	r3, r3, #15
 800365a:	001a      	movs	r2, r3
 800365c:	2301      	movs	r3, #1
 800365e:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003660:	d100      	bne.n	8003664 <I2C_Slave_ISR_DMA+0x88>
 8003662:	e08e      	b.n	8003782 <I2C_Slave_ISR_DMA+0x1a6>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00d      	beq.n	8003688 <I2C_Slave_ISR_DMA+0xac>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	0bdb      	lsrs	r3, r3, #15
 8003670:	001a      	movs	r2, r3
 8003672:	2301      	movs	r3, #1
 8003674:	4013      	ands	r3, r2
 8003676:	d007      	beq.n	8003688 <I2C_Slave_ISR_DMA+0xac>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <I2C_Slave_ISR_DMA+0xac>
          {
            treatdmanack = 1U;
 8003684:	2301      	movs	r3, #1
 8003686:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00d      	beq.n	80036ac <I2C_Slave_ISR_DMA+0xd0>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	0b9b      	lsrs	r3, r3, #14
 8003694:	001a      	movs	r2, r3
 8003696:	2301      	movs	r3, #1
 8003698:	4013      	ands	r3, r2
 800369a:	d007      	beq.n	80036ac <I2C_Slave_ISR_DMA+0xd0>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <I2C_Slave_ISR_DMA+0xd0>
          {
            treatdmanack = 1U;
 80036a8:	2301      	movs	r3, #1
 80036aa:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d12d      	bne.n	800370e <I2C_Slave_ISR_DMA+0x132>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2241      	movs	r2, #65	@ 0x41
 80036b6:	5c9b      	ldrb	r3, [r3, r2]
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b28      	cmp	r3, #40	@ 0x28
 80036bc:	d10b      	bne.n	80036d6 <I2C_Slave_ISR_DMA+0xfa>
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	2380      	movs	r3, #128	@ 0x80
 80036c2:	049b      	lsls	r3, r3, #18
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d106      	bne.n	80036d6 <I2C_Slave_ISR_DMA+0xfa>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	0011      	movs	r1, r2
 80036ce:	0018      	movs	r0, r3
 80036d0:	f000 fc2a 	bl	8003f28 <I2C_ITListenCplt>
 80036d4:	e054      	b.n	8003780 <I2C_Slave_ISR_DMA+0x1a4>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2241      	movs	r2, #65	@ 0x41
 80036da:	5c9b      	ldrb	r3, [r3, r2]
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b29      	cmp	r3, #41	@ 0x29
 80036e0:	d110      	bne.n	8003704 <I2C_Slave_ISR_DMA+0x128>
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	4a38      	ldr	r2, [pc, #224]	@ (80037c8 <I2C_Slave_ISR_DMA+0x1ec>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00c      	beq.n	8003704 <I2C_Slave_ISR_DMA+0x128>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2210      	movs	r2, #16
 80036f0:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	0018      	movs	r0, r3
 80036f6:	f000 fd9c 	bl	8004232 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	0018      	movs	r0, r3
 80036fe:	f000 f94b 	bl	8003998 <I2C_ITSlaveSeqCplt>
 8003702:	e03d      	b.n	8003780 <I2C_Slave_ISR_DMA+0x1a4>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2210      	movs	r2, #16
 800370a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800370c:	e03e      	b.n	800378c <I2C_Slave_ISR_DMA+0x1b0>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2210      	movs	r2, #16
 8003714:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371a:	2204      	movs	r2, #4
 800371c:	431a      	orrs	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003722:	2317      	movs	r3, #23
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	2141      	movs	r1, #65	@ 0x41
 800372a:	5c52      	ldrb	r2, [r2, r1]
 800372c:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d004      	beq.n	800373e <I2C_Slave_ISR_DMA+0x162>
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	2380      	movs	r3, #128	@ 0x80
 8003738:	045b      	lsls	r3, r3, #17
 800373a:	429a      	cmp	r2, r3
 800373c:	d126      	bne.n	800378c <I2C_Slave_ISR_DMA+0x1b0>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800373e:	2217      	movs	r2, #23
 8003740:	18bb      	adds	r3, r7, r2
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b21      	cmp	r3, #33	@ 0x21
 8003746:	d003      	beq.n	8003750 <I2C_Slave_ISR_DMA+0x174>
 8003748:	18bb      	adds	r3, r7, r2
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b29      	cmp	r3, #41	@ 0x29
 800374e:	d103      	bne.n	8003758 <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2221      	movs	r2, #33	@ 0x21
 8003754:	631a      	str	r2, [r3, #48]	@ 0x30
 8003756:	e00b      	b.n	8003770 <I2C_Slave_ISR_DMA+0x194>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003758:	2217      	movs	r2, #23
 800375a:	18bb      	adds	r3, r7, r2
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	2b22      	cmp	r3, #34	@ 0x22
 8003760:	d003      	beq.n	800376a <I2C_Slave_ISR_DMA+0x18e>
 8003762:	18bb      	adds	r3, r7, r2
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	2b2a      	cmp	r3, #42	@ 0x2a
 8003768:	d102      	bne.n	8003770 <I2C_Slave_ISR_DMA+0x194>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2222      	movs	r2, #34	@ 0x22
 800376e:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	0011      	movs	r1, r2
 8003778:	0018      	movs	r0, r3
 800377a:	f000 fc2f 	bl	8003fdc <I2C_ITError>
      if (treatdmanack == 1U)
 800377e:	e005      	b.n	800378c <I2C_Slave_ISR_DMA+0x1b0>
 8003780:	e004      	b.n	800378c <I2C_Slave_ISR_DMA+0x1b0>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2210      	movs	r2, #16
 8003788:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800378a:	e013      	b.n	80037b4 <I2C_Slave_ISR_DMA+0x1d8>
      if (treatdmanack == 1U)
 800378c:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800378e:	e011      	b.n	80037b4 <I2C_Slave_ISR_DMA+0x1d8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	08db      	lsrs	r3, r3, #3
 8003794:	001a      	movs	r2, r3
 8003796:	2301      	movs	r3, #1
 8003798:	4013      	ands	r3, r2
 800379a:	d00b      	beq.n	80037b4 <I2C_Slave_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	08db      	lsrs	r3, r3, #3
 80037a0:	001a      	movs	r2, r3
 80037a2:	2301      	movs	r3, #1
 80037a4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80037a6:	d005      	beq.n	80037b4 <I2C_Slave_ISR_DMA+0x1d8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	0011      	movs	r1, r2
 80037ae:	0018      	movs	r0, r3
 80037b0:	f000 f80c 	bl	80037cc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2240      	movs	r2, #64	@ 0x40
 80037b8:	2100      	movs	r1, #0
 80037ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	0018      	movs	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b008      	add	sp, #32
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	ffff0000 	.word	0xffff0000

080037cc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80037cc:	b5b0      	push	{r4, r5, r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2241      	movs	r2, #65	@ 0x41
 80037da:	5c9b      	ldrb	r3, [r3, r2]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	001a      	movs	r2, r3
 80037e0:	2328      	movs	r3, #40	@ 0x28
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b28      	cmp	r3, #40	@ 0x28
 80037e6:	d000      	beq.n	80037ea <I2C_ITAddrCplt+0x1e>
 80037e8:	e088      	b.n	80038fc <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	0c1b      	lsrs	r3, r3, #16
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	250f      	movs	r5, #15
 80037f6:	197b      	adds	r3, r7, r5
 80037f8:	2101      	movs	r1, #1
 80037fa:	400a      	ands	r2, r1
 80037fc:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	0c1b      	lsrs	r3, r3, #16
 8003806:	b29a      	uxth	r2, r3
 8003808:	200c      	movs	r0, #12
 800380a:	183b      	adds	r3, r7, r0
 800380c:	21fe      	movs	r1, #254	@ 0xfe
 800380e:	400a      	ands	r2, r1
 8003810:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	b29a      	uxth	r2, r3
 800381a:	240a      	movs	r4, #10
 800381c:	193b      	adds	r3, r7, r4
 800381e:	0592      	lsls	r2, r2, #22
 8003820:	0d92      	lsrs	r2, r2, #22
 8003822:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	b29a      	uxth	r2, r3
 800382c:	2308      	movs	r3, #8
 800382e:	18fb      	adds	r3, r7, r3
 8003830:	21fe      	movs	r1, #254	@ 0xfe
 8003832:	400a      	ands	r2, r1
 8003834:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d148      	bne.n	80038d0 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800383e:	0021      	movs	r1, r4
 8003840:	187b      	adds	r3, r7, r1
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	09db      	lsrs	r3, r3, #7
 8003846:	b29a      	uxth	r2, r3
 8003848:	183b      	adds	r3, r7, r0
 800384a:	881b      	ldrh	r3, [r3, #0]
 800384c:	4053      	eors	r3, r2
 800384e:	b29b      	uxth	r3, r3
 8003850:	001a      	movs	r2, r3
 8003852:	2306      	movs	r3, #6
 8003854:	4013      	ands	r3, r2
 8003856:	d120      	bne.n	800389a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8003858:	183b      	adds	r3, r7, r0
 800385a:	187a      	adds	r2, r7, r1
 800385c:	8812      	ldrh	r2, [r2, #0]
 800385e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003864:	1c5a      	adds	r2, r3, #1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800386e:	2b02      	cmp	r3, #2
 8003870:	d14c      	bne.n	800390c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2208      	movs	r2, #8
 800387e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2240      	movs	r2, #64	@ 0x40
 8003884:	2100      	movs	r1, #0
 8003886:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003888:	183b      	adds	r3, r7, r0
 800388a:	881a      	ldrh	r2, [r3, #0]
 800388c:	197b      	adds	r3, r7, r5
 800388e:	7819      	ldrb	r1, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	0018      	movs	r0, r3
 8003894:	f7ff fb08 	bl	8002ea8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003898:	e038      	b.n	800390c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800389a:	240c      	movs	r4, #12
 800389c:	193b      	adds	r3, r7, r4
 800389e:	2208      	movs	r2, #8
 80038a0:	18ba      	adds	r2, r7, r2
 80038a2:	8812      	ldrh	r2, [r2, #0]
 80038a4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80038a6:	2380      	movs	r3, #128	@ 0x80
 80038a8:	021a      	lsls	r2, r3, #8
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	0011      	movs	r1, r2
 80038ae:	0018      	movs	r0, r3
 80038b0:	f000 fe02 	bl	80044b8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2240      	movs	r2, #64	@ 0x40
 80038b8:	2100      	movs	r1, #0
 80038ba:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80038bc:	193b      	adds	r3, r7, r4
 80038be:	881a      	ldrh	r2, [r3, #0]
 80038c0:	230f      	movs	r3, #15
 80038c2:	18fb      	adds	r3, r7, r3
 80038c4:	7819      	ldrb	r1, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	0018      	movs	r0, r3
 80038ca:	f7ff faed 	bl	8002ea8 <HAL_I2C_AddrCallback>
}
 80038ce:	e01d      	b.n	800390c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80038d0:	2380      	movs	r3, #128	@ 0x80
 80038d2:	021a      	lsls	r2, r3, #8
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	0011      	movs	r1, r2
 80038d8:	0018      	movs	r0, r3
 80038da:	f000 fded 	bl	80044b8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2240      	movs	r2, #64	@ 0x40
 80038e2:	2100      	movs	r1, #0
 80038e4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80038e6:	230c      	movs	r3, #12
 80038e8:	18fb      	adds	r3, r7, r3
 80038ea:	881a      	ldrh	r2, [r3, #0]
 80038ec:	230f      	movs	r3, #15
 80038ee:	18fb      	adds	r3, r7, r3
 80038f0:	7819      	ldrb	r1, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	0018      	movs	r0, r3
 80038f6:	f7ff fad7 	bl	8002ea8 <HAL_I2C_AddrCallback>
}
 80038fa:	e007      	b.n	800390c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2208      	movs	r2, #8
 8003902:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2240      	movs	r2, #64	@ 0x40
 8003908:	2100      	movs	r1, #0
 800390a:	5499      	strb	r1, [r3, r2]
}
 800390c:	46c0      	nop			@ (mov r8, r8)
 800390e:	46bd      	mov	sp, r7
 8003910:	b004      	add	sp, #16
 8003912:	bdb0      	pop	{r4, r5, r7, pc}

08003914 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2242      	movs	r2, #66	@ 0x42
 8003920:	2100      	movs	r1, #0
 8003922:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2241      	movs	r2, #65	@ 0x41
 8003928:	5c9b      	ldrb	r3, [r3, r2]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b21      	cmp	r3, #33	@ 0x21
 800392e:	d117      	bne.n	8003960 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2241      	movs	r2, #65	@ 0x41
 8003934:	2120      	movs	r1, #32
 8003936:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2211      	movs	r2, #17
 800393c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2101      	movs	r1, #1
 8003948:	0018      	movs	r0, r3
 800394a:	f000 fdb5 	bl	80044b8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2240      	movs	r2, #64	@ 0x40
 8003952:	2100      	movs	r1, #0
 8003954:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	0018      	movs	r0, r3
 800395a:	f7ff fa8d 	bl	8002e78 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800395e:	e016      	b.n	800398e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2241      	movs	r2, #65	@ 0x41
 8003964:	2120      	movs	r1, #32
 8003966:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2212      	movs	r2, #18
 800396c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2102      	movs	r1, #2
 8003978:	0018      	movs	r0, r3
 800397a:	f000 fd9d 	bl	80044b8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2240      	movs	r2, #64	@ 0x40
 8003982:	2100      	movs	r1, #0
 8003984:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	0018      	movs	r0, r3
 800398a:	f7ff fa7d 	bl	8002e88 <HAL_I2C_MasterRxCpltCallback>
}
 800398e:	46c0      	nop			@ (mov r8, r8)
 8003990:	46bd      	mov	sp, r7
 8003992:	b002      	add	sp, #8
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2242      	movs	r2, #66	@ 0x42
 80039ac:	2100      	movs	r1, #0
 80039ae:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	0b9b      	lsrs	r3, r3, #14
 80039b4:	001a      	movs	r2, r3
 80039b6:	2301      	movs	r3, #1
 80039b8:	4013      	ands	r3, r2
 80039ba:	d008      	beq.n	80039ce <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4925      	ldr	r1, [pc, #148]	@ (8003a5c <I2C_ITSlaveSeqCplt+0xc4>)
 80039c8:	400a      	ands	r2, r1
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	e00d      	b.n	80039ea <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	0bdb      	lsrs	r3, r3, #15
 80039d2:	001a      	movs	r2, r3
 80039d4:	2301      	movs	r3, #1
 80039d6:	4013      	ands	r3, r2
 80039d8:	d007      	beq.n	80039ea <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	491e      	ldr	r1, [pc, #120]	@ (8003a60 <I2C_ITSlaveSeqCplt+0xc8>)
 80039e6:	400a      	ands	r2, r1
 80039e8:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2241      	movs	r2, #65	@ 0x41
 80039ee:	5c9b      	ldrb	r3, [r3, r2]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b29      	cmp	r3, #41	@ 0x29
 80039f4:	d114      	bne.n	8003a20 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2241      	movs	r2, #65	@ 0x41
 80039fa:	2128      	movs	r1, #40	@ 0x28
 80039fc:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2221      	movs	r2, #33	@ 0x21
 8003a02:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2101      	movs	r1, #1
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f000 fd55 	bl	80044b8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2240      	movs	r2, #64	@ 0x40
 8003a12:	2100      	movs	r1, #0
 8003a14:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f7fc fdd1 	bl	80005c0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003a1e:	e019      	b.n	8003a54 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2241      	movs	r2, #65	@ 0x41
 8003a24:	5c9b      	ldrb	r3, [r3, r2]
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a2a:	d113      	bne.n	8003a54 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2241      	movs	r2, #65	@ 0x41
 8003a30:	2128      	movs	r1, #40	@ 0x28
 8003a32:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2222      	movs	r2, #34	@ 0x22
 8003a38:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2102      	movs	r1, #2
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f000 fd3a 	bl	80044b8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2240      	movs	r2, #64	@ 0x40
 8003a48:	2100      	movs	r1, #0
 8003a4a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f7ff fa22 	bl	8002e98 <HAL_I2C_SlaveRxCpltCallback>
}
 8003a54:	46c0      	nop			@ (mov r8, r8)
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b004      	add	sp, #16
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	ffffbfff 	.word	0xffffbfff
 8003a60:	ffff7fff 	.word	0xffff7fff

08003a64 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2220      	movs	r2, #32
 8003a78:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2241      	movs	r2, #65	@ 0x41
 8003a7e:	5c9b      	ldrb	r3, [r3, r2]
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b21      	cmp	r3, #33	@ 0x21
 8003a84:	d108      	bne.n	8003a98 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2101      	movs	r1, #1
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	f000 fd14 	bl	80044b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2211      	movs	r2, #17
 8003a94:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a96:	e00d      	b.n	8003ab4 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2241      	movs	r2, #65	@ 0x41
 8003a9c:	5c9b      	ldrb	r3, [r3, r2]
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b22      	cmp	r3, #34	@ 0x22
 8003aa2:	d107      	bne.n	8003ab4 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2102      	movs	r1, #2
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f000 fd05 	bl	80044b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2212      	movs	r2, #18
 8003ab2:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4950      	ldr	r1, [pc, #320]	@ (8003c00 <I2C_ITMasterCplt+0x19c>)
 8003ac0:	400a      	ands	r2, r1
 8003ac2:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a4d      	ldr	r2, [pc, #308]	@ (8003c04 <I2C_ITMasterCplt+0x1a0>)
 8003ace:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	091b      	lsrs	r3, r3, #4
 8003ad4:	001a      	movs	r2, r3
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	4013      	ands	r3, r2
 8003ada:	d009      	beq.n	8003af0 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2210      	movs	r2, #16
 8003ae2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae8:	2204      	movs	r2, #4
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2241      	movs	r2, #65	@ 0x41
 8003af4:	5c9b      	ldrb	r3, [r3, r2]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b60      	cmp	r3, #96	@ 0x60
 8003afa:	d10b      	bne.n	8003b14 <I2C_ITMasterCplt+0xb0>
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	089b      	lsrs	r3, r3, #2
 8003b00:	001a      	movs	r2, r3
 8003b02:	2301      	movs	r3, #1
 8003b04:	4013      	ands	r3, r2
 8003b06:	d005      	beq.n	8003b14 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003b12:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	0018      	movs	r0, r3
 8003b18:	f000 fb8b 	bl	8004232 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b20:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2241      	movs	r2, #65	@ 0x41
 8003b26:	5c9b      	ldrb	r3, [r3, r2]
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b60      	cmp	r3, #96	@ 0x60
 8003b2c:	d002      	beq.n	8003b34 <I2C_ITMasterCplt+0xd0>
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d007      	beq.n	8003b44 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	0011      	movs	r1, r2
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f000 fa4d 	bl	8003fdc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003b42:	e058      	b.n	8003bf6 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2241      	movs	r2, #65	@ 0x41
 8003b48:	5c9b      	ldrb	r3, [r3, r2]
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b21      	cmp	r3, #33	@ 0x21
 8003b4e:	d126      	bne.n	8003b9e <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2241      	movs	r2, #65	@ 0x41
 8003b54:	2120      	movs	r1, #32
 8003b56:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2242      	movs	r2, #66	@ 0x42
 8003b62:	5c9b      	ldrb	r3, [r3, r2]
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b40      	cmp	r3, #64	@ 0x40
 8003b68:	d10c      	bne.n	8003b84 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2242      	movs	r2, #66	@ 0x42
 8003b6e:	2100      	movs	r1, #0
 8003b70:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2240      	movs	r2, #64	@ 0x40
 8003b76:	2100      	movs	r1, #0
 8003b78:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f7ff f9ab 	bl	8002ed8 <HAL_I2C_MemTxCpltCallback>
}
 8003b82:	e038      	b.n	8003bf6 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2242      	movs	r2, #66	@ 0x42
 8003b88:	2100      	movs	r1, #0
 8003b8a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2240      	movs	r2, #64	@ 0x40
 8003b90:	2100      	movs	r1, #0
 8003b92:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	0018      	movs	r0, r3
 8003b98:	f7ff f96e 	bl	8002e78 <HAL_I2C_MasterTxCpltCallback>
}
 8003b9c:	e02b      	b.n	8003bf6 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2241      	movs	r2, #65	@ 0x41
 8003ba2:	5c9b      	ldrb	r3, [r3, r2]
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b22      	cmp	r3, #34	@ 0x22
 8003ba8:	d125      	bne.n	8003bf6 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2241      	movs	r2, #65	@ 0x41
 8003bae:	2120      	movs	r1, #32
 8003bb0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2242      	movs	r2, #66	@ 0x42
 8003bbc:	5c9b      	ldrb	r3, [r3, r2]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b40      	cmp	r3, #64	@ 0x40
 8003bc2:	d10c      	bne.n	8003bde <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2242      	movs	r2, #66	@ 0x42
 8003bc8:	2100      	movs	r1, #0
 8003bca:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2240      	movs	r2, #64	@ 0x40
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f7ff f986 	bl	8002ee8 <HAL_I2C_MemRxCpltCallback>
}
 8003bdc:	e00b      	b.n	8003bf6 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2242      	movs	r2, #66	@ 0x42
 8003be2:	2100      	movs	r1, #0
 8003be4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2240      	movs	r2, #64	@ 0x40
 8003bea:	2100      	movs	r1, #0
 8003bec:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	f7ff f949 	bl	8002e88 <HAL_I2C_MasterRxCpltCallback>
}
 8003bf6:	46c0      	nop			@ (mov r8, r8)
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	b006      	add	sp, #24
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	46c0      	nop			@ (mov r8, r8)
 8003c00:	fe00e800 	.word	0xfe00e800
 8003c04:	ffff0000 	.word	0xffff0000

08003c08 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c22:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003c24:	200b      	movs	r0, #11
 8003c26:	183b      	adds	r3, r7, r0
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	2141      	movs	r1, #65	@ 0x41
 8003c2c:	5c52      	ldrb	r2, [r2, r1]
 8003c2e:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2220      	movs	r2, #32
 8003c36:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c38:	183b      	adds	r3, r7, r0
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2b21      	cmp	r3, #33	@ 0x21
 8003c3e:	d003      	beq.n	8003c48 <I2C_ITSlaveCplt+0x40>
 8003c40:	183b      	adds	r3, r7, r0
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b29      	cmp	r3, #41	@ 0x29
 8003c46:	d109      	bne.n	8003c5c <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003c48:	4ab0      	ldr	r2, [pc, #704]	@ (8003f0c <I2C_ITSlaveCplt+0x304>)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	0011      	movs	r1, r2
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f000 fc32 	bl	80044b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2221      	movs	r2, #33	@ 0x21
 8003c58:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c5a:	e020      	b.n	8003c9e <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c5c:	220b      	movs	r2, #11
 8003c5e:	18bb      	adds	r3, r7, r2
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	2b22      	cmp	r3, #34	@ 0x22
 8003c64:	d003      	beq.n	8003c6e <I2C_ITSlaveCplt+0x66>
 8003c66:	18bb      	adds	r3, r7, r2
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c6c:	d109      	bne.n	8003c82 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003c6e:	4aa8      	ldr	r2, [pc, #672]	@ (8003f10 <I2C_ITSlaveCplt+0x308>)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	0011      	movs	r1, r2
 8003c74:	0018      	movs	r0, r3
 8003c76:	f000 fc1f 	bl	80044b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2222      	movs	r2, #34	@ 0x22
 8003c7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c80:	e00d      	b.n	8003c9e <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003c82:	230b      	movs	r3, #11
 8003c84:	18fb      	adds	r3, r7, r3
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2b28      	cmp	r3, #40	@ 0x28
 8003c8a:	d108      	bne.n	8003c9e <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003c8c:	4aa1      	ldr	r2, [pc, #644]	@ (8003f14 <I2C_ITSlaveCplt+0x30c>)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	0011      	movs	r1, r2
 8003c92:	0018      	movs	r0, r3
 8003c94:	f000 fc10 	bl	80044b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2180      	movs	r1, #128	@ 0x80
 8003caa:	0209      	lsls	r1, r1, #8
 8003cac:	430a      	orrs	r2, r1
 8003cae:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4997      	ldr	r1, [pc, #604]	@ (8003f18 <I2C_ITSlaveCplt+0x310>)
 8003cbc:	400a      	ands	r2, r1
 8003cbe:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f000 fab5 	bl	8004232 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	0b9b      	lsrs	r3, r3, #14
 8003ccc:	001a      	movs	r2, r3
 8003cce:	2301      	movs	r3, #1
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	d013      	beq.n	8003cfc <I2C_ITSlaveCplt+0xf4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	498f      	ldr	r1, [pc, #572]	@ (8003f1c <I2C_ITSlaveCplt+0x314>)
 8003ce0:	400a      	ands	r2, r1
 8003ce2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d020      	beq.n	8003d2e <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003cfa:	e018      	b.n	8003d2e <I2C_ITSlaveCplt+0x126>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	0bdb      	lsrs	r3, r3, #15
 8003d00:	001a      	movs	r2, r3
 8003d02:	2301      	movs	r3, #1
 8003d04:	4013      	ands	r3, r2
 8003d06:	d012      	beq.n	8003d2e <I2C_ITSlaveCplt+0x126>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4983      	ldr	r1, [pc, #524]	@ (8003f20 <I2C_ITSlaveCplt+0x318>)
 8003d14:	400a      	ands	r2, r1
 8003d16:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d006      	beq.n	8003d2e <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	089b      	lsrs	r3, r3, #2
 8003d32:	001a      	movs	r2, r3
 8003d34:	2301      	movs	r3, #1
 8003d36:	4013      	ands	r3, r2
 8003d38:	d020      	beq.n	8003d7c <I2C_ITSlaveCplt+0x174>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2204      	movs	r2, #4
 8003d3e:	4393      	bics	r3, r2
 8003d40:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4c:	b2d2      	uxtb	r2, r2
 8003d4e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d54:	1c5a      	adds	r2, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00c      	beq.n	8003d7c <I2C_ITSlaveCplt+0x174>
    {
      hi2c->XferSize--;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d005      	beq.n	8003d92 <I2C_ITSlaveCplt+0x18a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	091b      	lsrs	r3, r3, #4
 8003d96:	001a      	movs	r2, r3
 8003d98:	2301      	movs	r3, #1
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	d051      	beq.n	8003e42 <I2C_ITSlaveCplt+0x23a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	091b      	lsrs	r3, r3, #4
 8003da2:	001a      	movs	r2, r3
 8003da4:	2301      	movs	r3, #1
 8003da6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003da8:	d04b      	beq.n	8003e42 <I2C_ITSlaveCplt+0x23a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d12d      	bne.n	8003e10 <I2C_ITSlaveCplt+0x208>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2241      	movs	r2, #65	@ 0x41
 8003db8:	5c9b      	ldrb	r3, [r3, r2]
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b28      	cmp	r3, #40	@ 0x28
 8003dbe:	d10b      	bne.n	8003dd8 <I2C_ITSlaveCplt+0x1d0>
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	2380      	movs	r3, #128	@ 0x80
 8003dc4:	049b      	lsls	r3, r3, #18
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d106      	bne.n	8003dd8 <I2C_ITSlaveCplt+0x1d0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	0011      	movs	r1, r2
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f000 f8a9 	bl	8003f28 <I2C_ITListenCplt>
 8003dd6:	e034      	b.n	8003e42 <I2C_ITSlaveCplt+0x23a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2241      	movs	r2, #65	@ 0x41
 8003ddc:	5c9b      	ldrb	r3, [r3, r2]
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b29      	cmp	r3, #41	@ 0x29
 8003de2:	d110      	bne.n	8003e06 <I2C_ITSlaveCplt+0x1fe>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4a4f      	ldr	r2, [pc, #316]	@ (8003f24 <I2C_ITSlaveCplt+0x31c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d00c      	beq.n	8003e06 <I2C_ITSlaveCplt+0x1fe>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2210      	movs	r2, #16
 8003df2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	0018      	movs	r0, r3
 8003df8:	f000 fa1b 	bl	8004232 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f7ff fdca 	bl	8003998 <I2C_ITSlaveSeqCplt>
 8003e04:	e01d      	b.n	8003e42 <I2C_ITSlaveCplt+0x23a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2210      	movs	r2, #16
 8003e0c:	61da      	str	r2, [r3, #28]
 8003e0e:	e018      	b.n	8003e42 <I2C_ITSlaveCplt+0x23a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2210      	movs	r2, #16
 8003e16:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1c:	2204      	movs	r2, #4
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d004      	beq.n	8003e34 <I2C_ITSlaveCplt+0x22c>
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	2380      	movs	r3, #128	@ 0x80
 8003e2e:	045b      	lsls	r3, r3, #17
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d106      	bne.n	8003e42 <I2C_ITSlaveCplt+0x23a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	0011      	movs	r1, r2
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f000 f8cd 	bl	8003fdc <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2242      	movs	r2, #66	@ 0x42
 8003e46:	2100      	movs	r1, #0
 8003e48:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d013      	beq.n	8003e80 <I2C_ITSlaveCplt+0x278>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	0011      	movs	r1, r2
 8003e60:	0018      	movs	r0, r3
 8003e62:	f000 f8bb 	bl	8003fdc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2241      	movs	r2, #65	@ 0x41
 8003e6a:	5c9b      	ldrb	r3, [r3, r2]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b28      	cmp	r3, #40	@ 0x28
 8003e70:	d147      	bne.n	8003f02 <I2C_ITSlaveCplt+0x2fa>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	0011      	movs	r1, r2
 8003e78:	0018      	movs	r0, r3
 8003e7a:	f000 f855 	bl	8003f28 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e7e:	e040      	b.n	8003f02 <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e84:	4a27      	ldr	r2, [pc, #156]	@ (8003f24 <I2C_ITSlaveCplt+0x31c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d016      	beq.n	8003eb8 <I2C_ITSlaveCplt+0x2b0>
    I2C_ITSlaveSeqCplt(hi2c);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f7ff fd83 	bl	8003998 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a23      	ldr	r2, [pc, #140]	@ (8003f24 <I2C_ITSlaveCplt+0x31c>)
 8003e96:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2241      	movs	r2, #65	@ 0x41
 8003e9c:	2120      	movs	r1, #32
 8003e9e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2240      	movs	r2, #64	@ 0x40
 8003eaa:	2100      	movs	r1, #0
 8003eac:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f7ff f809 	bl	8002ec8 <HAL_I2C_ListenCpltCallback>
}
 8003eb6:	e024      	b.n	8003f02 <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2241      	movs	r2, #65	@ 0x41
 8003ebc:	5c9b      	ldrb	r3, [r3, r2]
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b22      	cmp	r3, #34	@ 0x22
 8003ec2:	d10f      	bne.n	8003ee4 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2241      	movs	r2, #65	@ 0x41
 8003ec8:	2120      	movs	r1, #32
 8003eca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2240      	movs	r2, #64	@ 0x40
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	0018      	movs	r0, r3
 8003ede:	f7fe ffdb 	bl	8002e98 <HAL_I2C_SlaveRxCpltCallback>
}
 8003ee2:	e00e      	b.n	8003f02 <I2C_ITSlaveCplt+0x2fa>
    hi2c->State = HAL_I2C_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2241      	movs	r2, #65	@ 0x41
 8003ee8:	2120      	movs	r1, #32
 8003eea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2240      	movs	r2, #64	@ 0x40
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	0018      	movs	r0, r3
 8003efe:	f7fc fb5f 	bl	80005c0 <HAL_I2C_SlaveTxCpltCallback>
}
 8003f02:	46c0      	nop			@ (mov r8, r8)
 8003f04:	46bd      	mov	sp, r7
 8003f06:	b006      	add	sp, #24
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	46c0      	nop			@ (mov r8, r8)
 8003f0c:	00008001 	.word	0x00008001
 8003f10:	00008002 	.word	0x00008002
 8003f14:	00008003 	.word	0x00008003
 8003f18:	fe00e800 	.word	0xfe00e800
 8003f1c:	ffffbfff 	.word	0xffffbfff
 8003f20:	ffff7fff 	.word	0xffff7fff
 8003f24:	ffff0000 	.word	0xffff0000

08003f28 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a27      	ldr	r2, [pc, #156]	@ (8003fd4 <I2C_ITListenCplt+0xac>)
 8003f36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2241      	movs	r2, #65	@ 0x41
 8003f42:	2120      	movs	r1, #32
 8003f44:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2242      	movs	r2, #66	@ 0x42
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	089b      	lsrs	r3, r3, #2
 8003f58:	001a      	movs	r2, r3
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	d022      	beq.n	8003fa6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d012      	beq.n	8003fa6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	3b01      	subs	r3, #1
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9e:	2204      	movs	r2, #4
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003fa6:	4a0c      	ldr	r2, [pc, #48]	@ (8003fd8 <I2C_ITListenCplt+0xb0>)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	0011      	movs	r1, r2
 8003fac:	0018      	movs	r0, r3
 8003fae:	f000 fa83 	bl	80044b8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2210      	movs	r2, #16
 8003fb8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2240      	movs	r2, #64	@ 0x40
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f7fe ff7f 	bl	8002ec8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003fca:	46c0      	nop			@ (mov r8, r8)
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	b002      	add	sp, #8
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	46c0      	nop			@ (mov r8, r8)
 8003fd4:	ffff0000 	.word	0xffff0000
 8003fd8:	00008003 	.word	0x00008003

08003fdc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003fe6:	200f      	movs	r0, #15
 8003fe8:	183b      	adds	r3, r7, r0
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	2141      	movs	r1, #65	@ 0x41
 8003fee:	5c52      	ldrb	r2, [r2, r1]
 8003ff0:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2242      	movs	r2, #66	@ 0x42
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a72      	ldr	r2, [pc, #456]	@ (80041c8 <I2C_ITError+0x1ec>)
 8003ffe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	431a      	orrs	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004012:	183b      	adds	r3, r7, r0
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	2b28      	cmp	r3, #40	@ 0x28
 8004018:	d007      	beq.n	800402a <I2C_ITError+0x4e>
 800401a:	183b      	adds	r3, r7, r0
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	2b29      	cmp	r3, #41	@ 0x29
 8004020:	d003      	beq.n	800402a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004022:	183b      	adds	r3, r7, r0
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b2a      	cmp	r3, #42	@ 0x2a
 8004028:	d10c      	bne.n	8004044 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2103      	movs	r1, #3
 800402e:	0018      	movs	r0, r3
 8004030:	f000 fa42 	bl	80044b8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2241      	movs	r2, #65	@ 0x41
 8004038:	2128      	movs	r1, #40	@ 0x28
 800403a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a63      	ldr	r2, [pc, #396]	@ (80041cc <I2C_ITError+0x1f0>)
 8004040:	635a      	str	r2, [r3, #52]	@ 0x34
 8004042:	e032      	b.n	80040aa <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004044:	4a62      	ldr	r2, [pc, #392]	@ (80041d0 <I2C_ITError+0x1f4>)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	0011      	movs	r1, r2
 800404a:	0018      	movs	r0, r3
 800404c:	f000 fa34 	bl	80044b8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	0018      	movs	r0, r3
 8004054:	f000 f8ed 	bl	8004232 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2241      	movs	r2, #65	@ 0x41
 800405c:	5c9b      	ldrb	r3, [r3, r2]
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b60      	cmp	r3, #96	@ 0x60
 8004062:	d01f      	beq.n	80040a4 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2241      	movs	r2, #65	@ 0x41
 8004068:	2120      	movs	r1, #32
 800406a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	2220      	movs	r2, #32
 8004074:	4013      	ands	r3, r2
 8004076:	2b20      	cmp	r3, #32
 8004078:	d114      	bne.n	80040a4 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	2210      	movs	r2, #16
 8004082:	4013      	ands	r3, r2
 8004084:	2b10      	cmp	r3, #16
 8004086:	d109      	bne.n	800409c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2210      	movs	r2, #16
 800408e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004094:	2204      	movs	r2, #4
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2220      	movs	r2, #32
 80040a2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ae:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d03b      	beq.n	8004130 <I2C_ITError+0x154>
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2b11      	cmp	r3, #17
 80040bc:	d002      	beq.n	80040c4 <I2C_ITError+0xe8>
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2b21      	cmp	r3, #33	@ 0x21
 80040c2:	d135      	bne.n	8004130 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	2380      	movs	r3, #128	@ 0x80
 80040cc:	01db      	lsls	r3, r3, #7
 80040ce:	401a      	ands	r2, r3
 80040d0:	2380      	movs	r3, #128	@ 0x80
 80040d2:	01db      	lsls	r3, r3, #7
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d107      	bne.n	80040e8 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	493c      	ldr	r1, [pc, #240]	@ (80041d4 <I2C_ITError+0x1f8>)
 80040e4:	400a      	ands	r2, r1
 80040e6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ec:	0018      	movs	r0, r3
 80040ee:	f7fe f9ed 	bl	80024cc <HAL_DMA_GetState>
 80040f2:	0003      	movs	r3, r0
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d016      	beq.n	8004126 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fc:	4a36      	ldr	r2, [pc, #216]	@ (80041d8 <I2C_ITError+0x1fc>)
 80040fe:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2240      	movs	r2, #64	@ 0x40
 8004104:	2100      	movs	r1, #0
 8004106:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800410c:	0018      	movs	r0, r3
 800410e:	f7fe f8b1 	bl	8002274 <HAL_DMA_Abort_IT>
 8004112:	1e03      	subs	r3, r0, #0
 8004114:	d051      	beq.n	80041ba <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800411a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004120:	0018      	movs	r0, r3
 8004122:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004124:	e049      	b.n	80041ba <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	0018      	movs	r0, r3
 800412a:	f000 f859 	bl	80041e0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800412e:	e044      	b.n	80041ba <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004134:	2b00      	cmp	r3, #0
 8004136:	d03b      	beq.n	80041b0 <I2C_ITError+0x1d4>
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2b12      	cmp	r3, #18
 800413c:	d002      	beq.n	8004144 <I2C_ITError+0x168>
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b22      	cmp	r3, #34	@ 0x22
 8004142:	d135      	bne.n	80041b0 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	2380      	movs	r3, #128	@ 0x80
 800414c:	021b      	lsls	r3, r3, #8
 800414e:	401a      	ands	r2, r3
 8004150:	2380      	movs	r3, #128	@ 0x80
 8004152:	021b      	lsls	r3, r3, #8
 8004154:	429a      	cmp	r2, r3
 8004156:	d107      	bne.n	8004168 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	491e      	ldr	r1, [pc, #120]	@ (80041dc <I2C_ITError+0x200>)
 8004164:	400a      	ands	r2, r1
 8004166:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800416c:	0018      	movs	r0, r3
 800416e:	f7fe f9ad 	bl	80024cc <HAL_DMA_GetState>
 8004172:	0003      	movs	r3, r0
 8004174:	2b01      	cmp	r3, #1
 8004176:	d016      	beq.n	80041a6 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800417c:	4a16      	ldr	r2, [pc, #88]	@ (80041d8 <I2C_ITError+0x1fc>)
 800417e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2240      	movs	r2, #64	@ 0x40
 8004184:	2100      	movs	r1, #0
 8004186:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800418c:	0018      	movs	r0, r3
 800418e:	f7fe f871 	bl	8002274 <HAL_DMA_Abort_IT>
 8004192:	1e03      	subs	r3, r0, #0
 8004194:	d013      	beq.n	80041be <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800419a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a0:	0018      	movs	r0, r3
 80041a2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041a4:	e00b      	b.n	80041be <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	0018      	movs	r0, r3
 80041aa:	f000 f819 	bl	80041e0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041ae:	e006      	b.n	80041be <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	0018      	movs	r0, r3
 80041b4:	f000 f814 	bl	80041e0 <I2C_TreatErrorCallback>
  }
}
 80041b8:	e002      	b.n	80041c0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80041ba:	46c0      	nop			@ (mov r8, r8)
 80041bc:	e000      	b.n	80041c0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041be:	46c0      	nop			@ (mov r8, r8)
}
 80041c0:	46c0      	nop			@ (mov r8, r8)
 80041c2:	46bd      	mov	sp, r7
 80041c4:	b004      	add	sp, #16
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	ffff0000 	.word	0xffff0000
 80041cc:	08002f1d 	.word	0x08002f1d
 80041d0:	00008003 	.word	0x00008003
 80041d4:	ffffbfff 	.word	0xffffbfff
 80041d8:	080042f3 	.word	0x080042f3
 80041dc:	ffff7fff 	.word	0xffff7fff

080041e0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2241      	movs	r2, #65	@ 0x41
 80041ec:	5c9b      	ldrb	r3, [r3, r2]
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b60      	cmp	r3, #96	@ 0x60
 80041f2:	d10f      	bne.n	8004214 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2241      	movs	r2, #65	@ 0x41
 80041f8:	2120      	movs	r1, #32
 80041fa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2240      	movs	r2, #64	@ 0x40
 8004206:	2100      	movs	r1, #0
 8004208:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	0018      	movs	r0, r3
 800420e:	f7fe fe73 	bl	8002ef8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004212:	e00a      	b.n	800422a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2240      	movs	r2, #64	@ 0x40
 800421e:	2100      	movs	r1, #0
 8004220:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	0018      	movs	r0, r3
 8004226:	f7fc f9db 	bl	80005e0 <HAL_I2C_ErrorCallback>
}
 800422a:	46c0      	nop			@ (mov r8, r8)
 800422c:	46bd      	mov	sp, r7
 800422e:	b002      	add	sp, #8
 8004230:	bd80      	pop	{r7, pc}

08004232 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b082      	sub	sp, #8
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	2202      	movs	r2, #2
 8004242:	4013      	ands	r3, r2
 8004244:	2b02      	cmp	r3, #2
 8004246:	d103      	bne.n	8004250 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2200      	movs	r2, #0
 800424e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	2201      	movs	r2, #1
 8004258:	4013      	ands	r3, r2
 800425a:	2b01      	cmp	r3, #1
 800425c:	d007      	beq.n	800426e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	699a      	ldr	r2, [r3, #24]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2101      	movs	r1, #1
 800426a:	430a      	orrs	r2, r1
 800426c:	619a      	str	r2, [r3, #24]
  }
}
 800426e:	46c0      	nop			@ (mov r8, r8)
 8004270:	46bd      	mov	sp, r7
 8004272:	b002      	add	sp, #8
 8004274:	bd80      	pop	{r7, pc}
	...

08004278 <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004284:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800428a:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	2380      	movs	r3, #128	@ 0x80
 8004290:	045b      	lsls	r3, r3, #17
 8004292:	429a      	cmp	r2, r3
 8004294:	d002      	beq.n	800429c <I2C_DMASlaveTransmitCplt+0x24>
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10b      	bne.n	80042b4 <I2C_DMASlaveTransmitCplt+0x3c>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4905      	ldr	r1, [pc, #20]	@ (80042bc <I2C_DMASlaveTransmitCplt+0x44>)
 80042a8:	400a      	ands	r2, r1
 80042aa:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	0018      	movs	r0, r3
 80042b0:	f7ff fb72 	bl	8003998 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 80042b4:	46c0      	nop			@ (mov r8, r8)
 80042b6:	46bd      	mov	sp, r7
 80042b8:	b004      	add	sp, #16
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	ffffbfff 	.word	0xffffbfff

080042c0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042cc:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2180      	movs	r1, #128	@ 0x80
 80042da:	0209      	lsls	r1, r1, #8
 80042dc:	430a      	orrs	r2, r1
 80042de:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2110      	movs	r1, #16
 80042e4:	0018      	movs	r0, r3
 80042e6:	f7ff fe79 	bl	8003fdc <I2C_ITError>
}
 80042ea:	46c0      	nop			@ (mov r8, r8)
 80042ec:	46bd      	mov	sp, r7
 80042ee:	b004      	add	sp, #16
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b084      	sub	sp, #16
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800430c:	2200      	movs	r2, #0
 800430e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800431c:	2200      	movs	r2, #0
 800431e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	0018      	movs	r0, r3
 8004324:	f7ff ff5c 	bl	80041e0 <I2C_TreatErrorCallback>
}
 8004328:	46c0      	nop			@ (mov r8, r8)
 800432a:	46bd      	mov	sp, r7
 800432c:	b004      	add	sp, #16
 800432e:	bd80      	pop	{r7, pc}

08004330 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004330:	b590      	push	{r4, r7, lr}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	0008      	movs	r0, r1
 800433a:	0011      	movs	r1, r2
 800433c:	607b      	str	r3, [r7, #4]
 800433e:	240a      	movs	r4, #10
 8004340:	193b      	adds	r3, r7, r4
 8004342:	1c02      	adds	r2, r0, #0
 8004344:	801a      	strh	r2, [r3, #0]
 8004346:	2009      	movs	r0, #9
 8004348:	183b      	adds	r3, r7, r0
 800434a:	1c0a      	adds	r2, r1, #0
 800434c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800434e:	193b      	adds	r3, r7, r4
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	059b      	lsls	r3, r3, #22
 8004354:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004356:	183b      	adds	r3, r7, r0
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	0419      	lsls	r1, r3, #16
 800435c:	23ff      	movs	r3, #255	@ 0xff
 800435e:	041b      	lsls	r3, r3, #16
 8004360:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004362:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800436a:	4313      	orrs	r3, r2
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	085b      	lsrs	r3, r3, #1
 8004370:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800437a:	0d51      	lsrs	r1, r2, #21
 800437c:	2280      	movs	r2, #128	@ 0x80
 800437e:	00d2      	lsls	r2, r2, #3
 8004380:	400a      	ands	r2, r1
 8004382:	4907      	ldr	r1, [pc, #28]	@ (80043a0 <I2C_TransferConfig+0x70>)
 8004384:	430a      	orrs	r2, r1
 8004386:	43d2      	mvns	r2, r2
 8004388:	401a      	ands	r2, r3
 800438a:	0011      	movs	r1, r2
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	430a      	orrs	r2, r1
 8004394:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004396:	46c0      	nop			@ (mov r8, r8)
 8004398:	46bd      	mov	sp, r7
 800439a:	b007      	add	sp, #28
 800439c:	bd90      	pop	{r4, r7, pc}
 800439e:	46c0      	nop			@ (mov r8, r8)
 80043a0:	03ff63ff 	.word	0x03ff63ff

080043a4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	000a      	movs	r2, r1
 80043ae:	1cbb      	adds	r3, r7, #2
 80043b0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043ba:	4b3c      	ldr	r3, [pc, #240]	@ (80044ac <I2C_Enable_IRQ+0x108>)
 80043bc:	429a      	cmp	r2, r3
 80043be:	d035      	beq.n	800442c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80043c4:	4b3a      	ldr	r3, [pc, #232]	@ (80044b0 <I2C_Enable_IRQ+0x10c>)
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d030      	beq.n	800442c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80043ce:	4b39      	ldr	r3, [pc, #228]	@ (80044b4 <I2C_Enable_IRQ+0x110>)
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d02b      	beq.n	800442c <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80043d4:	1cbb      	adds	r3, r7, #2
 80043d6:	2200      	movs	r2, #0
 80043d8:	5e9b      	ldrsh	r3, [r3, r2]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	da03      	bge.n	80043e6 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	22b8      	movs	r2, #184	@ 0xb8
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80043e6:	1cbb      	adds	r3, r7, #2
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	2201      	movs	r2, #1
 80043ec:	4013      	ands	r3, r2
 80043ee:	d003      	beq.n	80043f8 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	22f2      	movs	r2, #242	@ 0xf2
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80043f8:	1cbb      	adds	r3, r7, #2
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	2202      	movs	r2, #2
 80043fe:	4013      	ands	r3, r2
 8004400:	d003      	beq.n	800440a <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	22f4      	movs	r2, #244	@ 0xf4
 8004406:	4313      	orrs	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800440a:	1cbb      	adds	r3, r7, #2
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	2b10      	cmp	r3, #16
 8004410:	d103      	bne.n	800441a <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2290      	movs	r2, #144	@ 0x90
 8004416:	4313      	orrs	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800441a:	1cbb      	adds	r3, r7, #2
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	2b20      	cmp	r3, #32
 8004420:	d137      	bne.n	8004492 <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2220      	movs	r2, #32
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800442a:	e032      	b.n	8004492 <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800442c:	1cbb      	adds	r3, r7, #2
 800442e:	2200      	movs	r2, #0
 8004430:	5e9b      	ldrsh	r3, [r3, r2]
 8004432:	2b00      	cmp	r3, #0
 8004434:	da03      	bge.n	800443e <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	22b8      	movs	r2, #184	@ 0xb8
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800443e:	1cbb      	adds	r3, r7, #2
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	2201      	movs	r2, #1
 8004444:	4013      	ands	r3, r2
 8004446:	d003      	beq.n	8004450 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	22f2      	movs	r2, #242	@ 0xf2
 800444c:	4313      	orrs	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004450:	1cbb      	adds	r3, r7, #2
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	2202      	movs	r2, #2
 8004456:	4013      	ands	r3, r2
 8004458:	d003      	beq.n	8004462 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	22f4      	movs	r2, #244	@ 0xf4
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004462:	1cbb      	adds	r3, r7, #2
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	2b10      	cmp	r3, #16
 8004468:	d103      	bne.n	8004472 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2290      	movs	r2, #144	@ 0x90
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004472:	1cbb      	adds	r3, r7, #2
 8004474:	881b      	ldrh	r3, [r3, #0]
 8004476:	2b20      	cmp	r3, #32
 8004478:	d103      	bne.n	8004482 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2260      	movs	r2, #96	@ 0x60
 800447e:	4313      	orrs	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004482:	1cbb      	adds	r3, r7, #2
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	2b40      	cmp	r3, #64	@ 0x40
 8004488:	d103      	bne.n	8004492 <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2240      	movs	r2, #64	@ 0x40
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6819      	ldr	r1, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	430a      	orrs	r2, r1
 80044a0:	601a      	str	r2, [r3, #0]
}
 80044a2:	46c0      	nop			@ (mov r8, r8)
 80044a4:	46bd      	mov	sp, r7
 80044a6:	b004      	add	sp, #16
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	46c0      	nop			@ (mov r8, r8)
 80044ac:	08003145 	.word	0x08003145
 80044b0:	080035dd 	.word	0x080035dd
 80044b4:	0800335d 	.word	0x0800335d

080044b8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	000a      	movs	r2, r1
 80044c2:	1cbb      	adds	r3, r7, #2
 80044c4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80044c6:	2300      	movs	r3, #0
 80044c8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80044ca:	1cbb      	adds	r3, r7, #2
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	2201      	movs	r2, #1
 80044d0:	4013      	ands	r3, r2
 80044d2:	d010      	beq.n	80044f6 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2242      	movs	r2, #66	@ 0x42
 80044d8:	4313      	orrs	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2241      	movs	r2, #65	@ 0x41
 80044e0:	5c9b      	ldrb	r3, [r3, r2]
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	001a      	movs	r2, r3
 80044e6:	2328      	movs	r3, #40	@ 0x28
 80044e8:	4013      	ands	r3, r2
 80044ea:	2b28      	cmp	r3, #40	@ 0x28
 80044ec:	d003      	beq.n	80044f6 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	22b0      	movs	r2, #176	@ 0xb0
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80044f6:	1cbb      	adds	r3, r7, #2
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	2202      	movs	r2, #2
 80044fc:	4013      	ands	r3, r2
 80044fe:	d010      	beq.n	8004522 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2244      	movs	r2, #68	@ 0x44
 8004504:	4313      	orrs	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2241      	movs	r2, #65	@ 0x41
 800450c:	5c9b      	ldrb	r3, [r3, r2]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	001a      	movs	r2, r3
 8004512:	2328      	movs	r3, #40	@ 0x28
 8004514:	4013      	ands	r3, r2
 8004516:	2b28      	cmp	r3, #40	@ 0x28
 8004518:	d003      	beq.n	8004522 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	22b0      	movs	r2, #176	@ 0xb0
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004522:	1cbb      	adds	r3, r7, #2
 8004524:	2200      	movs	r2, #0
 8004526:	5e9b      	ldrsh	r3, [r3, r2]
 8004528:	2b00      	cmp	r3, #0
 800452a:	da03      	bge.n	8004534 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	22b8      	movs	r2, #184	@ 0xb8
 8004530:	4313      	orrs	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004534:	1cbb      	adds	r3, r7, #2
 8004536:	881b      	ldrh	r3, [r3, #0]
 8004538:	2b10      	cmp	r3, #16
 800453a:	d103      	bne.n	8004544 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2290      	movs	r2, #144	@ 0x90
 8004540:	4313      	orrs	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004544:	1cbb      	adds	r3, r7, #2
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	2b20      	cmp	r3, #32
 800454a:	d103      	bne.n	8004554 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2220      	movs	r2, #32
 8004550:	4313      	orrs	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004554:	1cbb      	adds	r3, r7, #2
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	2b40      	cmp	r3, #64	@ 0x40
 800455a:	d103      	bne.n	8004564 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2240      	movs	r2, #64	@ 0x40
 8004560:	4313      	orrs	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	43d9      	mvns	r1, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	400a      	ands	r2, r1
 8004574:	601a      	str	r2, [r3, #0]
}
 8004576:	46c0      	nop			@ (mov r8, r8)
 8004578:	46bd      	mov	sp, r7
 800457a:	b004      	add	sp, #16
 800457c:	bd80      	pop	{r7, pc}
	...

08004580 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2241      	movs	r2, #65	@ 0x41
 800458e:	5c9b      	ldrb	r3, [r3, r2]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b20      	cmp	r3, #32
 8004594:	d138      	bne.n	8004608 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2240      	movs	r2, #64	@ 0x40
 800459a:	5c9b      	ldrb	r3, [r3, r2]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e032      	b.n	800460a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2240      	movs	r2, #64	@ 0x40
 80045a8:	2101      	movs	r1, #1
 80045aa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2241      	movs	r2, #65	@ 0x41
 80045b0:	2124      	movs	r1, #36	@ 0x24
 80045b2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2101      	movs	r1, #1
 80045c0:	438a      	bics	r2, r1
 80045c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4911      	ldr	r1, [pc, #68]	@ (8004614 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80045d0:	400a      	ands	r2, r1
 80045d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6819      	ldr	r1, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2101      	movs	r1, #1
 80045f0:	430a      	orrs	r2, r1
 80045f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2241      	movs	r2, #65	@ 0x41
 80045f8:	2120      	movs	r1, #32
 80045fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2240      	movs	r2, #64	@ 0x40
 8004600:	2100      	movs	r1, #0
 8004602:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004604:	2300      	movs	r3, #0
 8004606:	e000      	b.n	800460a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004608:	2302      	movs	r3, #2
  }
}
 800460a:	0018      	movs	r0, r3
 800460c:	46bd      	mov	sp, r7
 800460e:	b002      	add	sp, #8
 8004610:	bd80      	pop	{r7, pc}
 8004612:	46c0      	nop			@ (mov r8, r8)
 8004614:	ffffefff 	.word	0xffffefff

08004618 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2241      	movs	r2, #65	@ 0x41
 8004626:	5c9b      	ldrb	r3, [r3, r2]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b20      	cmp	r3, #32
 800462c:	d139      	bne.n	80046a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2240      	movs	r2, #64	@ 0x40
 8004632:	5c9b      	ldrb	r3, [r3, r2]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004638:	2302      	movs	r3, #2
 800463a:	e033      	b.n	80046a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2240      	movs	r2, #64	@ 0x40
 8004640:	2101      	movs	r1, #1
 8004642:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2241      	movs	r2, #65	@ 0x41
 8004648:	2124      	movs	r1, #36	@ 0x24
 800464a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2101      	movs	r1, #1
 8004658:	438a      	bics	r2, r1
 800465a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4a11      	ldr	r2, [pc, #68]	@ (80046ac <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004668:	4013      	ands	r3, r2
 800466a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	021b      	lsls	r3, r3, #8
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	4313      	orrs	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2101      	movs	r1, #1
 800468a:	430a      	orrs	r2, r1
 800468c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2241      	movs	r2, #65	@ 0x41
 8004692:	2120      	movs	r1, #32
 8004694:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2240      	movs	r2, #64	@ 0x40
 800469a:	2100      	movs	r1, #0
 800469c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	e000      	b.n	80046a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80046a2:	2302      	movs	r3, #2
  }
}
 80046a4:	0018      	movs	r0, r3
 80046a6:	46bd      	mov	sp, r7
 80046a8:	b004      	add	sp, #16
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	fffff0ff 	.word	0xfffff0ff

080046b0 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e1d0      	b.n	8004a64 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2201      	movs	r2, #1
 80046c8:	4013      	ands	r3, r2
 80046ca:	d100      	bne.n	80046ce <HAL_RCC_OscConfig+0x1e>
 80046cc:	e069      	b.n	80047a2 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046ce:	4bc8      	ldr	r3, [pc, #800]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2238      	movs	r2, #56	@ 0x38
 80046d4:	4013      	ands	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	2b08      	cmp	r3, #8
 80046dc:	d105      	bne.n	80046ea <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d15d      	bne.n	80047a2 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e1bc      	b.n	8004a64 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	2380      	movs	r3, #128	@ 0x80
 80046f0:	025b      	lsls	r3, r3, #9
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d107      	bne.n	8004706 <HAL_RCC_OscConfig+0x56>
 80046f6:	4bbe      	ldr	r3, [pc, #760]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	4bbd      	ldr	r3, [pc, #756]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 80046fc:	2180      	movs	r1, #128	@ 0x80
 80046fe:	0249      	lsls	r1, r1, #9
 8004700:	430a      	orrs	r2, r1
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	e020      	b.n	8004748 <HAL_RCC_OscConfig+0x98>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	23a0      	movs	r3, #160	@ 0xa0
 800470c:	02db      	lsls	r3, r3, #11
 800470e:	429a      	cmp	r2, r3
 8004710:	d10e      	bne.n	8004730 <HAL_RCC_OscConfig+0x80>
 8004712:	4bb7      	ldr	r3, [pc, #732]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	4bb6      	ldr	r3, [pc, #728]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 8004718:	2180      	movs	r1, #128	@ 0x80
 800471a:	02c9      	lsls	r1, r1, #11
 800471c:	430a      	orrs	r2, r1
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	4bb3      	ldr	r3, [pc, #716]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	4bb2      	ldr	r3, [pc, #712]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 8004726:	2180      	movs	r1, #128	@ 0x80
 8004728:	0249      	lsls	r1, r1, #9
 800472a:	430a      	orrs	r2, r1
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	e00b      	b.n	8004748 <HAL_RCC_OscConfig+0x98>
 8004730:	4baf      	ldr	r3, [pc, #700]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	4bae      	ldr	r3, [pc, #696]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 8004736:	49af      	ldr	r1, [pc, #700]	@ (80049f4 <HAL_RCC_OscConfig+0x344>)
 8004738:	400a      	ands	r2, r1
 800473a:	601a      	str	r2, [r3, #0]
 800473c:	4bac      	ldr	r3, [pc, #688]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	4bab      	ldr	r3, [pc, #684]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 8004742:	49ad      	ldr	r1, [pc, #692]	@ (80049f8 <HAL_RCC_OscConfig+0x348>)
 8004744:	400a      	ands	r2, r1
 8004746:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d014      	beq.n	800477a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004750:	f7fc fb92 	bl	8000e78 <HAL_GetTick>
 8004754:	0003      	movs	r3, r0
 8004756:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004758:	e008      	b.n	800476c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800475a:	f7fc fb8d 	bl	8000e78 <HAL_GetTick>
 800475e:	0002      	movs	r2, r0
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b64      	cmp	r3, #100	@ 0x64
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e17b      	b.n	8004a64 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800476c:	4ba0      	ldr	r3, [pc, #640]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	2380      	movs	r3, #128	@ 0x80
 8004772:	029b      	lsls	r3, r3, #10
 8004774:	4013      	ands	r3, r2
 8004776:	d0f0      	beq.n	800475a <HAL_RCC_OscConfig+0xaa>
 8004778:	e013      	b.n	80047a2 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477a:	f7fc fb7d 	bl	8000e78 <HAL_GetTick>
 800477e:	0003      	movs	r3, r0
 8004780:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004784:	f7fc fb78 	bl	8000e78 <HAL_GetTick>
 8004788:	0002      	movs	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b64      	cmp	r3, #100	@ 0x64
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e166      	b.n	8004a64 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004796:	4b96      	ldr	r3, [pc, #600]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	2380      	movs	r3, #128	@ 0x80
 800479c:	029b      	lsls	r3, r3, #10
 800479e:	4013      	ands	r3, r2
 80047a0:	d1f0      	bne.n	8004784 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2202      	movs	r2, #2
 80047a8:	4013      	ands	r3, r2
 80047aa:	d100      	bne.n	80047ae <HAL_RCC_OscConfig+0xfe>
 80047ac:	e086      	b.n	80048bc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ae:	4b90      	ldr	r3, [pc, #576]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	2238      	movs	r2, #56	@ 0x38
 80047b4:	4013      	ands	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d12f      	bne.n	800481e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e14c      	b.n	8004a64 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ca:	4b89      	ldr	r3, [pc, #548]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	4a8b      	ldr	r2, [pc, #556]	@ (80049fc <HAL_RCC_OscConfig+0x34c>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	0019      	movs	r1, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	021a      	lsls	r2, r3, #8
 80047da:	4b85      	ldr	r3, [pc, #532]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 80047dc:	430a      	orrs	r2, r1
 80047de:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d112      	bne.n	800480c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80047e6:	4b82      	ldr	r3, [pc, #520]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a85      	ldr	r2, [pc, #532]	@ (8004a00 <HAL_RCC_OscConfig+0x350>)
 80047ec:	4013      	ands	r3, r2
 80047ee:	0019      	movs	r1, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	4b7e      	ldr	r3, [pc, #504]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 80047f6:	430a      	orrs	r2, r1
 80047f8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80047fa:	4b7d      	ldr	r3, [pc, #500]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	0adb      	lsrs	r3, r3, #11
 8004800:	2207      	movs	r2, #7
 8004802:	4013      	ands	r3, r2
 8004804:	4a7f      	ldr	r2, [pc, #508]	@ (8004a04 <HAL_RCC_OscConfig+0x354>)
 8004806:	40da      	lsrs	r2, r3
 8004808:	4b7f      	ldr	r3, [pc, #508]	@ (8004a08 <HAL_RCC_OscConfig+0x358>)
 800480a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800480c:	4b7f      	ldr	r3, [pc, #508]	@ (8004a0c <HAL_RCC_OscConfig+0x35c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	0018      	movs	r0, r3
 8004812:	f7fc fad5 	bl	8000dc0 <HAL_InitTick>
 8004816:	1e03      	subs	r3, r0, #0
 8004818:	d050      	beq.n	80048bc <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e122      	b.n	8004a64 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d030      	beq.n	8004888 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004826:	4b72      	ldr	r3, [pc, #456]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a75      	ldr	r2, [pc, #468]	@ (8004a00 <HAL_RCC_OscConfig+0x350>)
 800482c:	4013      	ands	r3, r2
 800482e:	0019      	movs	r1, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691a      	ldr	r2, [r3, #16]
 8004834:	4b6e      	ldr	r3, [pc, #440]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 8004836:	430a      	orrs	r2, r1
 8004838:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800483a:	4b6d      	ldr	r3, [pc, #436]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	4b6c      	ldr	r3, [pc, #432]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 8004840:	2180      	movs	r1, #128	@ 0x80
 8004842:	0049      	lsls	r1, r1, #1
 8004844:	430a      	orrs	r2, r1
 8004846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004848:	f7fc fb16 	bl	8000e78 <HAL_GetTick>
 800484c:	0003      	movs	r3, r0
 800484e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004852:	f7fc fb11 	bl	8000e78 <HAL_GetTick>
 8004856:	0002      	movs	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e0ff      	b.n	8004a64 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004864:	4b62      	ldr	r3, [pc, #392]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	2380      	movs	r3, #128	@ 0x80
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	4013      	ands	r3, r2
 800486e:	d0f0      	beq.n	8004852 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004870:	4b5f      	ldr	r3, [pc, #380]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	4a61      	ldr	r2, [pc, #388]	@ (80049fc <HAL_RCC_OscConfig+0x34c>)
 8004876:	4013      	ands	r3, r2
 8004878:	0019      	movs	r1, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	021a      	lsls	r2, r3, #8
 8004880:	4b5b      	ldr	r3, [pc, #364]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]
 8004886:	e019      	b.n	80048bc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8004888:	4b59      	ldr	r3, [pc, #356]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	4b58      	ldr	r3, [pc, #352]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 800488e:	4960      	ldr	r1, [pc, #384]	@ (8004a10 <HAL_RCC_OscConfig+0x360>)
 8004890:	400a      	ands	r2, r1
 8004892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004894:	f7fc faf0 	bl	8000e78 <HAL_GetTick>
 8004898:	0003      	movs	r3, r0
 800489a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800489c:	e008      	b.n	80048b0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800489e:	f7fc faeb 	bl	8000e78 <HAL_GetTick>
 80048a2:	0002      	movs	r2, r0
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e0d9      	b.n	8004a64 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048b0:	4b4f      	ldr	r3, [pc, #316]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	2380      	movs	r3, #128	@ 0x80
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	4013      	ands	r3, r2
 80048ba:	d1f0      	bne.n	800489e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2208      	movs	r2, #8
 80048c2:	4013      	ands	r3, r2
 80048c4:	d042      	beq.n	800494c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80048c6:	4b4a      	ldr	r3, [pc, #296]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	2238      	movs	r2, #56	@ 0x38
 80048cc:	4013      	ands	r3, r2
 80048ce:	2b18      	cmp	r3, #24
 80048d0:	d105      	bne.n	80048de <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d138      	bne.n	800494c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e0c2      	b.n	8004a64 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d019      	beq.n	800491a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80048e6:	4b42      	ldr	r3, [pc, #264]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 80048e8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80048ea:	4b41      	ldr	r3, [pc, #260]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 80048ec:	2101      	movs	r1, #1
 80048ee:	430a      	orrs	r2, r1
 80048f0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f2:	f7fc fac1 	bl	8000e78 <HAL_GetTick>
 80048f6:	0003      	movs	r3, r0
 80048f8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80048fc:	f7fc fabc 	bl	8000e78 <HAL_GetTick>
 8004900:	0002      	movs	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e0aa      	b.n	8004a64 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800490e:	4b38      	ldr	r3, [pc, #224]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 8004910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004912:	2202      	movs	r2, #2
 8004914:	4013      	ands	r3, r2
 8004916:	d0f1      	beq.n	80048fc <HAL_RCC_OscConfig+0x24c>
 8004918:	e018      	b.n	800494c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800491a:	4b35      	ldr	r3, [pc, #212]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 800491c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800491e:	4b34      	ldr	r3, [pc, #208]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 8004920:	2101      	movs	r1, #1
 8004922:	438a      	bics	r2, r1
 8004924:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004926:	f7fc faa7 	bl	8000e78 <HAL_GetTick>
 800492a:	0003      	movs	r3, r0
 800492c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004930:	f7fc faa2 	bl	8000e78 <HAL_GetTick>
 8004934:	0002      	movs	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e090      	b.n	8004a64 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8004942:	4b2b      	ldr	r3, [pc, #172]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 8004944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004946:	2202      	movs	r2, #2
 8004948:	4013      	ands	r3, r2
 800494a:	d1f1      	bne.n	8004930 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2204      	movs	r2, #4
 8004952:	4013      	ands	r3, r2
 8004954:	d100      	bne.n	8004958 <HAL_RCC_OscConfig+0x2a8>
 8004956:	e084      	b.n	8004a62 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004958:	230f      	movs	r3, #15
 800495a:	18fb      	adds	r3, r7, r3
 800495c:	2200      	movs	r2, #0
 800495e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004960:	4b23      	ldr	r3, [pc, #140]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	2238      	movs	r2, #56	@ 0x38
 8004966:	4013      	ands	r3, r2
 8004968:	2b20      	cmp	r3, #32
 800496a:	d106      	bne.n	800497a <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d000      	beq.n	8004976 <HAL_RCC_OscConfig+0x2c6>
 8004974:	e075      	b.n	8004a62 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e074      	b.n	8004a64 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d106      	bne.n	8004990 <HAL_RCC_OscConfig+0x2e0>
 8004982:	4b1b      	ldr	r3, [pc, #108]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 8004984:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004986:	4b1a      	ldr	r3, [pc, #104]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 8004988:	2101      	movs	r1, #1
 800498a:	430a      	orrs	r2, r1
 800498c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800498e:	e01c      	b.n	80049ca <HAL_RCC_OscConfig+0x31a>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	2b05      	cmp	r3, #5
 8004996:	d10c      	bne.n	80049b2 <HAL_RCC_OscConfig+0x302>
 8004998:	4b15      	ldr	r3, [pc, #84]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 800499a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800499c:	4b14      	ldr	r3, [pc, #80]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 800499e:	2104      	movs	r1, #4
 80049a0:	430a      	orrs	r2, r1
 80049a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80049a4:	4b12      	ldr	r3, [pc, #72]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 80049a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049a8:	4b11      	ldr	r3, [pc, #68]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 80049aa:	2101      	movs	r1, #1
 80049ac:	430a      	orrs	r2, r1
 80049ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 80049b0:	e00b      	b.n	80049ca <HAL_RCC_OscConfig+0x31a>
 80049b2:	4b0f      	ldr	r3, [pc, #60]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 80049b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049b6:	4b0e      	ldr	r3, [pc, #56]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 80049b8:	2101      	movs	r1, #1
 80049ba:	438a      	bics	r2, r1
 80049bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80049be:	4b0c      	ldr	r3, [pc, #48]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 80049c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80049c2:	4b0b      	ldr	r3, [pc, #44]	@ (80049f0 <HAL_RCC_OscConfig+0x340>)
 80049c4:	2104      	movs	r1, #4
 80049c6:	438a      	bics	r2, r1
 80049c8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d028      	beq.n	8004a24 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d2:	f7fc fa51 	bl	8000e78 <HAL_GetTick>
 80049d6:	0003      	movs	r3, r0
 80049d8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80049da:	e01d      	b.n	8004a18 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049dc:	f7fc fa4c 	bl	8000e78 <HAL_GetTick>
 80049e0:	0002      	movs	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	4a0b      	ldr	r2, [pc, #44]	@ (8004a14 <HAL_RCC_OscConfig+0x364>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d915      	bls.n	8004a18 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e039      	b.n	8004a64 <HAL_RCC_OscConfig+0x3b4>
 80049f0:	40021000 	.word	0x40021000
 80049f4:	fffeffff 	.word	0xfffeffff
 80049f8:	fffbffff 	.word	0xfffbffff
 80049fc:	ffff80ff 	.word	0xffff80ff
 8004a00:	ffffc7ff 	.word	0xffffc7ff
 8004a04:	02dc6c00 	.word	0x02dc6c00
 8004a08:	20000008 	.word	0x20000008
 8004a0c:	20000024 	.word	0x20000024
 8004a10:	fffffeff 	.word	0xfffffeff
 8004a14:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004a18:	4b14      	ldr	r3, [pc, #80]	@ (8004a6c <HAL_RCC_OscConfig+0x3bc>)
 8004a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a1c:	2202      	movs	r2, #2
 8004a1e:	4013      	ands	r3, r2
 8004a20:	d0dc      	beq.n	80049dc <HAL_RCC_OscConfig+0x32c>
 8004a22:	e013      	b.n	8004a4c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a24:	f7fc fa28 	bl	8000e78 <HAL_GetTick>
 8004a28:	0003      	movs	r3, r0
 8004a2a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8004a2c:	e009      	b.n	8004a42 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a2e:	f7fc fa23 	bl	8000e78 <HAL_GetTick>
 8004a32:	0002      	movs	r2, r0
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	4a0d      	ldr	r2, [pc, #52]	@ (8004a70 <HAL_RCC_OscConfig+0x3c0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e010      	b.n	8004a64 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8004a42:	4b0a      	ldr	r3, [pc, #40]	@ (8004a6c <HAL_RCC_OscConfig+0x3bc>)
 8004a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a46:	2202      	movs	r2, #2
 8004a48:	4013      	ands	r3, r2
 8004a4a:	d1f0      	bne.n	8004a2e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004a4c:	230f      	movs	r3, #15
 8004a4e:	18fb      	adds	r3, r7, r3
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d105      	bne.n	8004a62 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004a56:	4b05      	ldr	r3, [pc, #20]	@ (8004a6c <HAL_RCC_OscConfig+0x3bc>)
 8004a58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a5a:	4b04      	ldr	r3, [pc, #16]	@ (8004a6c <HAL_RCC_OscConfig+0x3bc>)
 8004a5c:	4905      	ldr	r1, [pc, #20]	@ (8004a74 <HAL_RCC_OscConfig+0x3c4>)
 8004a5e:	400a      	ands	r2, r1
 8004a60:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	0018      	movs	r0, r3
 8004a66:	46bd      	mov	sp, r7
 8004a68:	b006      	add	sp, #24
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	00001388 	.word	0x00001388
 8004a74:	efffffff 	.word	0xefffffff

08004a78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e0df      	b.n	8004c4c <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a8c:	4b71      	ldr	r3, [pc, #452]	@ (8004c54 <HAL_RCC_ClockConfig+0x1dc>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2207      	movs	r2, #7
 8004a92:	4013      	ands	r3, r2
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d91e      	bls.n	8004ad8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a9a:	4b6e      	ldr	r3, [pc, #440]	@ (8004c54 <HAL_RCC_ClockConfig+0x1dc>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2207      	movs	r2, #7
 8004aa0:	4393      	bics	r3, r2
 8004aa2:	0019      	movs	r1, r3
 8004aa4:	4b6b      	ldr	r3, [pc, #428]	@ (8004c54 <HAL_RCC_ClockConfig+0x1dc>)
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004aac:	f7fc f9e4 	bl	8000e78 <HAL_GetTick>
 8004ab0:	0003      	movs	r3, r0
 8004ab2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004ab4:	e009      	b.n	8004aca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004ab6:	f7fc f9df 	bl	8000e78 <HAL_GetTick>
 8004aba:	0002      	movs	r2, r0
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	4a65      	ldr	r2, [pc, #404]	@ (8004c58 <HAL_RCC_ClockConfig+0x1e0>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e0c0      	b.n	8004c4c <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004aca:	4b62      	ldr	r3, [pc, #392]	@ (8004c54 <HAL_RCC_ClockConfig+0x1dc>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2207      	movs	r2, #7
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d1ee      	bne.n	8004ab6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2202      	movs	r2, #2
 8004ade:	4013      	ands	r3, r2
 8004ae0:	d017      	beq.n	8004b12 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2204      	movs	r2, #4
 8004ae8:	4013      	ands	r3, r2
 8004aea:	d008      	beq.n	8004afe <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004aec:	4b5b      	ldr	r3, [pc, #364]	@ (8004c5c <HAL_RCC_ClockConfig+0x1e4>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	4a5b      	ldr	r2, [pc, #364]	@ (8004c60 <HAL_RCC_ClockConfig+0x1e8>)
 8004af2:	401a      	ands	r2, r3
 8004af4:	4b59      	ldr	r3, [pc, #356]	@ (8004c5c <HAL_RCC_ClockConfig+0x1e4>)
 8004af6:	21b0      	movs	r1, #176	@ 0xb0
 8004af8:	0109      	lsls	r1, r1, #4
 8004afa:	430a      	orrs	r2, r1
 8004afc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004afe:	4b57      	ldr	r3, [pc, #348]	@ (8004c5c <HAL_RCC_ClockConfig+0x1e4>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	4a58      	ldr	r2, [pc, #352]	@ (8004c64 <HAL_RCC_ClockConfig+0x1ec>)
 8004b04:	4013      	ands	r3, r2
 8004b06:	0019      	movs	r1, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68da      	ldr	r2, [r3, #12]
 8004b0c:	4b53      	ldr	r3, [pc, #332]	@ (8004c5c <HAL_RCC_ClockConfig+0x1e4>)
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2201      	movs	r2, #1
 8004b18:	4013      	ands	r3, r2
 8004b1a:	d04b      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d107      	bne.n	8004b34 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b24:	4b4d      	ldr	r3, [pc, #308]	@ (8004c5c <HAL_RCC_ClockConfig+0x1e4>)
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	2380      	movs	r3, #128	@ 0x80
 8004b2a:	029b      	lsls	r3, r3, #10
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	d11f      	bne.n	8004b70 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e08b      	b.n	8004c4c <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d107      	bne.n	8004b4c <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b3c:	4b47      	ldr	r3, [pc, #284]	@ (8004c5c <HAL_RCC_ClockConfig+0x1e4>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	2380      	movs	r3, #128	@ 0x80
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	4013      	ands	r3, r2
 8004b46:	d113      	bne.n	8004b70 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e07f      	b.n	8004c4c <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2b03      	cmp	r3, #3
 8004b52:	d106      	bne.n	8004b62 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004b54:	4b41      	ldr	r3, [pc, #260]	@ (8004c5c <HAL_RCC_ClockConfig+0x1e4>)
 8004b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b58:	2202      	movs	r2, #2
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	d108      	bne.n	8004b70 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e074      	b.n	8004c4c <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004b62:	4b3e      	ldr	r3, [pc, #248]	@ (8004c5c <HAL_RCC_ClockConfig+0x1e4>)
 8004b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b66:	2202      	movs	r2, #2
 8004b68:	4013      	ands	r3, r2
 8004b6a:	d101      	bne.n	8004b70 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e06d      	b.n	8004c4c <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b70:	4b3a      	ldr	r3, [pc, #232]	@ (8004c5c <HAL_RCC_ClockConfig+0x1e4>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	2207      	movs	r2, #7
 8004b76:	4393      	bics	r3, r2
 8004b78:	0019      	movs	r1, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	4b37      	ldr	r3, [pc, #220]	@ (8004c5c <HAL_RCC_ClockConfig+0x1e4>)
 8004b80:	430a      	orrs	r2, r1
 8004b82:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b84:	f7fc f978 	bl	8000e78 <HAL_GetTick>
 8004b88:	0003      	movs	r3, r0
 8004b8a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b8c:	e009      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004b8e:	f7fc f973 	bl	8000e78 <HAL_GetTick>
 8004b92:	0002      	movs	r2, r0
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	4a2f      	ldr	r2, [pc, #188]	@ (8004c58 <HAL_RCC_ClockConfig+0x1e0>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e054      	b.n	8004c4c <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ba2:	4b2e      	ldr	r3, [pc, #184]	@ (8004c5c <HAL_RCC_ClockConfig+0x1e4>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	2238      	movs	r2, #56	@ 0x38
 8004ba8:	401a      	ands	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d1ec      	bne.n	8004b8e <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bb4:	4b27      	ldr	r3, [pc, #156]	@ (8004c54 <HAL_RCC_ClockConfig+0x1dc>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2207      	movs	r2, #7
 8004bba:	4013      	ands	r3, r2
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d21e      	bcs.n	8004c00 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bc2:	4b24      	ldr	r3, [pc, #144]	@ (8004c54 <HAL_RCC_ClockConfig+0x1dc>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2207      	movs	r2, #7
 8004bc8:	4393      	bics	r3, r2
 8004bca:	0019      	movs	r1, r3
 8004bcc:	4b21      	ldr	r3, [pc, #132]	@ (8004c54 <HAL_RCC_ClockConfig+0x1dc>)
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004bd4:	f7fc f950 	bl	8000e78 <HAL_GetTick>
 8004bd8:	0003      	movs	r3, r0
 8004bda:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004bdc:	e009      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004bde:	f7fc f94b 	bl	8000e78 <HAL_GetTick>
 8004be2:	0002      	movs	r2, r0
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	4a1b      	ldr	r2, [pc, #108]	@ (8004c58 <HAL_RCC_ClockConfig+0x1e0>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e02c      	b.n	8004c4c <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004bf2:	4b18      	ldr	r3, [pc, #96]	@ (8004c54 <HAL_RCC_ClockConfig+0x1dc>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2207      	movs	r2, #7
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d1ee      	bne.n	8004bde <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2204      	movs	r2, #4
 8004c06:	4013      	ands	r3, r2
 8004c08:	d009      	beq.n	8004c1e <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004c0a:	4b14      	ldr	r3, [pc, #80]	@ (8004c5c <HAL_RCC_ClockConfig+0x1e4>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	4a16      	ldr	r2, [pc, #88]	@ (8004c68 <HAL_RCC_ClockConfig+0x1f0>)
 8004c10:	4013      	ands	r3, r2
 8004c12:	0019      	movs	r1, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691a      	ldr	r2, [r3, #16]
 8004c18:	4b10      	ldr	r3, [pc, #64]	@ (8004c5c <HAL_RCC_ClockConfig+0x1e4>)
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004c1e:	f000 f82b 	bl	8004c78 <HAL_RCC_GetSysClockFreq>
 8004c22:	0001      	movs	r1, r0
 8004c24:	4b0d      	ldr	r3, [pc, #52]	@ (8004c5c <HAL_RCC_ClockConfig+0x1e4>)
 8004c26:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004c28:	0a1b      	lsrs	r3, r3, #8
 8004c2a:	220f      	movs	r2, #15
 8004c2c:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8004c6c <HAL_RCC_ClockConfig+0x1f4>)
 8004c30:	0092      	lsls	r2, r2, #2
 8004c32:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004c34:	221f      	movs	r2, #31
 8004c36:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004c38:	000a      	movs	r2, r1
 8004c3a:	40da      	lsrs	r2, r3
 8004c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c70 <HAL_RCC_ClockConfig+0x1f8>)
 8004c3e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004c40:	4b0c      	ldr	r3, [pc, #48]	@ (8004c74 <HAL_RCC_ClockConfig+0x1fc>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	0018      	movs	r0, r3
 8004c46:	f7fc f8bb 	bl	8000dc0 <HAL_InitTick>
 8004c4a:	0003      	movs	r3, r0
}
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	b004      	add	sp, #16
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	40022000 	.word	0x40022000
 8004c58:	00001388 	.word	0x00001388
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	ffff84ff 	.word	0xffff84ff
 8004c64:	fffff0ff 	.word	0xfffff0ff
 8004c68:	ffff8fff 	.word	0xffff8fff
 8004c6c:	080057cc 	.word	0x080057cc
 8004c70:	20000008 	.word	0x20000008
 8004c74:	20000024 	.word	0x20000024

08004c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x78>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	2238      	movs	r2, #56	@ 0x38
 8004c84:	4013      	ands	r3, r2
 8004c86:	d10f      	bne.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004c88:	4b19      	ldr	r3, [pc, #100]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x78>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	0adb      	lsrs	r3, r3, #11
 8004c8e:	2207      	movs	r2, #7
 8004c90:	4013      	ands	r3, r2
 8004c92:	2201      	movs	r2, #1
 8004c94:	409a      	lsls	r2, r3
 8004c96:	0013      	movs	r3, r2
 8004c98:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004c9a:	6839      	ldr	r1, [r7, #0]
 8004c9c:	4815      	ldr	r0, [pc, #84]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8004c9e:	f7fb fa33 	bl	8000108 <__udivsi3>
 8004ca2:	0003      	movs	r3, r0
 8004ca4:	607b      	str	r3, [r7, #4]
 8004ca6:	e01e      	b.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004ca8:	4b11      	ldr	r3, [pc, #68]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x78>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2238      	movs	r2, #56	@ 0x38
 8004cae:	4013      	ands	r3, r2
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	d102      	bne.n	8004cba <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8004cb6:	607b      	str	r3, [r7, #4]
 8004cb8:	e015      	b.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004cba:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x78>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	2238      	movs	r2, #56	@ 0x38
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	2b20      	cmp	r3, #32
 8004cc4:	d103      	bne.n	8004cce <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004cc6:	2380      	movs	r3, #128	@ 0x80
 8004cc8:	021b      	lsls	r3, r3, #8
 8004cca:	607b      	str	r3, [r7, #4]
 8004ccc:	e00b      	b.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004cce:	4b08      	ldr	r3, [pc, #32]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x78>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	2238      	movs	r2, #56	@ 0x38
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	2b18      	cmp	r3, #24
 8004cd8:	d103      	bne.n	8004ce2 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004cda:	23fa      	movs	r3, #250	@ 0xfa
 8004cdc:	01db      	lsls	r3, r3, #7
 8004cde:	607b      	str	r3, [r7, #4]
 8004ce0:	e001      	b.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8004ce6:	687b      	ldr	r3, [r7, #4]
}
 8004ce8:	0018      	movs	r0, r3
 8004cea:	46bd      	mov	sp, r7
 8004cec:	b002      	add	sp, #8
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	02dc6c00 	.word	0x02dc6c00

08004cf8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004cfc:	f7ff ffbc 	bl	8004c78 <HAL_RCC_GetSysClockFreq>
 8004d00:	0001      	movs	r1, r0
 8004d02:	4b09      	ldr	r3, [pc, #36]	@ (8004d28 <HAL_RCC_GetHCLKFreq+0x30>)
 8004d04:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004d06:	0a1b      	lsrs	r3, r3, #8
 8004d08:	220f      	movs	r2, #15
 8004d0a:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004d0c:	4b07      	ldr	r3, [pc, #28]	@ (8004d2c <HAL_RCC_GetHCLKFreq+0x34>)
 8004d0e:	0092      	lsls	r2, r2, #2
 8004d10:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004d12:	221f      	movs	r2, #31
 8004d14:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8004d16:	000a      	movs	r2, r1
 8004d18:	40da      	lsrs	r2, r3
 8004d1a:	4b05      	ldr	r3, [pc, #20]	@ (8004d30 <HAL_RCC_GetHCLKFreq+0x38>)
 8004d1c:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8004d1e:	4b04      	ldr	r3, [pc, #16]	@ (8004d30 <HAL_RCC_GetHCLKFreq+0x38>)
 8004d20:	681b      	ldr	r3, [r3, #0]
}
 8004d22:	0018      	movs	r0, r3
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	080057cc 	.word	0x080057cc
 8004d30:	20000008 	.word	0x20000008

08004d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8004d38:	f7ff ffde 	bl	8004cf8 <HAL_RCC_GetHCLKFreq>
 8004d3c:	0001      	movs	r1, r0
 8004d3e:	4b07      	ldr	r3, [pc, #28]	@ (8004d5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	0b1b      	lsrs	r3, r3, #12
 8004d44:	2207      	movs	r2, #7
 8004d46:	401a      	ands	r2, r3
 8004d48:	4b05      	ldr	r3, [pc, #20]	@ (8004d60 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8004d4a:	0092      	lsls	r2, r2, #2
 8004d4c:	58d3      	ldr	r3, [r2, r3]
 8004d4e:	221f      	movs	r2, #31
 8004d50:	4013      	ands	r3, r2
 8004d52:	40d9      	lsrs	r1, r3
 8004d54:	000b      	movs	r3, r1
}
 8004d56:	0018      	movs	r0, r3
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	0800580c 	.word	0x0800580c

08004d64 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004d6c:	2313      	movs	r3, #19
 8004d6e:	18fb      	adds	r3, r7, r3
 8004d70:	2200      	movs	r2, #0
 8004d72:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d74:	2312      	movs	r3, #18
 8004d76:	18fb      	adds	r3, r7, r3
 8004d78:	2200      	movs	r2, #0
 8004d7a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2240      	movs	r2, #64	@ 0x40
 8004d82:	4013      	ands	r3, r2
 8004d84:	d100      	bne.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8004d86:	e079      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d88:	2011      	movs	r0, #17
 8004d8a:	183b      	adds	r3, r7, r0
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d90:	4b63      	ldr	r3, [pc, #396]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d94:	2380      	movs	r3, #128	@ 0x80
 8004d96:	055b      	lsls	r3, r3, #21
 8004d98:	4013      	ands	r3, r2
 8004d9a:	d110      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d9c:	4b60      	ldr	r3, [pc, #384]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004da0:	4b5f      	ldr	r3, [pc, #380]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004da2:	2180      	movs	r1, #128	@ 0x80
 8004da4:	0549      	lsls	r1, r1, #21
 8004da6:	430a      	orrs	r2, r1
 8004da8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004daa:	4b5d      	ldr	r3, [pc, #372]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004dac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004dae:	2380      	movs	r3, #128	@ 0x80
 8004db0:	055b      	lsls	r3, r3, #21
 8004db2:	4013      	ands	r3, r2
 8004db4:	60bb      	str	r3, [r7, #8]
 8004db6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004db8:	183b      	adds	r3, r7, r0
 8004dba:	2201      	movs	r2, #1
 8004dbc:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8004dbe:	4b58      	ldr	r3, [pc, #352]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004dc0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004dc2:	23c0      	movs	r3, #192	@ 0xc0
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d019      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d014      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8004dda:	4b51      	ldr	r3, [pc, #324]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dde:	4a51      	ldr	r2, [pc, #324]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004de0:	4013      	ands	r3, r2
 8004de2:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004de4:	4b4e      	ldr	r3, [pc, #312]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004de6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004de8:	4b4d      	ldr	r3, [pc, #308]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004dea:	2180      	movs	r1, #128	@ 0x80
 8004dec:	0249      	lsls	r1, r1, #9
 8004dee:	430a      	orrs	r2, r1
 8004df0:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004df2:	4b4b      	ldr	r3, [pc, #300]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004df4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004df6:	4b4a      	ldr	r3, [pc, #296]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004df8:	494b      	ldr	r1, [pc, #300]	@ (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004dfa:	400a      	ands	r2, r1
 8004dfc:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8004dfe:	4b48      	ldr	r3, [pc, #288]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2201      	movs	r2, #1
 8004e08:	4013      	ands	r3, r2
 8004e0a:	d016      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e0c:	f7fc f834 	bl	8000e78 <HAL_GetTick>
 8004e10:	0003      	movs	r3, r0
 8004e12:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004e14:	e00c      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e16:	f7fc f82f 	bl	8000e78 <HAL_GetTick>
 8004e1a:	0002      	movs	r2, r0
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	4a42      	ldr	r2, [pc, #264]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d904      	bls.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8004e26:	2313      	movs	r3, #19
 8004e28:	18fb      	adds	r3, r7, r3
 8004e2a:	2203      	movs	r2, #3
 8004e2c:	701a      	strb	r2, [r3, #0]
          break;
 8004e2e:	e004      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004e30:	4b3b      	ldr	r3, [pc, #236]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e34:	2202      	movs	r2, #2
 8004e36:	4013      	ands	r3, r2
 8004e38:	d0ed      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8004e3a:	2313      	movs	r3, #19
 8004e3c:	18fb      	adds	r3, r7, r3
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10a      	bne.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e44:	4b36      	ldr	r3, [pc, #216]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e48:	4a36      	ldr	r2, [pc, #216]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	0019      	movs	r1, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699a      	ldr	r2, [r3, #24]
 8004e52:	4b33      	ldr	r3, [pc, #204]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e54:	430a      	orrs	r2, r1
 8004e56:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e58:	e005      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e5a:	2312      	movs	r3, #18
 8004e5c:	18fb      	adds	r3, r7, r3
 8004e5e:	2213      	movs	r2, #19
 8004e60:	18ba      	adds	r2, r7, r2
 8004e62:	7812      	ldrb	r2, [r2, #0]
 8004e64:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e66:	2311      	movs	r3, #17
 8004e68:	18fb      	adds	r3, r7, r3
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d105      	bne.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e70:	4b2b      	ldr	r3, [pc, #172]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e74:	4b2a      	ldr	r3, [pc, #168]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e76:	492e      	ldr	r1, [pc, #184]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e78:	400a      	ands	r2, r1
 8004e7a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2201      	movs	r2, #1
 8004e82:	4013      	ands	r3, r2
 8004e84:	d009      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e86:	4b26      	ldr	r3, [pc, #152]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e8a:	2203      	movs	r2, #3
 8004e8c:	4393      	bics	r3, r2
 8004e8e:	0019      	movs	r1, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	4b22      	ldr	r3, [pc, #136]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e96:	430a      	orrs	r2, r1
 8004e98:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	d009      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea8:	4a22      	ldr	r2, [pc, #136]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eaa:	4013      	ands	r3, r2
 8004eac:	0019      	movs	r1, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	d008      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ec2:	4b17      	ldr	r3, [pc, #92]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	0899      	lsrs	r1, r3, #2
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	695a      	ldr	r2, [r3, #20]
 8004ece:	4b14      	ldr	r3, [pc, #80]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2204      	movs	r2, #4
 8004eda:	4013      	ands	r3, r2
 8004edc:	d009      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004ede:	4b10      	ldr	r3, [pc, #64]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ee2:	4a15      	ldr	r2, [pc, #84]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	0019      	movs	r1, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691a      	ldr	r2, [r3, #16]
 8004eec:	4b0c      	ldr	r3, [pc, #48]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2280      	movs	r2, #128	@ 0x80
 8004ef8:	4013      	ands	r3, r2
 8004efa:	d009      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8004efc:	4b08      	ldr	r3, [pc, #32]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	22e0      	movs	r2, #224	@ 0xe0
 8004f02:	4393      	bics	r3, r2
 8004f04:	0019      	movs	r1, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	4b05      	ldr	r3, [pc, #20]	@ (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	601a      	str	r2, [r3, #0]
  }
  return status;
 8004f10:	2312      	movs	r3, #18
 8004f12:	18fb      	adds	r3, r7, r3
 8004f14:	781b      	ldrb	r3, [r3, #0]
}
 8004f16:	0018      	movs	r0, r3
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	b006      	add	sp, #24
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	46c0      	nop			@ (mov r8, r8)
 8004f20:	40021000 	.word	0x40021000
 8004f24:	fffffcff 	.word	0xfffffcff
 8004f28:	fffeffff 	.word	0xfffeffff
 8004f2c:	00001388 	.word	0x00001388
 8004f30:	efffffff 	.word	0xefffffff
 8004f34:	ffffcfff 	.word	0xffffcfff
 8004f38:	ffff3fff 	.word	0xffff3fff

08004f3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e046      	b.n	8004fdc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2288      	movs	r2, #136	@ 0x88
 8004f52:	589b      	ldr	r3, [r3, r2]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d107      	bne.n	8004f68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2284      	movs	r2, #132	@ 0x84
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	0018      	movs	r0, r3
 8004f64:	f000 f840 	bl	8004fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2288      	movs	r2, #136	@ 0x88
 8004f6c:	2124      	movs	r1, #36	@ 0x24
 8004f6e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	438a      	bics	r2, r1
 8004f7e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d003      	beq.n	8004f90 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	f000 f9b2 	bl	80052f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	0018      	movs	r0, r3
 8004f94:	f000 f830 	bl	8004ff8 <UART_SetConfig>
 8004f98:	0003      	movs	r3, r0
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d101      	bne.n	8004fa2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e01c      	b.n	8004fdc <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	490d      	ldr	r1, [pc, #52]	@ (8004fe4 <HAL_UART_Init+0xa8>)
 8004fae:	400a      	ands	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689a      	ldr	r2, [r3, #8]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	212a      	movs	r1, #42	@ 0x2a
 8004fbe:	438a      	bics	r2, r1
 8004fc0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2101      	movs	r1, #1
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	f000 fa41 	bl	800545c <UART_CheckIdleState>
 8004fda:	0003      	movs	r3, r0
}
 8004fdc:	0018      	movs	r0, r3
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	b002      	add	sp, #8
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	ffffb7ff 	.word	0xffffb7ff

08004fe8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004ff0:	46c0      	nop			@ (mov r8, r8)
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	b002      	add	sp, #8
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b088      	sub	sp, #32
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005000:	231e      	movs	r3, #30
 8005002:	18fb      	adds	r3, r7, r3
 8005004:	2200      	movs	r2, #0
 8005006:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	431a      	orrs	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	4313      	orrs	r3, r2
 800501e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4aab      	ldr	r2, [pc, #684]	@ (80052d4 <UART_SetConfig+0x2dc>)
 8005028:	4013      	ands	r3, r2
 800502a:	0019      	movs	r1, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	430a      	orrs	r2, r1
 8005034:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	4aa6      	ldr	r2, [pc, #664]	@ (80052d8 <UART_SetConfig+0x2e0>)
 800503e:	4013      	ands	r3, r2
 8005040:	0019      	movs	r1, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	4313      	orrs	r3, r2
 800505c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	4a9d      	ldr	r2, [pc, #628]	@ (80052dc <UART_SetConfig+0x2e4>)
 8005066:	4013      	ands	r3, r2
 8005068:	0019      	movs	r1, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	430a      	orrs	r2, r1
 8005072:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507a:	220f      	movs	r2, #15
 800507c:	4393      	bics	r3, r2
 800507e:	0019      	movs	r1, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a93      	ldr	r2, [pc, #588]	@ (80052e0 <UART_SetConfig+0x2e8>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d127      	bne.n	80050e6 <UART_SetConfig+0xee>
 8005096:	4b93      	ldr	r3, [pc, #588]	@ (80052e4 <UART_SetConfig+0x2ec>)
 8005098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800509a:	2203      	movs	r2, #3
 800509c:	4013      	ands	r3, r2
 800509e:	2b03      	cmp	r3, #3
 80050a0:	d017      	beq.n	80050d2 <UART_SetConfig+0xda>
 80050a2:	d81b      	bhi.n	80050dc <UART_SetConfig+0xe4>
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d00a      	beq.n	80050be <UART_SetConfig+0xc6>
 80050a8:	d818      	bhi.n	80050dc <UART_SetConfig+0xe4>
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d002      	beq.n	80050b4 <UART_SetConfig+0xbc>
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d00a      	beq.n	80050c8 <UART_SetConfig+0xd0>
 80050b2:	e013      	b.n	80050dc <UART_SetConfig+0xe4>
 80050b4:	231f      	movs	r3, #31
 80050b6:	18fb      	adds	r3, r7, r3
 80050b8:	2200      	movs	r2, #0
 80050ba:	701a      	strb	r2, [r3, #0]
 80050bc:	e021      	b.n	8005102 <UART_SetConfig+0x10a>
 80050be:	231f      	movs	r3, #31
 80050c0:	18fb      	adds	r3, r7, r3
 80050c2:	2202      	movs	r2, #2
 80050c4:	701a      	strb	r2, [r3, #0]
 80050c6:	e01c      	b.n	8005102 <UART_SetConfig+0x10a>
 80050c8:	231f      	movs	r3, #31
 80050ca:	18fb      	adds	r3, r7, r3
 80050cc:	2204      	movs	r2, #4
 80050ce:	701a      	strb	r2, [r3, #0]
 80050d0:	e017      	b.n	8005102 <UART_SetConfig+0x10a>
 80050d2:	231f      	movs	r3, #31
 80050d4:	18fb      	adds	r3, r7, r3
 80050d6:	2208      	movs	r2, #8
 80050d8:	701a      	strb	r2, [r3, #0]
 80050da:	e012      	b.n	8005102 <UART_SetConfig+0x10a>
 80050dc:	231f      	movs	r3, #31
 80050de:	18fb      	adds	r3, r7, r3
 80050e0:	2210      	movs	r2, #16
 80050e2:	701a      	strb	r2, [r3, #0]
 80050e4:	e00d      	b.n	8005102 <UART_SetConfig+0x10a>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a7f      	ldr	r2, [pc, #508]	@ (80052e8 <UART_SetConfig+0x2f0>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d104      	bne.n	80050fa <UART_SetConfig+0x102>
 80050f0:	231f      	movs	r3, #31
 80050f2:	18fb      	adds	r3, r7, r3
 80050f4:	2200      	movs	r2, #0
 80050f6:	701a      	strb	r2, [r3, #0]
 80050f8:	e003      	b.n	8005102 <UART_SetConfig+0x10a>
 80050fa:	231f      	movs	r3, #31
 80050fc:	18fb      	adds	r3, r7, r3
 80050fe:	2210      	movs	r2, #16
 8005100:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	69da      	ldr	r2, [r3, #28]
 8005106:	2380      	movs	r3, #128	@ 0x80
 8005108:	021b      	lsls	r3, r3, #8
 800510a:	429a      	cmp	r2, r3
 800510c:	d000      	beq.n	8005110 <UART_SetConfig+0x118>
 800510e:	e06f      	b.n	80051f0 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8005110:	231f      	movs	r3, #31
 8005112:	18fb      	adds	r3, r7, r3
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	2b08      	cmp	r3, #8
 8005118:	d01f      	beq.n	800515a <UART_SetConfig+0x162>
 800511a:	dc22      	bgt.n	8005162 <UART_SetConfig+0x16a>
 800511c:	2b04      	cmp	r3, #4
 800511e:	d017      	beq.n	8005150 <UART_SetConfig+0x158>
 8005120:	dc1f      	bgt.n	8005162 <UART_SetConfig+0x16a>
 8005122:	2b00      	cmp	r3, #0
 8005124:	d002      	beq.n	800512c <UART_SetConfig+0x134>
 8005126:	2b02      	cmp	r3, #2
 8005128:	d005      	beq.n	8005136 <UART_SetConfig+0x13e>
 800512a:	e01a      	b.n	8005162 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800512c:	f7ff fe02 	bl	8004d34 <HAL_RCC_GetPCLK1Freq>
 8005130:	0003      	movs	r3, r0
 8005132:	61bb      	str	r3, [r7, #24]
        break;
 8005134:	e01c      	b.n	8005170 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8005136:	4b6b      	ldr	r3, [pc, #428]	@ (80052e4 <UART_SetConfig+0x2ec>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	095b      	lsrs	r3, r3, #5
 800513c:	2207      	movs	r2, #7
 800513e:	4013      	ands	r3, r2
 8005140:	3301      	adds	r3, #1
 8005142:	0019      	movs	r1, r3
 8005144:	4869      	ldr	r0, [pc, #420]	@ (80052ec <UART_SetConfig+0x2f4>)
 8005146:	f7fa ffdf 	bl	8000108 <__udivsi3>
 800514a:	0003      	movs	r3, r0
 800514c:	61bb      	str	r3, [r7, #24]
        break;
 800514e:	e00f      	b.n	8005170 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005150:	f7ff fd92 	bl	8004c78 <HAL_RCC_GetSysClockFreq>
 8005154:	0003      	movs	r3, r0
 8005156:	61bb      	str	r3, [r7, #24]
        break;
 8005158:	e00a      	b.n	8005170 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800515a:	2380      	movs	r3, #128	@ 0x80
 800515c:	021b      	lsls	r3, r3, #8
 800515e:	61bb      	str	r3, [r7, #24]
        break;
 8005160:	e006      	b.n	8005170 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8005162:	2300      	movs	r3, #0
 8005164:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005166:	231e      	movs	r3, #30
 8005168:	18fb      	adds	r3, r7, r3
 800516a:	2201      	movs	r2, #1
 800516c:	701a      	strb	r2, [r3, #0]
        break;
 800516e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d100      	bne.n	8005178 <UART_SetConfig+0x180>
 8005176:	e097      	b.n	80052a8 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800517c:	4b5c      	ldr	r3, [pc, #368]	@ (80052f0 <UART_SetConfig+0x2f8>)
 800517e:	0052      	lsls	r2, r2, #1
 8005180:	5ad3      	ldrh	r3, [r2, r3]
 8005182:	0019      	movs	r1, r3
 8005184:	69b8      	ldr	r0, [r7, #24]
 8005186:	f7fa ffbf 	bl	8000108 <__udivsi3>
 800518a:	0003      	movs	r3, r0
 800518c:	005a      	lsls	r2, r3, #1
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	085b      	lsrs	r3, r3, #1
 8005194:	18d2      	adds	r2, r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	0019      	movs	r1, r3
 800519c:	0010      	movs	r0, r2
 800519e:	f7fa ffb3 	bl	8000108 <__udivsi3>
 80051a2:	0003      	movs	r3, r0
 80051a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	2b0f      	cmp	r3, #15
 80051aa:	d91c      	bls.n	80051e6 <UART_SetConfig+0x1ee>
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	2380      	movs	r3, #128	@ 0x80
 80051b0:	025b      	lsls	r3, r3, #9
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d217      	bcs.n	80051e6 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	200e      	movs	r0, #14
 80051bc:	183b      	adds	r3, r7, r0
 80051be:	210f      	movs	r1, #15
 80051c0:	438a      	bics	r2, r1
 80051c2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	085b      	lsrs	r3, r3, #1
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	2207      	movs	r2, #7
 80051cc:	4013      	ands	r3, r2
 80051ce:	b299      	uxth	r1, r3
 80051d0:	183b      	adds	r3, r7, r0
 80051d2:	183a      	adds	r2, r7, r0
 80051d4:	8812      	ldrh	r2, [r2, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	183a      	adds	r2, r7, r0
 80051e0:	8812      	ldrh	r2, [r2, #0]
 80051e2:	60da      	str	r2, [r3, #12]
 80051e4:	e060      	b.n	80052a8 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80051e6:	231e      	movs	r3, #30
 80051e8:	18fb      	adds	r3, r7, r3
 80051ea:	2201      	movs	r2, #1
 80051ec:	701a      	strb	r2, [r3, #0]
 80051ee:	e05b      	b.n	80052a8 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051f0:	231f      	movs	r3, #31
 80051f2:	18fb      	adds	r3, r7, r3
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	2b08      	cmp	r3, #8
 80051f8:	d01f      	beq.n	800523a <UART_SetConfig+0x242>
 80051fa:	dc22      	bgt.n	8005242 <UART_SetConfig+0x24a>
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d017      	beq.n	8005230 <UART_SetConfig+0x238>
 8005200:	dc1f      	bgt.n	8005242 <UART_SetConfig+0x24a>
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <UART_SetConfig+0x214>
 8005206:	2b02      	cmp	r3, #2
 8005208:	d005      	beq.n	8005216 <UART_SetConfig+0x21e>
 800520a:	e01a      	b.n	8005242 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800520c:	f7ff fd92 	bl	8004d34 <HAL_RCC_GetPCLK1Freq>
 8005210:	0003      	movs	r3, r0
 8005212:	61bb      	str	r3, [r7, #24]
        break;
 8005214:	e01c      	b.n	8005250 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8005216:	4b33      	ldr	r3, [pc, #204]	@ (80052e4 <UART_SetConfig+0x2ec>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	095b      	lsrs	r3, r3, #5
 800521c:	2207      	movs	r2, #7
 800521e:	4013      	ands	r3, r2
 8005220:	3301      	adds	r3, #1
 8005222:	0019      	movs	r1, r3
 8005224:	4831      	ldr	r0, [pc, #196]	@ (80052ec <UART_SetConfig+0x2f4>)
 8005226:	f7fa ff6f 	bl	8000108 <__udivsi3>
 800522a:	0003      	movs	r3, r0
 800522c:	61bb      	str	r3, [r7, #24]
        break;
 800522e:	e00f      	b.n	8005250 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005230:	f7ff fd22 	bl	8004c78 <HAL_RCC_GetSysClockFreq>
 8005234:	0003      	movs	r3, r0
 8005236:	61bb      	str	r3, [r7, #24]
        break;
 8005238:	e00a      	b.n	8005250 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800523a:	2380      	movs	r3, #128	@ 0x80
 800523c:	021b      	lsls	r3, r3, #8
 800523e:	61bb      	str	r3, [r7, #24]
        break;
 8005240:	e006      	b.n	8005250 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005246:	231e      	movs	r3, #30
 8005248:	18fb      	adds	r3, r7, r3
 800524a:	2201      	movs	r2, #1
 800524c:	701a      	strb	r2, [r3, #0]
        break;
 800524e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d028      	beq.n	80052a8 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800525a:	4b25      	ldr	r3, [pc, #148]	@ (80052f0 <UART_SetConfig+0x2f8>)
 800525c:	0052      	lsls	r2, r2, #1
 800525e:	5ad3      	ldrh	r3, [r2, r3]
 8005260:	0019      	movs	r1, r3
 8005262:	69b8      	ldr	r0, [r7, #24]
 8005264:	f7fa ff50 	bl	8000108 <__udivsi3>
 8005268:	0003      	movs	r3, r0
 800526a:	001a      	movs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	085b      	lsrs	r3, r3, #1
 8005272:	18d2      	adds	r2, r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	0019      	movs	r1, r3
 800527a:	0010      	movs	r0, r2
 800527c:	f7fa ff44 	bl	8000108 <__udivsi3>
 8005280:	0003      	movs	r3, r0
 8005282:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	2b0f      	cmp	r3, #15
 8005288:	d90a      	bls.n	80052a0 <UART_SetConfig+0x2a8>
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	2380      	movs	r3, #128	@ 0x80
 800528e:	025b      	lsls	r3, r3, #9
 8005290:	429a      	cmp	r2, r3
 8005292:	d205      	bcs.n	80052a0 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	b29a      	uxth	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	60da      	str	r2, [r3, #12]
 800529e:	e003      	b.n	80052a8 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80052a0:	231e      	movs	r3, #30
 80052a2:	18fb      	adds	r3, r7, r3
 80052a4:	2201      	movs	r2, #1
 80052a6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	226a      	movs	r2, #106	@ 0x6a
 80052ac:	2101      	movs	r1, #1
 80052ae:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2268      	movs	r2, #104	@ 0x68
 80052b4:	2101      	movs	r1, #1
 80052b6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80052c4:	231e      	movs	r3, #30
 80052c6:	18fb      	adds	r3, r7, r3
 80052c8:	781b      	ldrb	r3, [r3, #0]
}
 80052ca:	0018      	movs	r0, r3
 80052cc:	46bd      	mov	sp, r7
 80052ce:	b008      	add	sp, #32
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	46c0      	nop			@ (mov r8, r8)
 80052d4:	cfff69f3 	.word	0xcfff69f3
 80052d8:	ffffcfff 	.word	0xffffcfff
 80052dc:	11fff4ff 	.word	0x11fff4ff
 80052e0:	40013800 	.word	0x40013800
 80052e4:	40021000 	.word	0x40021000
 80052e8:	40004400 	.word	0x40004400
 80052ec:	02dc6c00 	.word	0x02dc6c00
 80052f0:	08005834 	.word	0x08005834

080052f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005300:	2208      	movs	r2, #8
 8005302:	4013      	ands	r3, r2
 8005304:	d00b      	beq.n	800531e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	4a4a      	ldr	r2, [pc, #296]	@ (8005438 <UART_AdvFeatureConfig+0x144>)
 800530e:	4013      	ands	r3, r2
 8005310:	0019      	movs	r1, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005322:	2201      	movs	r2, #1
 8005324:	4013      	ands	r3, r2
 8005326:	d00b      	beq.n	8005340 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	4a43      	ldr	r2, [pc, #268]	@ (800543c <UART_AdvFeatureConfig+0x148>)
 8005330:	4013      	ands	r3, r2
 8005332:	0019      	movs	r1, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005344:	2202      	movs	r2, #2
 8005346:	4013      	ands	r3, r2
 8005348:	d00b      	beq.n	8005362 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	4a3b      	ldr	r2, [pc, #236]	@ (8005440 <UART_AdvFeatureConfig+0x14c>)
 8005352:	4013      	ands	r3, r2
 8005354:	0019      	movs	r1, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005366:	2204      	movs	r2, #4
 8005368:	4013      	ands	r3, r2
 800536a:	d00b      	beq.n	8005384 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	4a34      	ldr	r2, [pc, #208]	@ (8005444 <UART_AdvFeatureConfig+0x150>)
 8005374:	4013      	ands	r3, r2
 8005376:	0019      	movs	r1, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	430a      	orrs	r2, r1
 8005382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005388:	2210      	movs	r2, #16
 800538a:	4013      	ands	r3, r2
 800538c:	d00b      	beq.n	80053a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	4a2c      	ldr	r2, [pc, #176]	@ (8005448 <UART_AdvFeatureConfig+0x154>)
 8005396:	4013      	ands	r3, r2
 8005398:	0019      	movs	r1, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053aa:	2220      	movs	r2, #32
 80053ac:	4013      	ands	r3, r2
 80053ae:	d00b      	beq.n	80053c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	4a25      	ldr	r2, [pc, #148]	@ (800544c <UART_AdvFeatureConfig+0x158>)
 80053b8:	4013      	ands	r3, r2
 80053ba:	0019      	movs	r1, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	430a      	orrs	r2, r1
 80053c6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053cc:	2240      	movs	r2, #64	@ 0x40
 80053ce:	4013      	ands	r3, r2
 80053d0:	d01d      	beq.n	800540e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005450 <UART_AdvFeatureConfig+0x15c>)
 80053da:	4013      	ands	r3, r2
 80053dc:	0019      	movs	r1, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053ee:	2380      	movs	r3, #128	@ 0x80
 80053f0:	035b      	lsls	r3, r3, #13
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d10b      	bne.n	800540e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	4a15      	ldr	r2, [pc, #84]	@ (8005454 <UART_AdvFeatureConfig+0x160>)
 80053fe:	4013      	ands	r3, r2
 8005400:	0019      	movs	r1, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005412:	2280      	movs	r2, #128	@ 0x80
 8005414:	4013      	ands	r3, r2
 8005416:	d00b      	beq.n	8005430 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	4a0e      	ldr	r2, [pc, #56]	@ (8005458 <UART_AdvFeatureConfig+0x164>)
 8005420:	4013      	ands	r3, r2
 8005422:	0019      	movs	r1, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	430a      	orrs	r2, r1
 800542e:	605a      	str	r2, [r3, #4]
  }
}
 8005430:	46c0      	nop			@ (mov r8, r8)
 8005432:	46bd      	mov	sp, r7
 8005434:	b002      	add	sp, #8
 8005436:	bd80      	pop	{r7, pc}
 8005438:	ffff7fff 	.word	0xffff7fff
 800543c:	fffdffff 	.word	0xfffdffff
 8005440:	fffeffff 	.word	0xfffeffff
 8005444:	fffbffff 	.word	0xfffbffff
 8005448:	ffffefff 	.word	0xffffefff
 800544c:	ffffdfff 	.word	0xffffdfff
 8005450:	ffefffff 	.word	0xffefffff
 8005454:	ff9fffff 	.word	0xff9fffff
 8005458:	fff7ffff 	.word	0xfff7ffff

0800545c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b092      	sub	sp, #72	@ 0x48
 8005460:	af02      	add	r7, sp, #8
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2290      	movs	r2, #144	@ 0x90
 8005468:	2100      	movs	r1, #0
 800546a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800546c:	f7fb fd04 	bl	8000e78 <HAL_GetTick>
 8005470:	0003      	movs	r3, r0
 8005472:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2208      	movs	r2, #8
 800547c:	4013      	ands	r3, r2
 800547e:	2b08      	cmp	r3, #8
 8005480:	d12d      	bne.n	80054de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005484:	2280      	movs	r2, #128	@ 0x80
 8005486:	0391      	lsls	r1, r2, #14
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	4a47      	ldr	r2, [pc, #284]	@ (80055a8 <UART_CheckIdleState+0x14c>)
 800548c:	9200      	str	r2, [sp, #0]
 800548e:	2200      	movs	r2, #0
 8005490:	f000 f88e 	bl	80055b0 <UART_WaitOnFlagUntilTimeout>
 8005494:	1e03      	subs	r3, r0, #0
 8005496:	d022      	beq.n	80054de <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005498:	f3ef 8310 	mrs	r3, PRIMASK
 800549c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800549e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80054a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054a2:	2301      	movs	r3, #1
 80054a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a8:	f383 8810 	msr	PRIMASK, r3
}
 80054ac:	46c0      	nop			@ (mov r8, r8)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2180      	movs	r1, #128	@ 0x80
 80054ba:	438a      	bics	r2, r1
 80054bc:	601a      	str	r2, [r3, #0]
 80054be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c4:	f383 8810 	msr	PRIMASK, r3
}
 80054c8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2288      	movs	r2, #136	@ 0x88
 80054ce:	2120      	movs	r1, #32
 80054d0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2284      	movs	r2, #132	@ 0x84
 80054d6:	2100      	movs	r1, #0
 80054d8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e060      	b.n	80055a0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2204      	movs	r2, #4
 80054e6:	4013      	ands	r3, r2
 80054e8:	2b04      	cmp	r3, #4
 80054ea:	d146      	bne.n	800557a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054ee:	2280      	movs	r2, #128	@ 0x80
 80054f0:	03d1      	lsls	r1, r2, #15
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	4a2c      	ldr	r2, [pc, #176]	@ (80055a8 <UART_CheckIdleState+0x14c>)
 80054f6:	9200      	str	r2, [sp, #0]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f000 f859 	bl	80055b0 <UART_WaitOnFlagUntilTimeout>
 80054fe:	1e03      	subs	r3, r0, #0
 8005500:	d03b      	beq.n	800557a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005502:	f3ef 8310 	mrs	r3, PRIMASK
 8005506:	60fb      	str	r3, [r7, #12]
  return(result);
 8005508:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800550a:	637b      	str	r3, [r7, #52]	@ 0x34
 800550c:	2301      	movs	r3, #1
 800550e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f383 8810 	msr	PRIMASK, r3
}
 8005516:	46c0      	nop			@ (mov r8, r8)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4922      	ldr	r1, [pc, #136]	@ (80055ac <UART_CheckIdleState+0x150>)
 8005524:	400a      	ands	r2, r1
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800552a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f383 8810 	msr	PRIMASK, r3
}
 8005532:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005534:	f3ef 8310 	mrs	r3, PRIMASK
 8005538:	61bb      	str	r3, [r7, #24]
  return(result);
 800553a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800553c:	633b      	str	r3, [r7, #48]	@ 0x30
 800553e:	2301      	movs	r3, #1
 8005540:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	f383 8810 	msr	PRIMASK, r3
}
 8005548:	46c0      	nop			@ (mov r8, r8)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2101      	movs	r1, #1
 8005556:	438a      	bics	r2, r1
 8005558:	609a      	str	r2, [r3, #8]
 800555a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	f383 8810 	msr	PRIMASK, r3
}
 8005564:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	228c      	movs	r2, #140	@ 0x8c
 800556a:	2120      	movs	r1, #32
 800556c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2284      	movs	r2, #132	@ 0x84
 8005572:	2100      	movs	r1, #0
 8005574:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e012      	b.n	80055a0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2288      	movs	r2, #136	@ 0x88
 800557e:	2120      	movs	r1, #32
 8005580:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	228c      	movs	r2, #140	@ 0x8c
 8005586:	2120      	movs	r1, #32
 8005588:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2284      	movs	r2, #132	@ 0x84
 800559a:	2100      	movs	r1, #0
 800559c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	0018      	movs	r0, r3
 80055a2:	46bd      	mov	sp, r7
 80055a4:	b010      	add	sp, #64	@ 0x40
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	01ffffff 	.word	0x01ffffff
 80055ac:	fffffedf 	.word	0xfffffedf

080055b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	603b      	str	r3, [r7, #0]
 80055bc:	1dfb      	adds	r3, r7, #7
 80055be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055c0:	e051      	b.n	8005666 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	3301      	adds	r3, #1
 80055c6:	d04e      	beq.n	8005666 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c8:	f7fb fc56 	bl	8000e78 <HAL_GetTick>
 80055cc:	0002      	movs	r2, r0
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d302      	bcc.n	80055de <UART_WaitOnFlagUntilTimeout+0x2e>
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e051      	b.n	8005686 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2204      	movs	r2, #4
 80055ea:	4013      	ands	r3, r2
 80055ec:	d03b      	beq.n	8005666 <UART_WaitOnFlagUntilTimeout+0xb6>
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	2b80      	cmp	r3, #128	@ 0x80
 80055f2:	d038      	beq.n	8005666 <UART_WaitOnFlagUntilTimeout+0xb6>
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b40      	cmp	r3, #64	@ 0x40
 80055f8:	d035      	beq.n	8005666 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	2208      	movs	r2, #8
 8005602:	4013      	ands	r3, r2
 8005604:	2b08      	cmp	r3, #8
 8005606:	d111      	bne.n	800562c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2208      	movs	r2, #8
 800560e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	0018      	movs	r0, r3
 8005614:	f000 f83c 	bl	8005690 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2290      	movs	r2, #144	@ 0x90
 800561c:	2108      	movs	r1, #8
 800561e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2284      	movs	r2, #132	@ 0x84
 8005624:	2100      	movs	r1, #0
 8005626:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e02c      	b.n	8005686 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	69da      	ldr	r2, [r3, #28]
 8005632:	2380      	movs	r3, #128	@ 0x80
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	401a      	ands	r2, r3
 8005638:	2380      	movs	r3, #128	@ 0x80
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	429a      	cmp	r2, r3
 800563e:	d112      	bne.n	8005666 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2280      	movs	r2, #128	@ 0x80
 8005646:	0112      	lsls	r2, r2, #4
 8005648:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	0018      	movs	r0, r3
 800564e:	f000 f81f 	bl	8005690 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2290      	movs	r2, #144	@ 0x90
 8005656:	2120      	movs	r1, #32
 8005658:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2284      	movs	r2, #132	@ 0x84
 800565e:	2100      	movs	r1, #0
 8005660:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e00f      	b.n	8005686 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	4013      	ands	r3, r2
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	425a      	negs	r2, r3
 8005676:	4153      	adcs	r3, r2
 8005678:	b2db      	uxtb	r3, r3
 800567a:	001a      	movs	r2, r3
 800567c:	1dfb      	adds	r3, r7, #7
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	429a      	cmp	r2, r3
 8005682:	d09e      	beq.n	80055c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	0018      	movs	r0, r3
 8005688:	46bd      	mov	sp, r7
 800568a:	b004      	add	sp, #16
 800568c:	bd80      	pop	{r7, pc}
	...

08005690 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b08e      	sub	sp, #56	@ 0x38
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005698:	f3ef 8310 	mrs	r3, PRIMASK
 800569c:	617b      	str	r3, [r7, #20]
  return(result);
 800569e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80056a2:	2301      	movs	r3, #1
 80056a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	f383 8810 	msr	PRIMASK, r3
}
 80056ac:	46c0      	nop			@ (mov r8, r8)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4926      	ldr	r1, [pc, #152]	@ (8005754 <UART_EndRxTransfer+0xc4>)
 80056ba:	400a      	ands	r2, r1
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	f383 8810 	msr	PRIMASK, r3
}
 80056c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80056ca:	f3ef 8310 	mrs	r3, PRIMASK
 80056ce:	623b      	str	r3, [r7, #32]
  return(result);
 80056d0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80056d4:	2301      	movs	r3, #1
 80056d6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056da:	f383 8810 	msr	PRIMASK, r3
}
 80056de:	46c0      	nop			@ (mov r8, r8)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689a      	ldr	r2, [r3, #8]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	491b      	ldr	r1, [pc, #108]	@ (8005758 <UART_EndRxTransfer+0xc8>)
 80056ec:	400a      	ands	r2, r1
 80056ee:	609a      	str	r2, [r3, #8]
 80056f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f6:	f383 8810 	msr	PRIMASK, r3
}
 80056fa:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005700:	2b01      	cmp	r3, #1
 8005702:	d118      	bne.n	8005736 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005704:	f3ef 8310 	mrs	r3, PRIMASK
 8005708:	60bb      	str	r3, [r7, #8]
  return(result);
 800570a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800570c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800570e:	2301      	movs	r3, #1
 8005710:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f383 8810 	msr	PRIMASK, r3
}
 8005718:	46c0      	nop			@ (mov r8, r8)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2110      	movs	r1, #16
 8005726:	438a      	bics	r2, r1
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800572c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f383 8810 	msr	PRIMASK, r3
}
 8005734:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	228c      	movs	r2, #140	@ 0x8c
 800573a:	2120      	movs	r1, #32
 800573c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800574a:	46c0      	nop			@ (mov r8, r8)
 800574c:	46bd      	mov	sp, r7
 800574e:	b00e      	add	sp, #56	@ 0x38
 8005750:	bd80      	pop	{r7, pc}
 8005752:	46c0      	nop			@ (mov r8, r8)
 8005754:	fffffedf 	.word	0xfffffedf
 8005758:	effffffe 	.word	0xeffffffe

0800575c <memset>:
 800575c:	0003      	movs	r3, r0
 800575e:	1882      	adds	r2, r0, r2
 8005760:	4293      	cmp	r3, r2
 8005762:	d100      	bne.n	8005766 <memset+0xa>
 8005764:	4770      	bx	lr
 8005766:	7019      	strb	r1, [r3, #0]
 8005768:	3301      	adds	r3, #1
 800576a:	e7f9      	b.n	8005760 <memset+0x4>

0800576c <__libc_init_array>:
 800576c:	b570      	push	{r4, r5, r6, lr}
 800576e:	2600      	movs	r6, #0
 8005770:	4c0c      	ldr	r4, [pc, #48]	@ (80057a4 <__libc_init_array+0x38>)
 8005772:	4d0d      	ldr	r5, [pc, #52]	@ (80057a8 <__libc_init_array+0x3c>)
 8005774:	1b64      	subs	r4, r4, r5
 8005776:	10a4      	asrs	r4, r4, #2
 8005778:	42a6      	cmp	r6, r4
 800577a:	d109      	bne.n	8005790 <__libc_init_array+0x24>
 800577c:	2600      	movs	r6, #0
 800577e:	f000 f819 	bl	80057b4 <_init>
 8005782:	4c0a      	ldr	r4, [pc, #40]	@ (80057ac <__libc_init_array+0x40>)
 8005784:	4d0a      	ldr	r5, [pc, #40]	@ (80057b0 <__libc_init_array+0x44>)
 8005786:	1b64      	subs	r4, r4, r5
 8005788:	10a4      	asrs	r4, r4, #2
 800578a:	42a6      	cmp	r6, r4
 800578c:	d105      	bne.n	800579a <__libc_init_array+0x2e>
 800578e:	bd70      	pop	{r4, r5, r6, pc}
 8005790:	00b3      	lsls	r3, r6, #2
 8005792:	58eb      	ldr	r3, [r5, r3]
 8005794:	4798      	blx	r3
 8005796:	3601      	adds	r6, #1
 8005798:	e7ee      	b.n	8005778 <__libc_init_array+0xc>
 800579a:	00b3      	lsls	r3, r6, #2
 800579c:	58eb      	ldr	r3, [r5, r3]
 800579e:	4798      	blx	r3
 80057a0:	3601      	adds	r6, #1
 80057a2:	e7f2      	b.n	800578a <__libc_init_array+0x1e>
 80057a4:	0800584c 	.word	0x0800584c
 80057a8:	0800584c 	.word	0x0800584c
 80057ac:	08005850 	.word	0x08005850
 80057b0:	0800584c 	.word	0x0800584c

080057b4 <_init>:
 80057b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057b6:	46c0      	nop			@ (mov r8, r8)
 80057b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ba:	bc08      	pop	{r3}
 80057bc:	469e      	mov	lr, r3
 80057be:	4770      	bx	lr

080057c0 <_fini>:
 80057c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c2:	46c0      	nop			@ (mov r8, r8)
 80057c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057c6:	bc08      	pop	{r3}
 80057c8:	469e      	mov	lr, r3
 80057ca:	4770      	bx	lr
